// Type definitions for ts-tinkerpop 1.1.7
// Project: https://github.com/RedSeal-co/ts-tinkerpop
// Definitions by: Jim Lloyd <https://github.com/jimlloyd>
// Definitions: https://github.com/borisyankov/DefinitelyTyped

/// <reference path="java.d.ts"/>
/// <reference path="../bluebird/bluebird.d.ts"/>
/// <reference path="java.d.ts" />
/// <reference path="../bluebird/bluebird.d.ts" />
// Generated by dts-bundle v0.2.0
// Dependencies for this module:
//   ../typings/bluebird/bluebird.d.ts
declare module 'ts-tinkerpop' {
    import _autoImport = require('__ts-tinkerpop/autoImport');
    import BluePromise = require('bluebird');
    module Tinkerpop {
        type Static = typeof Tinkerpop;
        var autoImport: typeof _autoImport;
        var java: Java.NodeAPI;
        var __: Java.__.Static;
        var Compare: Java.Compare.Static;
        var GraphSONReader: Java.GraphSONReader.Static;
        var GraphSONWriter: Java.GraphSONWriter.Static;
        var GraphSONMapper: Java.GraphSONMapper.Static;
        var GremlinGroovyScriptEngine: Java.GremlinGroovyScriptEngine.Static;
        var ScriptEngineLambda: Java.ScriptEngineLambda.Static;
        var T: Java.T.Static;
        var TinkerFactory: Java.TinkerFactory.Static;
        var TinkerGraph: Java.TinkerGraph.Static;
        var ByteArrayOutputStream: Java.ByteArrayOutputStream.Static;
        var GroovyLambda: Java.GroovyLambda.Static;
        var NULL: Java.NullObject;
        var UTF8: string;
        function initialize(): void;
        function getTinkerpop(): BluePromise<Static>;
        function id(n: number): Java.Object;
        function ids(a: number[]): Java.array_t<Java.Object>;
        function newJavaScriptLambda(javascript: string): Java.ScriptEngineLambda;
        function newGroovyLambda(groovyFragment: string): Java.ScriptEngineLambda;
        function newGroovyClosure(groovyClosureString: string): Java.GroovyLambda;
        function getGroovyEngine(): Java.GremlinGroovyScriptEngine;
        function importGroovy(javaClassOrPkg: string): void;
        function vertexStringify(vertex: Java.Vertex): string;
        function vertexToJson(vertex: Java.Vertex): any;
        function edgeStringify(edge: Java.Edge): string;
        function edgeToJson(edge: Java.Edge): any;
        function L(n: number): Java.longValue_t;
        function isLongValue(obj: any): boolean;
        function isJavaObject(e: any): boolean;
        function asJavaObject(obj: Java.object_t): Java.Object;
        function isVertex(v: any): boolean;
        function asVertex(v: Java.object_t): Java.Vertex;
        function isEdge(e: any): boolean;
        function asEdge(e: Java.object_t): Java.Edge;
        interface ConsumeObject {
            (item: Java.object_t): any | BluePromise<any>;
        }
        function forEach(javaIterator: Java.Iterator, consumer: ConsumeObject): BluePromise<void>;
        function asJSON(traversal: Java.Traversal): any[];
        function simplifyVertexProperties(obj: any[]): any[];
        function simplifyVertexProperties(obj: any): any;
        interface GraphCallback {
            (err: Error, graph: Java.Graph): any;
        }
        function loadGraphSON(graph: Java.Graph, filename: string, callback?: GraphCallback): BluePromise<Java.Graph>;
        function loadGraphSONSync(graph: Java.Graph, filename: string): Java.Graph;
        function loadPrettyGraphSON(graph: Java.Graph, filename: string, callback?: GraphCallback): BluePromise<Java.Graph>;
        function loadPrettyGraphSONSync(graph: Java.Graph, filename: string): Java.Graph;
        function saveGraphSON(graph: Java.Graph, filename: string, callback?: GraphCallback): BluePromise<Java.Graph>;
        function saveGraphSONSync(graph: Java.Graph, filename: string): Java.Graph;
        function savePrettyGraphSON(graph: Java.Graph, filename: string, callback?: GraphCallback): BluePromise<Java.Graph>;
        function savePrettyGraphSONSync(graph: Java.Graph, filename: string): Java.Graph;
        function isType(o: any, typeName: string): boolean;
        function jsify(arg: any): any;
        interface MapEntry {
            key: any;
            value: any;
        }
        interface BulkSetElement {
            key: string;
            count: Java.longValue_t;
        }
        interface PathElement {
            object: any;
            labels: string[];
        }
    }
    export = Tinkerpop;
}
declare module '__ts-tinkerpop/autoImport' {
    export = autoImport;
    function autoImport(shortName: 'GlobFunction'): Java.co.redseal.gremlinnode.function_.GlobFunction.Static;
    function autoImport(shortName: 'GroovyLambda'): Java.co.redseal.gremlinnode.function_.GroovyLambda.Static;
    function autoImport(shortName: 'TestClass'): Java.co.redseal.gremlinnode.testing.TestClass.Static;
    function autoImport(shortName: 'StringInputStream'): Java.co.redseal.util.StringInputStream.Static;
    function autoImport(shortName: 'Binding'): Java.groovy.lang.Binding.Static;
    function autoImport(shortName: 'Closure'): Java.groovy.lang.Closure.Static;
    function autoImport(shortName: 'DelegatingMetaClass'): Java.groovy.lang.DelegatingMetaClass.Static;
    function autoImport(shortName: 'GroovyClassLoader'): Java.groovy.lang.GroovyClassLoader.Static;
    function autoImport(shortName: 'GroovyCodeSource'): Java.groovy.lang.GroovyCodeSource.Static;
    function autoImport(shortName: 'GroovyObjectSupport'): Java.groovy.lang.GroovyObjectSupport.Static;
    function autoImport(shortName: 'GroovyResourceLoader'): Java.groovy.lang.GroovyResourceLoader.Static;
    function autoImport(shortName: 'IntRange'): Java.groovy.lang.IntRange.Static;
    function autoImport(shortName: 'MetaBeanProperty'): Java.groovy.lang.MetaBeanProperty.Static;
    function autoImport(shortName: 'MetaClass'): Java.groovy.lang.MetaClass.Static;
    function autoImport(shortName: 'MetaMethod'): Java.groovy.lang.MetaMethod.Static;
    function autoImport(shortName: 'MetaProperty'): Java.groovy.lang.MetaProperty.Static;
    function autoImport(shortName: 'Range'): Java.groovy.lang.Range.Static;
    function autoImport(shortName: 'Reference'): Java.groovy.lang.Reference.Static;
    function autoImport(shortName: 'ByteArrayOutputStream'): Java.java.io.ByteArrayOutputStream.Static;
    function autoImport(shortName: 'FileInputStream'): Java.java.io.FileInputStream.Static;
    function autoImport(shortName: 'FileOutputStream'): Java.java.io.FileOutputStream.Static;
    function autoImport(shortName: 'InputStream'): Java.java.io.InputStream.Static;
    function autoImport(shortName: 'OutputStream'): Java.java.io.OutputStream.Static;
    function autoImport(shortName: 'Boolean'): Java.java.lang.Boolean.Static;
    function autoImport(shortName: 'Class'): Java.java.lang.Class.Static;
    function autoImport(shortName: 'ClassLoader'): Java.java.lang.ClassLoader.Static;
    function autoImport(shortName: 'Double'): Java.java.lang.Double.Static;
    function autoImport(shortName: 'Enum'): Java.java.lang.Enum.Static;
    function autoImport(shortName: 'Float'): Java.java.lang.Float.Static;
    function autoImport(shortName: 'Integer'): Java.java.lang.Integer.Static;
    function autoImport(shortName: 'Iterable'): Java.java.lang.Iterable.Static;
    function autoImport(shortName: 'Long'): Java.java.lang.Long.Static;
    function autoImport(shortName: 'Object'): Java.java.lang.Object.Static;
    function autoImport(shortName: 'Array'): Java.java.lang.reflect.Array.Static;
    function autoImport(shortName: 'Short'): Java.java.lang.Short.Static;
    function autoImport(shortName: 'String'): Java.java.lang.String.Static;
    function autoImport(shortName: 'Charset'): Java.java.nio.charset.Charset.Static;
    function autoImport(shortName: 'StandardCharsets'): Java.java.nio.charset.StandardCharsets.Static;
    function autoImport(shortName: 'AbstractCollection'): Java.java.util.AbstractCollection.Static;
    function autoImport(shortName: 'AbstractList'): Java.java.util.AbstractList.Static;
    function autoImport(shortName: 'AbstractMap'): Java.java.util.AbstractMap.Static;
    function autoImport(shortName: 'AbstractSet'): Java.java.util.AbstractSet.Static;
    function autoImport(shortName: 'ArrayList'): Java.java.util.ArrayList.Static;
    function autoImport(shortName: 'Collection'): Java.java.util.Collection.Static;
    function autoImport(shortName: 'Comparator'): Java.java.util.Comparator.Static;
    function autoImport(shortName: 'BiConsumer'): Java.java.util.function_.BiConsumer.Static;
    function autoImport(shortName: 'BiFunction'): Java.java.util.function_.BiFunction.Static;
    function autoImport(shortName: 'BinaryOperator'): Java.java.util.function_.BinaryOperator.Static;
    function autoImport(shortName: 'BiPredicate'): Java.java.util.function_.BiPredicate.Static;
    function autoImport(shortName: 'Consumer'): Java.java.util.function_.Consumer.Static;
    function autoImport(shortName: 'Function'): Java.java.util.function_.Function.Static;
    function autoImport(shortName: 'Predicate'): Java.java.util.function_.Predicate.Static;
    function autoImport(shortName: 'Supplier'): Java.java.util.function_.Supplier.Static;
    function autoImport(shortName: 'UnaryOperator'): Java.java.util.function_.UnaryOperator.Static;
    function autoImport(shortName: 'HashMap'): Java.java.util.HashMap.Static;
    function autoImport(shortName: 'HashSet'): Java.java.util.HashSet.Static;
    function autoImport(shortName: 'Iterator'): Java.java.util.Iterator.Static;
    function autoImport(shortName: 'LinkedHashMap'): Java.java.util.LinkedHashMap.Static;
    function autoImport(shortName: 'List'): Java.java.util.List.Static;
    function autoImport(shortName: 'ListIterator'): Java.java.util.ListIterator.Static;
    function autoImport(shortName: 'Map'): Java.java.util.Map.Static;
    function autoImport(shortName: 'Map$Entry'): Java.java.util.Map$Entry.Static;
    function autoImport(shortName: 'NoSuchElementException'): Java.java.util.NoSuchElementException.Static;
    function autoImport(shortName: 'Set'): Java.java.util.Set.Static;
    function autoImport(shortName: 'AbstractScriptEngine'): Java.javax.script.AbstractScriptEngine.Static;
    function autoImport(shortName: 'Bindings'): Java.javax.script.Bindings.Static;
    function autoImport(shortName: 'CompiledScript'): Java.javax.script.CompiledScript.Static;
    function autoImport(shortName: 'ScriptContext'): Java.javax.script.ScriptContext.Static;
    function autoImport(shortName: 'ScriptEngine'): Java.javax.script.ScriptEngine.Static;
    function autoImport(shortName: 'ScriptEngineFactory'): Java.javax.script.ScriptEngineFactory.Static;
    function autoImport(shortName: 'GComparator'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GComparator.Static;
    function autoImport(shortName: 'GFunction'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GFunction.Static;
    function autoImport(shortName: 'GSupplier'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GSupplier.Static;
    function autoImport(shortName: 'GUnaryOperator'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GUnaryOperator.Static;
    function autoImport(shortName: 'GremlinGroovyScriptEngine'): Java.org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.Static;
    function autoImport(shortName: 'ClusterCountMapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.Static;
    function autoImport(shortName: 'ClusterCountMapReduce$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder.Static;
    function autoImport(shortName: 'ClusterPopulationMapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.Static;
    function autoImport(shortName: 'ClusterPopulationMapReduce$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder.Static;
    function autoImport(shortName: 'PeerPressureVertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.Static;
    function autoImport(shortName: 'PeerPressureVertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder.Static;
    function autoImport(shortName: 'ComputerResult'): Java.org.apache.tinkerpop.gremlin.process.computer.ComputerResult.Static;
    function autoImport(shortName: 'GraphComputer'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer.Static;
    function autoImport(shortName: 'GraphComputer$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.Static;
    function autoImport(shortName: 'GraphComputer$Features'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.Static;
    function autoImport(shortName: 'GraphComputer$Persist'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist.Static;
    function autoImport(shortName: 'GraphComputer$ResultGraph'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph.Static;
    function autoImport(shortName: 'KeyValue'): Java.org.apache.tinkerpop.gremlin.process.computer.KeyValue.Static;
    function autoImport(shortName: 'MapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce.Static;
    function autoImport(shortName: 'MapReduce$MapEmitter'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter.Static;
    function autoImport(shortName: 'MapReduce$NullObject'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject.Static;
    function autoImport(shortName: 'MapReduce$ReduceEmitter'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter.Static;
    function autoImport(shortName: 'MapReduce$Stage'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage.Static;
    function autoImport(shortName: 'Memory'): Java.org.apache.tinkerpop.gremlin.process.computer.Memory.Static;
    function autoImport(shortName: 'Memory$Admin'): Java.org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.Static;
    function autoImport(shortName: 'Memory$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions.Static;
    function autoImport(shortName: 'MessageCombiner'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageCombiner.Static;
    function autoImport(shortName: 'MessageScope'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope.Static;
    function autoImport(shortName: 'MessageScope$Global'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global.Static;
    function autoImport(shortName: 'MessageScope$Local'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local.Static;
    function autoImport(shortName: 'MessageScope$Local$ReverseTraversalSupplier'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier.Static;
    function autoImport(shortName: 'Messenger'): Java.org.apache.tinkerpop.gremlin.process.computer.Messenger.Static;
    function autoImport(shortName: 'PageRankMapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.Static;
    function autoImport(shortName: 'PageRankMapReduce$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder.Static;
    function autoImport(shortName: 'PageRankMessageCombiner'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner.Static;
    function autoImport(shortName: 'PageRankVertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.Static;
    function autoImport(shortName: 'PageRankVertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder.Static;
    function autoImport(shortName: 'SingleMessenger'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger.Static;
    function autoImport(shortName: 'TraversalVertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram.Static;
    function autoImport(shortName: 'TraversalVertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder.Static;
    function autoImport(shortName: 'TraversalVertexProgramMessageCombiner'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner.Static;
    function autoImport(shortName: 'TraverserExecutor'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor.Static;
    function autoImport(shortName: 'VertexTraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects.Static;
    function autoImport(shortName: 'VertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.VertexProgram.Static;
    function autoImport(shortName: 'VertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder.Static;
    function autoImport(shortName: 'VertexProgram$Features'): Java.org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.Static;
    function autoImport(shortName: 'Compare'): Java.org.apache.tinkerpop.gremlin.process.traversal.Compare.Static;
    function autoImport(shortName: 'Contains'): Java.org.apache.tinkerpop.gremlin.process.traversal.Contains.Static;
    function autoImport(shortName: '__'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.Static;
    function autoImport(shortName: 'DefaultGraphTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal.Static;
    function autoImport(shortName: 'EmptyGraphTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal.Static;
    function autoImport(shortName: 'GraphTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.Static;
    function autoImport(shortName: 'GraphTraversal$Admin'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin.Static;
    function autoImport(shortName: 'GraphTraversalSource'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.Static;
    function autoImport(shortName: 'GraphTraversalSource$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder.Static;
    function autoImport(shortName: 'GraphTraversalSource$GraphTraversalSourceStub'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.Static;
    function autoImport(shortName: 'ComputerTraversalEngine'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine.Static;
    function autoImport(shortName: 'ComputerTraversalEngine$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder.Static;
    function autoImport(shortName: 'ComputerTraversalEngine$ComputerResultStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy.Static;
    function autoImport(shortName: 'StandardTraversalEngine'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine.Static;
    function autoImport(shortName: 'StandardTraversalEngine$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder.Static;
    function autoImport(shortName: 'Operator'): Java.org.apache.tinkerpop.gremlin.process.traversal.Operator.Static;
    function autoImport(shortName: 'Order'): Java.org.apache.tinkerpop.gremlin.process.traversal.Order.Static;
    function autoImport(shortName: 'P'): Java.org.apache.tinkerpop.gremlin.process.traversal.P.Static;
    function autoImport(shortName: 'Path'): Java.org.apache.tinkerpop.gremlin.process.traversal.Path.Static;
    function autoImport(shortName: 'Path$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions.Static;
    function autoImport(shortName: 'Scope'): Java.org.apache.tinkerpop.gremlin.process.traversal.Scope.Static;
    function autoImport(shortName: 'Step'): Java.org.apache.tinkerpop.gremlin.process.traversal.Step.Static;
    function autoImport(shortName: 'AbstractStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.Static;
    function autoImport(shortName: 'BulkSet'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet.Static;
    function autoImport(shortName: 'CollectingBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep.Static;
    function autoImport(shortName: 'ComputerAwareStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep.Static;
    function autoImport(shortName: 'ComputerAwareStep$EndStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep.Static;
    function autoImport(shortName: 'ElementFunctionComparator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator.Static;
    function autoImport(shortName: 'ElementValueComparator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator.Static;
    function autoImport(shortName: 'EmptyPath'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath.Static;
    function autoImport(shortName: 'EmptyStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep.Static;
    function autoImport(shortName: 'ExpandableStepIterator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator.Static;
    function autoImport(shortName: 'HasContainer'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.Static;
    function autoImport(shortName: 'ImmutablePath'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath.Static;
    function autoImport(shortName: 'MapHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper.Static;
    function autoImport(shortName: 'MutablePath'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath.Static;
    function autoImport(shortName: 'NoOpBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep.Static;
    function autoImport(shortName: 'PathIdentityStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep.Static;
    function autoImport(shortName: 'ReducingBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep.Static;
    function autoImport(shortName: 'ReducingBarrierStep$DefaultMapReduce'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.Static;
    function autoImport(shortName: 'ReducingBarrierStep$FinalGet'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet.Static;
    function autoImport(shortName: 'SupplyingBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep.Static;
    function autoImport(shortName: 'TraversalComparator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator.Static;
    function autoImport(shortName: 'Tree'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree.Static;
    function autoImport(shortName: 'ConjunctionStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy.Static;
    function autoImport(shortName: 'ElementIdStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy.Static;
    function autoImport(shortName: 'ElementIdStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder.Static;
    function autoImport(shortName: 'EventStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy.Static;
    function autoImport(shortName: 'EventStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder.Static;
    function autoImport(shortName: 'EventStrategy$EventStrategyCallback'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback.Static;
    function autoImport(shortName: 'PartitionStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy.Static;
    function autoImport(shortName: 'PartitionStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder.Static;
    function autoImport(shortName: 'SubgraphStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy.Static;
    function autoImport(shortName: 'SubgraphStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder.Static;
    function autoImport(shortName: 'ComputerVerificationException'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException.Static;
    function autoImport(shortName: 'ComputerVerificationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy.Static;
    function autoImport(shortName: 'LambdaRestrictionStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy.Static;
    function autoImport(shortName: 'ReadOnlyStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy.Static;
    function autoImport(shortName: 'Traversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal.Static;
    function autoImport(shortName: 'Traversal$Admin'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.Static;
    function autoImport(shortName: 'Traversal$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions.Static;
    function autoImport(shortName: 'TraversalEngine'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.Static;
    function autoImport(shortName: 'TraversalEngine$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.Static;
    function autoImport(shortName: 'TraversalEngine$Type'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type.Static;
    function autoImport(shortName: 'TraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.Static;
    function autoImport(shortName: 'TraversalSideEffects$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions.Static;
    function autoImport(shortName: 'TraversalSource'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.Static;
    function autoImport(shortName: 'TraversalSource$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.Static;
    function autoImport(shortName: 'TraversalStrategies'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.Static;
    function autoImport(shortName: 'TraversalStrategies$GlobalCache'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache.Static;
    function autoImport(shortName: 'TraversalStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.Static;
    function autoImport(shortName: 'TraversalStrategy$DecorationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy.Static;
    function autoImport(shortName: 'TraversalStrategy$FinalizationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy.Static;
    function autoImport(shortName: 'TraversalStrategy$OptimizationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy.Static;
    function autoImport(shortName: 'TraversalStrategy$VendorOptimizationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy.Static;
    function autoImport(shortName: 'TraversalStrategy$VerificationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy.Static;
    function autoImport(shortName: 'Traverser'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traverser.Static;
    function autoImport(shortName: 'Traverser$Admin'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.Static;
    function autoImport(shortName: 'TraverserGenerator'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator.Static;
    function autoImport(shortName: 'AndP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.AndP.Static;
    function autoImport(shortName: 'ConjunctionP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP.Static;
    function autoImport(shortName: 'DefaultTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal.Static;
    function autoImport(shortName: 'DefaultTraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects.Static;
    function autoImport(shortName: 'DefaultTraversalStrategies'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies.Static;
    function autoImport(shortName: 'DependantMutableMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics.Static;
    function autoImport(shortName: 'EmptyTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal.Static;
    function autoImport(shortName: 'EmptyTraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects.Static;
    function autoImport(shortName: 'EmptyTraversalStrategies'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies.Static;
    function autoImport(shortName: 'FastNoSuchElementException'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException.Static;
    function autoImport(shortName: 'ImmutableMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics.Static;
    function autoImport(shortName: 'Metrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.Static;
    function autoImport(shortName: 'MutableMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.Static;
    function autoImport(shortName: 'OrP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.OrP.Static;
    function autoImport(shortName: 'SideEffectHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper.Static;
    function autoImport(shortName: 'StandardTraversalMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics.Static;
    function autoImport(shortName: 'StepPosition'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition.Static;
    function autoImport(shortName: 'TraversalClassFunction'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction.Static;
    function autoImport(shortName: 'TraversalHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.Static;
    function autoImport(shortName: 'TraversalMatrix'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix.Static;
    function autoImport(shortName: 'TraversalMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.Static;
    function autoImport(shortName: 'TraversalObjectFunction'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction.Static;
    function autoImport(shortName: 'TraversalP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP.Static;
    function autoImport(shortName: 'TraversalRing'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.Static;
    function autoImport(shortName: 'TraversalScriptFunction'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction.Static;
    function autoImport(shortName: 'TraversalScriptHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper.Static;
    function autoImport(shortName: 'TraversalUtil'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.Static;
    function autoImport(shortName: 'TraversalUtil$Multiple'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple.Static;
    function autoImport(shortName: 'Direction'): Java.org.apache.tinkerpop.gremlin.structure.Direction.Static;
    function autoImport(shortName: 'Edge'): Java.org.apache.tinkerpop.gremlin.structure.Edge.Static;
    function autoImport(shortName: 'Edge$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Edge$Exceptions.Static;
    function autoImport(shortName: 'Element'): Java.org.apache.tinkerpop.gremlin.structure.Element.Static;
    function autoImport(shortName: 'Element$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Element$Exceptions.Static;
    function autoImport(shortName: 'Graph'): Java.org.apache.tinkerpop.gremlin.structure.Graph.Static;
    function autoImport(shortName: 'Graph$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.Static;
    function autoImport(shortName: 'Graph$Features'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features.Static;
    function autoImport(shortName: 'Graph$Features$DataTypeFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.Static;
    function autoImport(shortName: 'Graph$Features$EdgeFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.Static;
    function autoImport(shortName: 'Graph$Features$EdgePropertyFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures.Static;
    function autoImport(shortName: 'Graph$Features$ElementFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.Static;
    function autoImport(shortName: 'Graph$Features$FeatureSet'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet.Static;
    function autoImport(shortName: 'Graph$Features$GraphFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.Static;
    function autoImport(shortName: 'Graph$Features$PropertyFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.Static;
    function autoImport(shortName: 'Graph$Features$VariableFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures.Static;
    function autoImport(shortName: 'Graph$Features$VertexFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.Static;
    function autoImport(shortName: 'Graph$Features$VertexPropertyFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.Static;
    function autoImport(shortName: 'Graph$Hidden'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Hidden.Static;
    function autoImport(shortName: 'Graph$OptIn'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptIn.Static;
    function autoImport(shortName: 'Graph$OptIns'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptIns.Static;
    function autoImport(shortName: 'Graph$OptOut'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptOut.Static;
    function autoImport(shortName: 'Graph$OptOuts'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptOuts.Static;
    function autoImport(shortName: 'Graph$Variables'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Variables.Static;
    function autoImport(shortName: 'Graph$Variables$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.Static;
    function autoImport(shortName: 'AbstractIoRegistry'): Java.org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry.Static;
    function autoImport(shortName: 'GraphMigrator'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphMigrator.Static;
    function autoImport(shortName: 'GraphMLIo'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo.Static;
    function autoImport(shortName: 'GraphMLIo$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder.Static;
    function autoImport(shortName: 'GraphMLMapper'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper.Static;
    function autoImport(shortName: 'GraphMLMapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder.Static;
    function autoImport(shortName: 'GraphMLReader'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader.Static;
    function autoImport(shortName: 'GraphMLReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder.Static;
    function autoImport(shortName: 'GraphMLWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter.Static;
    function autoImport(shortName: 'GraphMLWriter$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder.Static;
    function autoImport(shortName: 'GraphMLWriterHelper$IndentingXMLStreamWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.Static;
    function autoImport(shortName: 'GraphReader'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader.Static;
    function autoImport(shortName: 'GraphReader$ReaderBuilder'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder.Static;
    function autoImport(shortName: 'GraphSONIo'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo.Static;
    function autoImport(shortName: 'GraphSONIo$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder.Static;
    function autoImport(shortName: 'GraphSONMapper'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper.Static;
    function autoImport(shortName: 'GraphSONMapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.Static;
    function autoImport(shortName: 'GraphSONReader'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.Static;
    function autoImport(shortName: 'GraphSONReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder.Static;
    function autoImport(shortName: 'GraphSONTokens'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens.Static;
    function autoImport(shortName: 'GraphSONUtil'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil.Static;
    function autoImport(shortName: 'GraphSONVersion'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion.Static;
    function autoImport(shortName: 'GraphSONWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.Static;
    function autoImport(shortName: 'GraphSONWriter$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder.Static;
    function autoImport(shortName: 'LegacyGraphSONReader'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader.Static;
    function autoImport(shortName: 'LegacyGraphSONReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder.Static;
    function autoImport(shortName: 'LegacyGraphSONReader$GraphSONTokens'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens.Static;
    function autoImport(shortName: 'GraphWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter.Static;
    function autoImport(shortName: 'GraphWriter$WriterBuilder'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder.Static;
    function autoImport(shortName: 'GryoIo'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo.Static;
    function autoImport(shortName: 'GryoIo$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder.Static;
    function autoImport(shortName: 'GryoMapper'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper.Static;
    function autoImport(shortName: 'GryoMapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder.Static;
    function autoImport(shortName: 'GryoPool'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool.Static;
    function autoImport(shortName: 'GryoPool$Type'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type.Static;
    function autoImport(shortName: 'GryoReader'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader.Static;
    function autoImport(shortName: 'GryoReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder.Static;
    function autoImport(shortName: 'GryoWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter.Static;
    function autoImport(shortName: 'GryoWriter$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder.Static;
    function autoImport(shortName: 'VertexByteArrayInputStream'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream.Static;
    function autoImport(shortName: 'VertexTerminator'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator.Static;
    function autoImport(shortName: 'Io'): Java.org.apache.tinkerpop.gremlin.structure.io.Io.Static;
    function autoImport(shortName: 'Io$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.Io$Builder.Static;
    function autoImport(shortName: 'Io$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions.Static;
    function autoImport(shortName: 'IoCore'): Java.org.apache.tinkerpop.gremlin.structure.io.IoCore.Static;
    function autoImport(shortName: 'IoRegistry'): Java.org.apache.tinkerpop.gremlin.structure.io.IoRegistry.Static;
    function autoImport(shortName: 'Mapper'): Java.org.apache.tinkerpop.gremlin.structure.io.Mapper.Static;
    function autoImport(shortName: 'Mapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder.Static;
    function autoImport(shortName: 'Property'): Java.org.apache.tinkerpop.gremlin.structure.Property.Static;
    function autoImport(shortName: 'Property$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Property$Exceptions.Static;
    function autoImport(shortName: 'PropertyType'): Java.org.apache.tinkerpop.gremlin.structure.PropertyType.Static;
    function autoImport(shortName: 'T'): Java.org.apache.tinkerpop.gremlin.structure.T.Static;
    function autoImport(shortName: 'Transaction'): Java.org.apache.tinkerpop.gremlin.structure.Transaction.Static;
    function autoImport(shortName: 'Transaction$CLOSE_BEHAVIOR'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR.Static;
    function autoImport(shortName: 'Transaction$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions.Static;
    function autoImport(shortName: 'Transaction$READ_WRITE_BEHAVIOR'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR.Static;
    function autoImport(shortName: 'Transaction$Status'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$Status.Static;
    function autoImport(shortName: 'Transaction$Workload'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$Workload.Static;
    function autoImport(shortName: 'AbstractTransaction'): Java.org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction.Static;
    function autoImport(shortName: 'AbstractTransaction$TransactionException'): Java.org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException.Static;
    function autoImport(shortName: 'Attachable'): Java.org.apache.tinkerpop.gremlin.structure.util.Attachable.Static;
    function autoImport(shortName: 'Attachable$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions.Static;
    function autoImport(shortName: 'Attachable$Method'): Java.org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.Static;
    function autoImport(shortName: 'Comparators'): Java.org.apache.tinkerpop.gremlin.structure.util.Comparators.Static;
    function autoImport(shortName: 'DetachedEdge'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge.Static;
    function autoImport(shortName: 'DetachedElement'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement.Static;
    function autoImport(shortName: 'DetachedFactory'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory.Static;
    function autoImport(shortName: 'DetachedPath'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath.Static;
    function autoImport(shortName: 'DetachedProperty'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty.Static;
    function autoImport(shortName: 'DetachedVertex'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex.Static;
    function autoImport(shortName: 'DetachedVertexProperty'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty.Static;
    function autoImport(shortName: 'ElementHelper'): Java.org.apache.tinkerpop.gremlin.structure.util.ElementHelper.Static;
    function autoImport(shortName: 'FeatureDescriptor'): Java.org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor.Static;
    function autoImport(shortName: 'GraphFactory'): Java.org.apache.tinkerpop.gremlin.structure.util.GraphFactory.Static;
    function autoImport(shortName: 'GraphVariableHelper'): Java.org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper.Static;
    function autoImport(shortName: 'Host'): Java.org.apache.tinkerpop.gremlin.structure.util.Host.Static;
    function autoImport(shortName: 'StringFactory'): Java.org.apache.tinkerpop.gremlin.structure.util.StringFactory.Static;
    function autoImport(shortName: 'Vertex'): Java.org.apache.tinkerpop.gremlin.structure.Vertex.Static;
    function autoImport(shortName: 'Vertex$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions.Static;
    function autoImport(shortName: 'VertexProperty'): Java.org.apache.tinkerpop.gremlin.structure.VertexProperty.Static;
    function autoImport(shortName: 'VertexProperty$Cardinality'): Java.org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality.Static;
    function autoImport(shortName: 'VertexProperty$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions.Static;
    function autoImport(shortName: 'TinkerComputerResult'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult.Static;
    function autoImport(shortName: 'TinkerGraphComputer'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer.Static;
    function autoImport(shortName: 'TinkerGraphView'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView.Static;
    function autoImport(shortName: 'TinkerMapEmitter'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter.Static;
    function autoImport(shortName: 'TinkerMemory'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory.Static;
    function autoImport(shortName: 'TinkerMessenger'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger.Static;
    function autoImport(shortName: 'TinkerReduceEmitter'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter.Static;
    function autoImport(shortName: 'TinkerWorkerPool'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.Static;
    function autoImport(shortName: 'TinkerEdge'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge.Static;
    function autoImport(shortName: 'TinkerElement'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement.Static;
    function autoImport(shortName: 'TinkerFactory'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.Static;
    function autoImport(shortName: 'TinkerGraph'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.Static;
    function autoImport(shortName: 'TinkerGraph$DefaultIdManager'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager.Static;
    function autoImport(shortName: 'TinkerGraph$IdManager'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager.Static;
    function autoImport(shortName: 'TinkerGraph$TinkerGraphEdgeFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures.Static;
    function autoImport(shortName: 'TinkerGraph$TinkerGraphFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures.Static;
    function autoImport(shortName: 'TinkerGraph$TinkerGraphGraphFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures.Static;
    function autoImport(shortName: 'TinkerGraph$TinkerGraphVertexFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures.Static;
    function autoImport(shortName: 'TinkerGraphVariables'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables.Static;
    function autoImport(shortName: 'TinkerHelper'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.Static;
    function autoImport(shortName: 'TinkerProperty'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty.Static;
    function autoImport(shortName: 'TinkerVertex'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex.Static;
    function autoImport(shortName: 'TinkerVertexProperty'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty.Static;
    function autoImport(shortName: 'ArrayListSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.ArrayListSupplier.Static;
    function autoImport(shortName: 'BulkSetSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.BulkSetSupplier.Static;
    function autoImport(shortName: 'ChainedComparator'): Java.org.apache.tinkerpop.gremlin.util.function_.ChainedComparator.Static;
    function autoImport(shortName: 'ConstantSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.ConstantSupplier.Static;
    function autoImport(shortName: 'FunctionUtils'): Java.org.apache.tinkerpop.gremlin.util.function_.FunctionUtils.Static;
    function autoImport(shortName: 'HashMapSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.HashMapSupplier.Static;
    function autoImport(shortName: 'HashSetSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.HashSetSupplier.Static;
    function autoImport(shortName: 'MeanNumberSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.MeanNumberSupplier.Static;
    function autoImport(shortName: 'ScriptEngineLambda'): Java.org.apache.tinkerpop.gremlin.util.function_.ScriptEngineLambda.Static;
    function autoImport(shortName: 'ThrowingBiConsumer'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingBiConsumer.Static;
    function autoImport(shortName: 'ThrowingConsumer'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingConsumer.Static;
    function autoImport(shortName: 'ThrowingFunction'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingFunction.Static;
    function autoImport(shortName: 'ThrowingSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingSupplier.Static;
    function autoImport(shortName: 'TraversableLambda'): Java.org.apache.tinkerpop.gremlin.util.function_.TraversableLambda.Static;
    function autoImport(shortName: 'TreeSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.TreeSupplier.Static;
    function autoImport(shortName: 'TriConsumer'): Java.org.apache.tinkerpop.gremlin.util.function_.TriConsumer.Static;
    function autoImport(shortName: 'TriFunction'): Java.org.apache.tinkerpop.gremlin.util.function_.TriFunction.Static;
    function autoImport(shortName: 'Gremlin'): Java.org.apache.tinkerpop.gremlin.util.Gremlin.Static;
    function autoImport(shortName: 'ScriptEngineCache'): Java.org.apache.tinkerpop.gremlin.util.ScriptEngineCache.Static;
    function autoImport(shortName: 'Serializer'): Java.org.apache.tinkerpop.gremlin.util.Serializer.Static;
    function autoImport(shortName: 'TimeUtil'): Java.org.apache.tinkerpop.gremlin.util.TimeUtil.Static;
    function autoImport(shortName: 'ClassNode'): Java.org.codehaus.groovy.ast.ClassNode.Static;
    function autoImport(shortName: 'CompilerConfiguration'): Java.org.codehaus.groovy.control.CompilerConfiguration.Static;
    function autoImport(shortName: 'CompilationCustomizer'): Java.org.codehaus.groovy.control.customizers.CompilationCustomizer.Static;
    function autoImport(shortName: 'NullObject'): Java.org.codehaus.groovy.runtime.NullObject.Static;
    function autoImport(shortName: 'Groovysh'): Java.org.codehaus.groovy.tools.shell.Groovysh.Static;
    function autoImport(shortName: 'ManagedReference'): Java.org.codehaus.groovy.util.ManagedReference.Static;
    function autoImport(shortName: 'ReferenceBundle'): Java.org.codehaus.groovy.util.ReferenceBundle.Static;
    function autoImport(shortName: string): any;
}