// Type definitions for ts-tinkerpop 1.2.0
// Project: https://github.com/RedSeal-co/ts-tinkerpop
// Definitions by: Jim Lloyd <https://github.com/jimlloyd>
// Definitions: https://github.com/borisyankov/DefinitelyTyped

/// <reference path="../java/java.d.ts" />
// Generated by dts-bundle v0.2.0
// Dependencies for this module:
//   ../typings/bluebird/bluebird.d.ts
//   ../typings/java/java.d.ts
declare module 'ts-tinkerpop' {
    import _java = require('__ts-tinkerpop/tsJavaModule');
    import BluePromise = require('bluebird');
    module Tinkerpop {
        export import Java = _java.Java;
        type Static = typeof Tinkerpop;
        var autoImport: typeof Java.importClass;
        var __: Java.__.Static;
        var Compare: Java.Compare.Static;
        var GraphSONReader: Java.GraphSONReader.Static;
        var GraphSONWriter: Java.GraphSONWriter.Static;
        var GraphSONMapper: Java.GraphSONMapper.Static;
        var GremlinGroovyScriptEngine: Java.GremlinGroovyScriptEngine.Static;
        var ScriptEngineLambda: Java.ScriptEngineLambda.Static;
        var T: Java.T.Static;
        var TinkerFactory: Java.TinkerFactory.Static;
        var TinkerGraph: Java.TinkerGraph.Static;
        var ByteArrayOutputStream: Java.ByteArrayOutputStream.Static;
        var GroovyLambda: Java.GroovyLambda.Static;
        var NULL: Java.NullObject;
        var UTF8: string;
        function initialize(): void;
        function getTinkerpop(): BluePromise<Static>;
        function id(n: number): Java.Object;
        function ids(a: number[]): Java.array_t<Java.Object>;
        function newJavaScriptLambda(javascript: string): Java.ScriptEngineLambda;
        function newGroovyLambda(groovyFragment: string): Java.ScriptEngineLambda;
        function newGroovyClosure(groovyClosureString: string): Java.GroovyLambda;
        function getGroovyEngine(): Java.GremlinGroovyScriptEngine;
        function importGroovy(javaClassOrPkg: string): void;
        function vertexStringify(vertex: Java.Vertex): string;
        function vertexToJson(vertex: Java.Vertex): any;
        function edgeStringify(edge: Java.Edge): string;
        function edgeToJson(edge: Java.Edge): any;
        function L(n: number): Java.longValue_t;
        function isLongValue(obj: any): boolean;
        function isJavaObject(e: any): boolean;
        function asJavaObject(obj: Java.object_t): Java.Object;
        function isVertex(v: any): boolean;
        function asVertex(v: Java.object_t): Java.Vertex;
        function isEdge(e: any): boolean;
        function asEdge(e: Java.object_t): Java.Edge;
        interface ConsumeObject {
            (item: Java.object_t): any | BluePromise<any>;
        }
        function forEach(javaIterator: Java.Iterator, consumer: ConsumeObject): BluePromise<void>;
        function asJSON(traversal: Java.Traversal): any[];
        function simplifyVertexProperties(obj: any[]): any[];
        function simplifyVertexProperties(obj: any): any;
        interface GraphCallback {
            (err: Error, graph: Java.Graph): any;
        }
        function loadGraphSON(graph: Java.Graph, filename: string, callback?: GraphCallback): BluePromise<Java.Graph>;
        function loadGraphSONSync(graph: Java.Graph, filename: string): Java.Graph;
        function loadPrettyGraphSON(graph: Java.Graph, filename: string, callback?: GraphCallback): BluePromise<Java.Graph>;
        function loadPrettyGraphSONSync(graph: Java.Graph, filename: string): Java.Graph;
        function saveGraphSON(graph: Java.Graph, filename: string, callback?: GraphCallback): BluePromise<Java.Graph>;
        function saveGraphSONSync(graph: Java.Graph, filename: string): Java.Graph;
        function savePrettyGraphSON(graph: Java.Graph, filename: string, callback?: GraphCallback): BluePromise<Java.Graph>;
        function savePrettyGraphSONSync(graph: Java.Graph, filename: string): Java.Graph;
        function isType(o: any, typeName: string): boolean;
        function jsify(arg: any): any;
        interface MapEntry {
            key: any;
            value: any;
        }
        interface BulkSetElement {
            key: string;
            count: Java.longValue_t;
        }
        interface PathElement {
            object: any;
            labels: string[];
        }
    }
    export = Tinkerpop;
}
declare module '__ts-tinkerpop/tsJavaModule' {
    import _java = require('java');
    export module Java {
        type NodeJavaAPI = typeof _java;
        function getJava(): NodeJavaAPI;
        function ensureJvm(): Promise<void>;
        function getClassLoader(): Java.java.lang.ClassLoader;
        function importClass(className: 'GlobFunction'): Java.co.redseal.gremlinnode.function_.GlobFunction.Static;
        function importClass(className: 'GroovyLambda'): Java.co.redseal.gremlinnode.function_.GroovyLambda.Static;
        function importClass(className: 'TestClass'): Java.co.redseal.gremlinnode.testing.TestClass.Static;
        function importClass(className: 'StringInputStream'): Java.co.redseal.util.StringInputStream.Static;
        function importClass(className: 'Binding'): Java.groovy.lang.Binding.Static;
        function importClass(className: 'Closure'): Java.groovy.lang.Closure.Static;
        function importClass(className: 'DelegatingMetaClass'): Java.groovy.lang.DelegatingMetaClass.Static;
        function importClass(className: 'GroovyClassLoader'): Java.groovy.lang.GroovyClassLoader.Static;
        function importClass(className: 'GroovyCodeSource'): Java.groovy.lang.GroovyCodeSource.Static;
        function importClass(className: 'GroovyObjectSupport'): Java.groovy.lang.GroovyObjectSupport.Static;
        function importClass(className: 'GroovyResourceLoader'): Java.groovy.lang.GroovyResourceLoader.Static;
        function importClass(className: 'IntRange'): Java.groovy.lang.IntRange.Static;
        function importClass(className: 'MetaBeanProperty'): Java.groovy.lang.MetaBeanProperty.Static;
        function importClass(className: 'MetaClass'): Java.groovy.lang.MetaClass.Static;
        function importClass(className: 'MetaMethod'): Java.groovy.lang.MetaMethod.Static;
        function importClass(className: 'MetaProperty'): Java.groovy.lang.MetaProperty.Static;
        function importClass(className: 'Range'): Java.groovy.lang.Range.Static;
        function importClass(className: 'Reference'): Java.groovy.lang.Reference.Static;
        function importClass(className: 'ByteArrayOutputStream'): Java.java.io.ByteArrayOutputStream.Static;
        function importClass(className: 'FileInputStream'): Java.java.io.FileInputStream.Static;
        function importClass(className: 'FileOutputStream'): Java.java.io.FileOutputStream.Static;
        function importClass(className: 'InputStream'): Java.java.io.InputStream.Static;
        function importClass(className: 'OutputStream'): Java.java.io.OutputStream.Static;
        function importClass(className: 'Boolean'): Java.java.lang.Boolean.Static;
        function importClass(className: 'Class'): Java.java.lang.Class.Static;
        function importClass(className: 'ClassLoader'): Java.java.lang.ClassLoader.Static;
        function importClass(className: 'Double'): Java.java.lang.Double.Static;
        function importClass(className: 'Enum'): Java.java.lang.Enum.Static;
        function importClass(className: 'Float'): Java.java.lang.Float.Static;
        function importClass(className: 'Integer'): Java.java.lang.Integer.Static;
        function importClass(className: 'Iterable'): Java.java.lang.Iterable.Static;
        function importClass(className: 'Long'): Java.java.lang.Long.Static;
        function importClass(className: 'Object'): Java.java.lang.Object.Static;
        function importClass(className: 'Array'): Java.java.lang.reflect.Array.Static;
        function importClass(className: 'Short'): Java.java.lang.Short.Static;
        function importClass(className: 'String'): Java.java.lang.String.Static;
        function importClass(className: 'Charset'): Java.java.nio.charset.Charset.Static;
        function importClass(className: 'StandardCharsets'): Java.java.nio.charset.StandardCharsets.Static;
        function importClass(className: 'AbstractCollection'): Java.java.util.AbstractCollection.Static;
        function importClass(className: 'AbstractList'): Java.java.util.AbstractList.Static;
        function importClass(className: 'AbstractMap'): Java.java.util.AbstractMap.Static;
        function importClass(className: 'AbstractSet'): Java.java.util.AbstractSet.Static;
        function importClass(className: 'ArrayList'): Java.java.util.ArrayList.Static;
        function importClass(className: 'Collection'): Java.java.util.Collection.Static;
        function importClass(className: 'Comparator'): Java.java.util.Comparator.Static;
        function importClass(className: 'BiConsumer'): Java.java.util.function_.BiConsumer.Static;
        function importClass(className: 'BiFunction'): Java.java.util.function_.BiFunction.Static;
        function importClass(className: 'BinaryOperator'): Java.java.util.function_.BinaryOperator.Static;
        function importClass(className: 'BiPredicate'): Java.java.util.function_.BiPredicate.Static;
        function importClass(className: 'Consumer'): Java.java.util.function_.Consumer.Static;
        function importClass(className: 'Function'): Java.java.util.function_.Function.Static;
        function importClass(className: 'Predicate'): Java.java.util.function_.Predicate.Static;
        function importClass(className: 'Supplier'): Java.java.util.function_.Supplier.Static;
        function importClass(className: 'UnaryOperator'): Java.java.util.function_.UnaryOperator.Static;
        function importClass(className: 'HashMap'): Java.java.util.HashMap.Static;
        function importClass(className: 'HashSet'): Java.java.util.HashSet.Static;
        function importClass(className: 'Iterator'): Java.java.util.Iterator.Static;
        function importClass(className: 'LinkedHashMap'): Java.java.util.LinkedHashMap.Static;
        function importClass(className: 'List'): Java.java.util.List.Static;
        function importClass(className: 'ListIterator'): Java.java.util.ListIterator.Static;
        function importClass(className: 'Map'): Java.java.util.Map.Static;
        function importClass(className: 'Map$Entry'): Java.java.util.Map$Entry.Static;
        function importClass(className: 'NoSuchElementException'): Java.java.util.NoSuchElementException.Static;
        function importClass(className: 'Set'): Java.java.util.Set.Static;
        function importClass(className: 'AbstractScriptEngine'): Java.javax.script.AbstractScriptEngine.Static;
        function importClass(className: 'Bindings'): Java.javax.script.Bindings.Static;
        function importClass(className: 'CompiledScript'): Java.javax.script.CompiledScript.Static;
        function importClass(className: 'ScriptContext'): Java.javax.script.ScriptContext.Static;
        function importClass(className: 'ScriptEngine'): Java.javax.script.ScriptEngine.Static;
        function importClass(className: 'ScriptEngineFactory'): Java.javax.script.ScriptEngineFactory.Static;
        function importClass(className: 'GComparator'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GComparator.Static;
        function importClass(className: 'GFunction'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GFunction.Static;
        function importClass(className: 'GSupplier'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GSupplier.Static;
        function importClass(className: 'GUnaryOperator'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GUnaryOperator.Static;
        function importClass(className: 'GremlinGroovyScriptEngine'): Java.org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.Static;
        function importClass(className: 'ClusterCountMapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.Static;
        function importClass(className: 'ClusterCountMapReduce$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder.Static;
        function importClass(className: 'ClusterPopulationMapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.Static;
        function importClass(className: 'ClusterPopulationMapReduce$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder.Static;
        function importClass(className: 'PeerPressureVertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.Static;
        function importClass(className: 'PeerPressureVertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder.Static;
        function importClass(className: 'ComputerResult'): Java.org.apache.tinkerpop.gremlin.process.computer.ComputerResult.Static;
        function importClass(className: 'GraphComputer'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer.Static;
        function importClass(className: 'GraphComputer$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.Static;
        function importClass(className: 'GraphComputer$Features'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.Static;
        function importClass(className: 'GraphComputer$Persist'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist.Static;
        function importClass(className: 'GraphComputer$ResultGraph'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph.Static;
        function importClass(className: 'KeyValue'): Java.org.apache.tinkerpop.gremlin.process.computer.KeyValue.Static;
        function importClass(className: 'MapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce.Static;
        function importClass(className: 'MapReduce$MapEmitter'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter.Static;
        function importClass(className: 'MapReduce$NullObject'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject.Static;
        function importClass(className: 'MapReduce$ReduceEmitter'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter.Static;
        function importClass(className: 'MapReduce$Stage'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage.Static;
        function importClass(className: 'Memory'): Java.org.apache.tinkerpop.gremlin.process.computer.Memory.Static;
        function importClass(className: 'Memory$Admin'): Java.org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.Static;
        function importClass(className: 'Memory$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions.Static;
        function importClass(className: 'MessageCombiner'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageCombiner.Static;
        function importClass(className: 'MessageScope'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope.Static;
        function importClass(className: 'MessageScope$Global'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global.Static;
        function importClass(className: 'MessageScope$Local'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local.Static;
        function importClass(className: 'MessageScope$Local$ReverseTraversalSupplier'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier.Static;
        function importClass(className: 'Messenger'): Java.org.apache.tinkerpop.gremlin.process.computer.Messenger.Static;
        function importClass(className: 'PageRankMapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.Static;
        function importClass(className: 'PageRankMapReduce$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder.Static;
        function importClass(className: 'PageRankMessageCombiner'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner.Static;
        function importClass(className: 'PageRankVertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.Static;
        function importClass(className: 'PageRankVertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder.Static;
        function importClass(className: 'SingleMessenger'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger.Static;
        function importClass(className: 'TraversalVertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram.Static;
        function importClass(className: 'TraversalVertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder.Static;
        function importClass(className: 'TraversalVertexProgramMessageCombiner'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner.Static;
        function importClass(className: 'TraverserExecutor'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor.Static;
        function importClass(className: 'VertexTraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects.Static;
        function importClass(className: 'VertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.VertexProgram.Static;
        function importClass(className: 'VertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder.Static;
        function importClass(className: 'VertexProgram$Features'): Java.org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.Static;
        function importClass(className: 'Compare'): Java.org.apache.tinkerpop.gremlin.process.traversal.Compare.Static;
        function importClass(className: 'Contains'): Java.org.apache.tinkerpop.gremlin.process.traversal.Contains.Static;
        function importClass(className: '__'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.Static;
        function importClass(className: 'DefaultGraphTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal.Static;
        function importClass(className: 'EmptyGraphTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal.Static;
        function importClass(className: 'GraphTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.Static;
        function importClass(className: 'GraphTraversal$Admin'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin.Static;
        function importClass(className: 'GraphTraversalSource'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.Static;
        function importClass(className: 'GraphTraversalSource$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder.Static;
        function importClass(className: 'GraphTraversalSource$GraphTraversalSourceStub'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.Static;
        function importClass(className: 'ComputerTraversalEngine'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine.Static;
        function importClass(className: 'ComputerTraversalEngine$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder.Static;
        function importClass(className: 'ComputerTraversalEngine$ComputerResultStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy.Static;
        function importClass(className: 'StandardTraversalEngine'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine.Static;
        function importClass(className: 'StandardTraversalEngine$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder.Static;
        function importClass(className: 'Operator'): Java.org.apache.tinkerpop.gremlin.process.traversal.Operator.Static;
        function importClass(className: 'Order'): Java.org.apache.tinkerpop.gremlin.process.traversal.Order.Static;
        function importClass(className: 'P'): Java.org.apache.tinkerpop.gremlin.process.traversal.P.Static;
        function importClass(className: 'Path'): Java.org.apache.tinkerpop.gremlin.process.traversal.Path.Static;
        function importClass(className: 'Path$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions.Static;
        function importClass(className: 'Scope'): Java.org.apache.tinkerpop.gremlin.process.traversal.Scope.Static;
        function importClass(className: 'Step'): Java.org.apache.tinkerpop.gremlin.process.traversal.Step.Static;
        function importClass(className: 'AbstractStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.Static;
        function importClass(className: 'BulkSet'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet.Static;
        function importClass(className: 'CollectingBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep.Static;
        function importClass(className: 'ComputerAwareStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep.Static;
        function importClass(className: 'ComputerAwareStep$EndStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep.Static;
        function importClass(className: 'ElementFunctionComparator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator.Static;
        function importClass(className: 'ElementValueComparator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator.Static;
        function importClass(className: 'EmptyPath'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath.Static;
        function importClass(className: 'EmptyStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep.Static;
        function importClass(className: 'ExpandableStepIterator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator.Static;
        function importClass(className: 'HasContainer'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.Static;
        function importClass(className: 'ImmutablePath'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath.Static;
        function importClass(className: 'MapHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper.Static;
        function importClass(className: 'MutablePath'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath.Static;
        function importClass(className: 'NoOpBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep.Static;
        function importClass(className: 'PathIdentityStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep.Static;
        function importClass(className: 'ReducingBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep.Static;
        function importClass(className: 'ReducingBarrierStep$DefaultMapReduce'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.Static;
        function importClass(className: 'ReducingBarrierStep$FinalGet'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet.Static;
        function importClass(className: 'SupplyingBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep.Static;
        function importClass(className: 'TraversalComparator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator.Static;
        function importClass(className: 'Tree'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree.Static;
        function importClass(className: 'ConjunctionStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy.Static;
        function importClass(className: 'ElementIdStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy.Static;
        function importClass(className: 'ElementIdStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder.Static;
        function importClass(className: 'EventStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy.Static;
        function importClass(className: 'EventStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder.Static;
        function importClass(className: 'EventStrategy$EventStrategyCallback'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback.Static;
        function importClass(className: 'PartitionStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy.Static;
        function importClass(className: 'PartitionStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder.Static;
        function importClass(className: 'SubgraphStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy.Static;
        function importClass(className: 'SubgraphStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder.Static;
        function importClass(className: 'ComputerVerificationException'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException.Static;
        function importClass(className: 'ComputerVerificationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy.Static;
        function importClass(className: 'LambdaRestrictionStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy.Static;
        function importClass(className: 'ReadOnlyStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy.Static;
        function importClass(className: 'Traversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal.Static;
        function importClass(className: 'Traversal$Admin'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.Static;
        function importClass(className: 'Traversal$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions.Static;
        function importClass(className: 'TraversalEngine'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.Static;
        function importClass(className: 'TraversalEngine$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.Static;
        function importClass(className: 'TraversalEngine$Type'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type.Static;
        function importClass(className: 'TraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.Static;
        function importClass(className: 'TraversalSideEffects$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions.Static;
        function importClass(className: 'TraversalSource'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.Static;
        function importClass(className: 'TraversalSource$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.Static;
        function importClass(className: 'TraversalStrategies'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.Static;
        function importClass(className: 'TraversalStrategies$GlobalCache'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache.Static;
        function importClass(className: 'TraversalStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.Static;
        function importClass(className: 'TraversalStrategy$DecorationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy.Static;
        function importClass(className: 'TraversalStrategy$FinalizationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy.Static;
        function importClass(className: 'TraversalStrategy$OptimizationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy.Static;
        function importClass(className: 'TraversalStrategy$VendorOptimizationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy.Static;
        function importClass(className: 'TraversalStrategy$VerificationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy.Static;
        function importClass(className: 'Traverser'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traverser.Static;
        function importClass(className: 'Traverser$Admin'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.Static;
        function importClass(className: 'TraverserGenerator'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator.Static;
        function importClass(className: 'AndP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.AndP.Static;
        function importClass(className: 'ConjunctionP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP.Static;
        function importClass(className: 'DefaultTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal.Static;
        function importClass(className: 'DefaultTraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects.Static;
        function importClass(className: 'DefaultTraversalStrategies'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies.Static;
        function importClass(className: 'DependantMutableMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics.Static;
        function importClass(className: 'EmptyTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal.Static;
        function importClass(className: 'EmptyTraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects.Static;
        function importClass(className: 'EmptyTraversalStrategies'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies.Static;
        function importClass(className: 'FastNoSuchElementException'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException.Static;
        function importClass(className: 'ImmutableMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics.Static;
        function importClass(className: 'Metrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.Static;
        function importClass(className: 'MutableMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.Static;
        function importClass(className: 'OrP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.OrP.Static;
        function importClass(className: 'SideEffectHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper.Static;
        function importClass(className: 'StandardTraversalMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics.Static;
        function importClass(className: 'StepPosition'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition.Static;
        function importClass(className: 'TraversalClassFunction'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction.Static;
        function importClass(className: 'TraversalHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.Static;
        function importClass(className: 'TraversalMatrix'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix.Static;
        function importClass(className: 'TraversalMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.Static;
        function importClass(className: 'TraversalObjectFunction'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction.Static;
        function importClass(className: 'TraversalP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP.Static;
        function importClass(className: 'TraversalRing'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.Static;
        function importClass(className: 'TraversalScriptFunction'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction.Static;
        function importClass(className: 'TraversalScriptHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper.Static;
        function importClass(className: 'TraversalUtil'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.Static;
        function importClass(className: 'TraversalUtil$Multiple'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple.Static;
        function importClass(className: 'Direction'): Java.org.apache.tinkerpop.gremlin.structure.Direction.Static;
        function importClass(className: 'Edge'): Java.org.apache.tinkerpop.gremlin.structure.Edge.Static;
        function importClass(className: 'Edge$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Edge$Exceptions.Static;
        function importClass(className: 'Element'): Java.org.apache.tinkerpop.gremlin.structure.Element.Static;
        function importClass(className: 'Element$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Element$Exceptions.Static;
        function importClass(className: 'Graph'): Java.org.apache.tinkerpop.gremlin.structure.Graph.Static;
        function importClass(className: 'Graph$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.Static;
        function importClass(className: 'Graph$Features'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features.Static;
        function importClass(className: 'Graph$Features$DataTypeFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.Static;
        function importClass(className: 'Graph$Features$EdgeFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.Static;
        function importClass(className: 'Graph$Features$EdgePropertyFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures.Static;
        function importClass(className: 'Graph$Features$ElementFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.Static;
        function importClass(className: 'Graph$Features$FeatureSet'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet.Static;
        function importClass(className: 'Graph$Features$GraphFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.Static;
        function importClass(className: 'Graph$Features$PropertyFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.Static;
        function importClass(className: 'Graph$Features$VariableFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures.Static;
        function importClass(className: 'Graph$Features$VertexFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.Static;
        function importClass(className: 'Graph$Features$VertexPropertyFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.Static;
        function importClass(className: 'Graph$Hidden'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Hidden.Static;
        function importClass(className: 'Graph$OptIn'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptIn.Static;
        function importClass(className: 'Graph$OptIns'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptIns.Static;
        function importClass(className: 'Graph$OptOut'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptOut.Static;
        function importClass(className: 'Graph$OptOuts'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptOuts.Static;
        function importClass(className: 'Graph$Variables'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Variables.Static;
        function importClass(className: 'Graph$Variables$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.Static;
        function importClass(className: 'AbstractIoRegistry'): Java.org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry.Static;
        function importClass(className: 'GraphMigrator'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphMigrator.Static;
        function importClass(className: 'GraphMLIo'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo.Static;
        function importClass(className: 'GraphMLIo$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder.Static;
        function importClass(className: 'GraphMLMapper'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper.Static;
        function importClass(className: 'GraphMLMapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder.Static;
        function importClass(className: 'GraphMLReader'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader.Static;
        function importClass(className: 'GraphMLReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder.Static;
        function importClass(className: 'GraphMLWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter.Static;
        function importClass(className: 'GraphMLWriter$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder.Static;
        function importClass(className: 'GraphMLWriterHelper$IndentingXMLStreamWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.Static;
        function importClass(className: 'GraphReader'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader.Static;
        function importClass(className: 'GraphReader$ReaderBuilder'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder.Static;
        function importClass(className: 'GraphSONIo'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo.Static;
        function importClass(className: 'GraphSONIo$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder.Static;
        function importClass(className: 'GraphSONMapper'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper.Static;
        function importClass(className: 'GraphSONMapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.Static;
        function importClass(className: 'GraphSONReader'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.Static;
        function importClass(className: 'GraphSONReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder.Static;
        function importClass(className: 'GraphSONTokens'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens.Static;
        function importClass(className: 'GraphSONUtil'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil.Static;
        function importClass(className: 'GraphSONVersion'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion.Static;
        function importClass(className: 'GraphSONWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.Static;
        function importClass(className: 'GraphSONWriter$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder.Static;
        function importClass(className: 'LegacyGraphSONReader'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader.Static;
        function importClass(className: 'LegacyGraphSONReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder.Static;
        function importClass(className: 'LegacyGraphSONReader$GraphSONTokens'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens.Static;
        function importClass(className: 'GraphWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter.Static;
        function importClass(className: 'GraphWriter$WriterBuilder'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder.Static;
        function importClass(className: 'GryoIo'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo.Static;
        function importClass(className: 'GryoIo$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder.Static;
        function importClass(className: 'GryoMapper'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper.Static;
        function importClass(className: 'GryoMapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder.Static;
        function importClass(className: 'GryoPool'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool.Static;
        function importClass(className: 'GryoPool$Type'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type.Static;
        function importClass(className: 'GryoReader'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader.Static;
        function importClass(className: 'GryoReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder.Static;
        function importClass(className: 'GryoWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter.Static;
        function importClass(className: 'GryoWriter$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder.Static;
        function importClass(className: 'VertexByteArrayInputStream'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream.Static;
        function importClass(className: 'VertexTerminator'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator.Static;
        function importClass(className: 'Io'): Java.org.apache.tinkerpop.gremlin.structure.io.Io.Static;
        function importClass(className: 'Io$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.Io$Builder.Static;
        function importClass(className: 'Io$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions.Static;
        function importClass(className: 'IoCore'): Java.org.apache.tinkerpop.gremlin.structure.io.IoCore.Static;
        function importClass(className: 'IoRegistry'): Java.org.apache.tinkerpop.gremlin.structure.io.IoRegistry.Static;
        function importClass(className: 'Mapper'): Java.org.apache.tinkerpop.gremlin.structure.io.Mapper.Static;
        function importClass(className: 'Mapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder.Static;
        function importClass(className: 'Property'): Java.org.apache.tinkerpop.gremlin.structure.Property.Static;
        function importClass(className: 'Property$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Property$Exceptions.Static;
        function importClass(className: 'PropertyType'): Java.org.apache.tinkerpop.gremlin.structure.PropertyType.Static;
        function importClass(className: 'T'): Java.org.apache.tinkerpop.gremlin.structure.T.Static;
        function importClass(className: 'Transaction'): Java.org.apache.tinkerpop.gremlin.structure.Transaction.Static;
        function importClass(className: 'Transaction$CLOSE_BEHAVIOR'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR.Static;
        function importClass(className: 'Transaction$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions.Static;
        function importClass(className: 'Transaction$READ_WRITE_BEHAVIOR'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR.Static;
        function importClass(className: 'Transaction$Status'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$Status.Static;
        function importClass(className: 'Transaction$Workload'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$Workload.Static;
        function importClass(className: 'AbstractTransaction'): Java.org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction.Static;
        function importClass(className: 'AbstractTransaction$TransactionException'): Java.org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException.Static;
        function importClass(className: 'Attachable'): Java.org.apache.tinkerpop.gremlin.structure.util.Attachable.Static;
        function importClass(className: 'Attachable$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions.Static;
        function importClass(className: 'Attachable$Method'): Java.org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.Static;
        function importClass(className: 'Comparators'): Java.org.apache.tinkerpop.gremlin.structure.util.Comparators.Static;
        function importClass(className: 'DetachedEdge'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge.Static;
        function importClass(className: 'DetachedElement'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement.Static;
        function importClass(className: 'DetachedFactory'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory.Static;
        function importClass(className: 'DetachedPath'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath.Static;
        function importClass(className: 'DetachedProperty'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty.Static;
        function importClass(className: 'DetachedVertex'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex.Static;
        function importClass(className: 'DetachedVertexProperty'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty.Static;
        function importClass(className: 'ElementHelper'): Java.org.apache.tinkerpop.gremlin.structure.util.ElementHelper.Static;
        function importClass(className: 'FeatureDescriptor'): Java.org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor.Static;
        function importClass(className: 'GraphFactory'): Java.org.apache.tinkerpop.gremlin.structure.util.GraphFactory.Static;
        function importClass(className: 'GraphVariableHelper'): Java.org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper.Static;
        function importClass(className: 'Host'): Java.org.apache.tinkerpop.gremlin.structure.util.Host.Static;
        function importClass(className: 'StringFactory'): Java.org.apache.tinkerpop.gremlin.structure.util.StringFactory.Static;
        function importClass(className: 'Vertex'): Java.org.apache.tinkerpop.gremlin.structure.Vertex.Static;
        function importClass(className: 'Vertex$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions.Static;
        function importClass(className: 'VertexProperty'): Java.org.apache.tinkerpop.gremlin.structure.VertexProperty.Static;
        function importClass(className: 'VertexProperty$Cardinality'): Java.org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality.Static;
        function importClass(className: 'VertexProperty$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions.Static;
        function importClass(className: 'TinkerComputerResult'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult.Static;
        function importClass(className: 'TinkerGraphComputer'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer.Static;
        function importClass(className: 'TinkerGraphView'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView.Static;
        function importClass(className: 'TinkerMapEmitter'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter.Static;
        function importClass(className: 'TinkerMemory'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory.Static;
        function importClass(className: 'TinkerMessenger'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger.Static;
        function importClass(className: 'TinkerReduceEmitter'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter.Static;
        function importClass(className: 'TinkerWorkerPool'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.Static;
        function importClass(className: 'TinkerEdge'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge.Static;
        function importClass(className: 'TinkerElement'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement.Static;
        function importClass(className: 'TinkerFactory'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.Static;
        function importClass(className: 'TinkerGraph'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.Static;
        function importClass(className: 'TinkerGraph$DefaultIdManager'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager.Static;
        function importClass(className: 'TinkerGraph$IdManager'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager.Static;
        function importClass(className: 'TinkerGraph$TinkerGraphEdgeFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures.Static;
        function importClass(className: 'TinkerGraph$TinkerGraphFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures.Static;
        function importClass(className: 'TinkerGraph$TinkerGraphGraphFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures.Static;
        function importClass(className: 'TinkerGraph$TinkerGraphVertexFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures.Static;
        function importClass(className: 'TinkerGraphVariables'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables.Static;
        function importClass(className: 'TinkerHelper'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.Static;
        function importClass(className: 'TinkerProperty'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty.Static;
        function importClass(className: 'TinkerVertex'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex.Static;
        function importClass(className: 'TinkerVertexProperty'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty.Static;
        function importClass(className: 'ArrayListSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.ArrayListSupplier.Static;
        function importClass(className: 'BulkSetSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.BulkSetSupplier.Static;
        function importClass(className: 'ChainedComparator'): Java.org.apache.tinkerpop.gremlin.util.function_.ChainedComparator.Static;
        function importClass(className: 'ConstantSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.ConstantSupplier.Static;
        function importClass(className: 'FunctionUtils'): Java.org.apache.tinkerpop.gremlin.util.function_.FunctionUtils.Static;
        function importClass(className: 'HashMapSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.HashMapSupplier.Static;
        function importClass(className: 'HashSetSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.HashSetSupplier.Static;
        function importClass(className: 'MeanNumberSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.MeanNumberSupplier.Static;
        function importClass(className: 'ScriptEngineLambda'): Java.org.apache.tinkerpop.gremlin.util.function_.ScriptEngineLambda.Static;
        function importClass(className: 'ThrowingBiConsumer'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingBiConsumer.Static;
        function importClass(className: 'ThrowingConsumer'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingConsumer.Static;
        function importClass(className: 'ThrowingFunction'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingFunction.Static;
        function importClass(className: 'ThrowingSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingSupplier.Static;
        function importClass(className: 'TraversableLambda'): Java.org.apache.tinkerpop.gremlin.util.function_.TraversableLambda.Static;
        function importClass(className: 'TreeSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.TreeSupplier.Static;
        function importClass(className: 'TriConsumer'): Java.org.apache.tinkerpop.gremlin.util.function_.TriConsumer.Static;
        function importClass(className: 'TriFunction'): Java.org.apache.tinkerpop.gremlin.util.function_.TriFunction.Static;
        function importClass(className: 'Gremlin'): Java.org.apache.tinkerpop.gremlin.util.Gremlin.Static;
        function importClass(className: 'ScriptEngineCache'): Java.org.apache.tinkerpop.gremlin.util.ScriptEngineCache.Static;
        function importClass(className: 'Serializer'): Java.org.apache.tinkerpop.gremlin.util.Serializer.Static;
        function importClass(className: 'TimeUtil'): Java.org.apache.tinkerpop.gremlin.util.TimeUtil.Static;
        function importClass(className: 'ClassNode'): Java.org.codehaus.groovy.ast.ClassNode.Static;
        function importClass(className: 'CompilerConfiguration'): Java.org.codehaus.groovy.control.CompilerConfiguration.Static;
        function importClass(className: 'CompilationCustomizer'): Java.org.codehaus.groovy.control.customizers.CompilationCustomizer.Static;
        function importClass(className: 'NullObject'): Java.org.codehaus.groovy.runtime.NullObject.Static;
        function importClass(className: 'Groovysh'): Java.org.codehaus.groovy.tools.shell.Groovysh.Static;
        function importClass(className: 'ManagedReference'): Java.org.codehaus.groovy.util.ManagedReference.Static;
        function importClass(className: 'ReferenceBundle'): Java.org.codehaus.groovy.util.ReferenceBundle.Static;
        function importClass(className: 'co.redseal.gremlinnode.function.GlobFunction'): Java.co.redseal.gremlinnode.function_.GlobFunction.Static;
        function importClass(className: 'co.redseal.gremlinnode.function.GroovyLambda'): Java.co.redseal.gremlinnode.function_.GroovyLambda.Static;
        function importClass(className: 'co.redseal.gremlinnode.testing.TestClass'): Java.co.redseal.gremlinnode.testing.TestClass.Static;
        function importClass(className: 'co.redseal.util.StringInputStream'): Java.co.redseal.util.StringInputStream.Static;
        function importClass(className: 'groovy.lang.Binding'): Java.groovy.lang.Binding.Static;
        function importClass(className: 'groovy.lang.Closure'): Java.groovy.lang.Closure.Static;
        function importClass(className: 'groovy.lang.DelegatingMetaClass'): Java.groovy.lang.DelegatingMetaClass.Static;
        function importClass(className: 'groovy.lang.GroovyClassLoader'): Java.groovy.lang.GroovyClassLoader.Static;
        function importClass(className: 'groovy.lang.GroovyCodeSource'): Java.groovy.lang.GroovyCodeSource.Static;
        function importClass(className: 'groovy.lang.GroovyObjectSupport'): Java.groovy.lang.GroovyObjectSupport.Static;
        function importClass(className: 'groovy.lang.GroovyResourceLoader'): Java.groovy.lang.GroovyResourceLoader.Static;
        function importClass(className: 'groovy.lang.IntRange'): Java.groovy.lang.IntRange.Static;
        function importClass(className: 'groovy.lang.MetaBeanProperty'): Java.groovy.lang.MetaBeanProperty.Static;
        function importClass(className: 'groovy.lang.MetaClass'): Java.groovy.lang.MetaClass.Static;
        function importClass(className: 'groovy.lang.MetaMethod'): Java.groovy.lang.MetaMethod.Static;
        function importClass(className: 'groovy.lang.MetaProperty'): Java.groovy.lang.MetaProperty.Static;
        function importClass(className: 'groovy.lang.Range'): Java.groovy.lang.Range.Static;
        function importClass(className: 'groovy.lang.Reference'): Java.groovy.lang.Reference.Static;
        function importClass(className: 'java.io.ByteArrayOutputStream'): Java.java.io.ByteArrayOutputStream.Static;
        function importClass(className: 'java.io.FileInputStream'): Java.java.io.FileInputStream.Static;
        function importClass(className: 'java.io.FileOutputStream'): Java.java.io.FileOutputStream.Static;
        function importClass(className: 'java.io.InputStream'): Java.java.io.InputStream.Static;
        function importClass(className: 'java.io.OutputStream'): Java.java.io.OutputStream.Static;
        function importClass(className: 'java.lang.Boolean'): Java.java.lang.Boolean.Static;
        function importClass(className: 'java.lang.Class'): Java.java.lang.Class.Static;
        function importClass(className: 'java.lang.ClassLoader'): Java.java.lang.ClassLoader.Static;
        function importClass(className: 'java.lang.Double'): Java.java.lang.Double.Static;
        function importClass(className: 'java.lang.Enum'): Java.java.lang.Enum.Static;
        function importClass(className: 'java.lang.Float'): Java.java.lang.Float.Static;
        function importClass(className: 'java.lang.Integer'): Java.java.lang.Integer.Static;
        function importClass(className: 'java.lang.Iterable'): Java.java.lang.Iterable.Static;
        function importClass(className: 'java.lang.Long'): Java.java.lang.Long.Static;
        function importClass(className: 'java.lang.Number'): Java.java.lang.Number.Static;
        function importClass(className: 'java.lang.Object'): Java.java.lang.Object.Static;
        function importClass(className: 'java.lang.reflect.Array'): Java.java.lang.reflect.Array.Static;
        function importClass(className: 'java.lang.Short'): Java.java.lang.Short.Static;
        function importClass(className: 'java.lang.String'): Java.java.lang.String.Static;
        function importClass(className: 'java.nio.charset.Charset'): Java.java.nio.charset.Charset.Static;
        function importClass(className: 'java.nio.charset.StandardCharsets'): Java.java.nio.charset.StandardCharsets.Static;
        function importClass(className: 'java.util.AbstractCollection'): Java.java.util.AbstractCollection.Static;
        function importClass(className: 'java.util.AbstractList'): Java.java.util.AbstractList.Static;
        function importClass(className: 'java.util.AbstractMap'): Java.java.util.AbstractMap.Static;
        function importClass(className: 'java.util.AbstractSet'): Java.java.util.AbstractSet.Static;
        function importClass(className: 'java.util.ArrayList'): Java.java.util.ArrayList.Static;
        function importClass(className: 'java.util.Collection'): Java.java.util.Collection.Static;
        function importClass(className: 'java.util.Comparator'): Java.java.util.Comparator.Static;
        function importClass(className: 'java.util.function.BiConsumer'): Java.java.util.function_.BiConsumer.Static;
        function importClass(className: 'java.util.function.BiFunction'): Java.java.util.function_.BiFunction.Static;
        function importClass(className: 'java.util.function.BinaryOperator'): Java.java.util.function_.BinaryOperator.Static;
        function importClass(className: 'java.util.function.BiPredicate'): Java.java.util.function_.BiPredicate.Static;
        function importClass(className: 'java.util.function.Consumer'): Java.java.util.function_.Consumer.Static;
        function importClass(className: 'java.util.function.Function'): Java.java.util.function_.Function.Static;
        function importClass(className: 'java.util.function.Predicate'): Java.java.util.function_.Predicate.Static;
        function importClass(className: 'java.util.function.Supplier'): Java.java.util.function_.Supplier.Static;
        function importClass(className: 'java.util.function.UnaryOperator'): Java.java.util.function_.UnaryOperator.Static;
        function importClass(className: 'java.util.HashMap'): Java.java.util.HashMap.Static;
        function importClass(className: 'java.util.HashSet'): Java.java.util.HashSet.Static;
        function importClass(className: 'java.util.Iterator'): Java.java.util.Iterator.Static;
        function importClass(className: 'java.util.LinkedHashMap'): Java.java.util.LinkedHashMap.Static;
        function importClass(className: 'java.util.List'): Java.java.util.List.Static;
        function importClass(className: 'java.util.ListIterator'): Java.java.util.ListIterator.Static;
        function importClass(className: 'java.util.Map'): Java.java.util.Map.Static;
        function importClass(className: 'java.util.Map$Entry'): Java.java.util.Map$Entry.Static;
        function importClass(className: 'java.util.NoSuchElementException'): Java.java.util.NoSuchElementException.Static;
        function importClass(className: 'java.util.Set'): Java.java.util.Set.Static;
        function importClass(className: 'javax.script.AbstractScriptEngine'): Java.javax.script.AbstractScriptEngine.Static;
        function importClass(className: 'javax.script.Bindings'): Java.javax.script.Bindings.Static;
        function importClass(className: 'javax.script.CompiledScript'): Java.javax.script.CompiledScript.Static;
        function importClass(className: 'javax.script.ScriptContext'): Java.javax.script.ScriptContext.Static;
        function importClass(className: 'javax.script.ScriptEngine'): Java.javax.script.ScriptEngine.Static;
        function importClass(className: 'javax.script.ScriptEngineFactory'): Java.javax.script.ScriptEngineFactory.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.groovy.function.GComparator'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GComparator.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.groovy.function.GFunction'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GFunction.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.groovy.function.GSupplier'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GSupplier.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator'): Java.org.apache.tinkerpop.gremlin.groovy.function_.GUnaryOperator.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine'): Java.org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.ComputerResult'): Java.org.apache.tinkerpop.gremlin.process.computer.ComputerResult.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph'): Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.KeyValue'): Java.org.apache.tinkerpop.gremlin.process.computer.KeyValue.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage'): Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory'): Java.org.apache.tinkerpop.gremlin.process.computer.Memory.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory$Admin'): Java.org.apache.tinkerpop.gremlin.process.computer.Memory$Admin.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageCombiner'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageCombiner.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier'): Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.Messenger'): Java.org.apache.tinkerpop.gremlin.process.computer.Messenger.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram'): Java.org.apache.tinkerpop.gremlin.process.computer.VertexProgram.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder'): Java.org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features'): Java.org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Compare'): Java.org.apache.tinkerpop.gremlin.process.traversal.Compare.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Contains'): Java.org.apache.tinkerpop.gremlin.process.traversal.Contains.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub'): Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Operator'): Java.org.apache.tinkerpop.gremlin.process.traversal.Operator.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Order'): Java.org.apache.tinkerpop.gremlin.process.traversal.Order.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.P'): Java.org.apache.tinkerpop.gremlin.process.traversal.P.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path'): Java.org.apache.tinkerpop.gremlin.process.traversal.Path.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Scope'): Java.org.apache.tinkerpop.gremlin.process.traversal.Scope.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Step'): Java.org.apache.tinkerpop.gremlin.process.traversal.Step.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree'): Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSource'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traverser'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traverser.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin'): Java.org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator'): Java.org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.AndP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.AndP.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.Metrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.Metrics.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.OrP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.OrP.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple'): Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Direction'): Java.org.apache.tinkerpop.gremlin.structure.Direction.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Edge'): Java.org.apache.tinkerpop.gremlin.structure.Edge.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Edge$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Edge$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Element'): Java.org.apache.tinkerpop.gremlin.structure.Element.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Element$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Element$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph'): Java.org.apache.tinkerpop.gremlin.structure.Graph.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Hidden'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Hidden.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptIn'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptIn.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptIns'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptIns.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptOut'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptOut.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptOuts'): Java.org.apache.tinkerpop.gremlin.structure.Graph$OptOuts.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Variables'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Variables.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry'): Java.org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphMigrator'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphMigrator.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphReader'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens'): Java.org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder'): Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator'): Java.org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.Io'): Java.org.apache.tinkerpop.gremlin.structure.io.Io.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.Io$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.IoCore'): Java.org.apache.tinkerpop.gremlin.structure.io.IoCore.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.IoRegistry'): Java.org.apache.tinkerpop.gremlin.structure.io.IoRegistry.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.Mapper'): Java.org.apache.tinkerpop.gremlin.structure.io.Mapper.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder'): Java.org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Property'): Java.org.apache.tinkerpop.gremlin.structure.Property.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Property$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Property$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.PropertyType'): Java.org.apache.tinkerpop.gremlin.structure.PropertyType.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.T'): Java.org.apache.tinkerpop.gremlin.structure.T.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Transaction'): Java.org.apache.tinkerpop.gremlin.structure.Transaction.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Status'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$Status.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Workload'): Java.org.apache.tinkerpop.gremlin.structure.Transaction$Workload.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction'): Java.org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException'): Java.org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable'): Java.org.apache.tinkerpop.gremlin.structure.util.Attachable.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Method'): Java.org.apache.tinkerpop.gremlin.structure.util.Attachable$Method.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.Comparators'): Java.org.apache.tinkerpop.gremlin.structure.util.Comparators.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty'): Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.ElementHelper'): Java.org.apache.tinkerpop.gremlin.structure.util.ElementHelper.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor'): Java.org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphFactory'): Java.org.apache.tinkerpop.gremlin.structure.util.GraphFactory.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper'): Java.org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.Host'): Java.org.apache.tinkerpop.gremlin.structure.util.Host.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.util.StringFactory'): Java.org.apache.tinkerpop.gremlin.structure.util.StringFactory.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Vertex'): Java.org.apache.tinkerpop.gremlin.structure.Vertex.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty'): Java.org.apache.tinkerpop.gremlin.structure.VertexProperty.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality'): Java.org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions'): Java.org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool'): Java.org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty'): Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.ArrayListSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.ArrayListSupplier.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.BulkSetSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.BulkSetSupplier.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.ChainedComparator'): Java.org.apache.tinkerpop.gremlin.util.function_.ChainedComparator.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.ConstantSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.ConstantSupplier.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.FunctionUtils'): Java.org.apache.tinkerpop.gremlin.util.function_.FunctionUtils.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.HashMapSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.HashMapSupplier.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.HashSetSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.HashSetSupplier.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.MeanNumberSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.MeanNumberSupplier.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.ScriptEngineLambda'): Java.org.apache.tinkerpop.gremlin.util.function_.ScriptEngineLambda.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingBiConsumer'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingBiConsumer.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingConsumer'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingConsumer.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingFunction'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingFunction.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.ThrowingSupplier.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.TraversableLambda'): Java.org.apache.tinkerpop.gremlin.util.function_.TraversableLambda.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.TreeSupplier'): Java.org.apache.tinkerpop.gremlin.util.function_.TreeSupplier.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.TriConsumer'): Java.org.apache.tinkerpop.gremlin.util.function_.TriConsumer.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.function.TriFunction'): Java.org.apache.tinkerpop.gremlin.util.function_.TriFunction.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.Gremlin'): Java.org.apache.tinkerpop.gremlin.util.Gremlin.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.ScriptEngineCache'): Java.org.apache.tinkerpop.gremlin.util.ScriptEngineCache.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.Serializer'): Java.org.apache.tinkerpop.gremlin.util.Serializer.Static;
        function importClass(className: 'org.apache.tinkerpop.gremlin.util.TimeUtil'): Java.org.apache.tinkerpop.gremlin.util.TimeUtil.Static;
        function importClass(className: 'org.codehaus.groovy.ast.ClassNode'): Java.org.codehaus.groovy.ast.ClassNode.Static;
        function importClass(className: 'org.codehaus.groovy.control.CompilerConfiguration'): Java.org.codehaus.groovy.control.CompilerConfiguration.Static;
        function importClass(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer'): Java.org.codehaus.groovy.control.customizers.CompilationCustomizer.Static;
        function importClass(className: 'org.codehaus.groovy.runtime.NullObject'): Java.org.codehaus.groovy.runtime.NullObject.Static;
        function importClass(className: 'org.codehaus.groovy.tools.shell.Groovysh'): Java.org.codehaus.groovy.tools.shell.Groovysh.Static;
        function importClass(className: 'org.codehaus.groovy.util.ManagedReference'): Java.org.codehaus.groovy.util.ManagedReference.Static;
        function importClass(className: 'org.codehaus.groovy.util.ReferenceBundle'): Java.org.codehaus.groovy.util.ReferenceBundle.Static;
        function importClass(className: string): any;
        interface Callback<T> {
            (err?: Error, result?: T): void;
        }
        function instanceOf(javaObject: any, className: string): boolean;
        function newShort(val: number): Java.java.lang.Short;
        function newLong(val: number): Java.java.lang.Long;
        function newFloat(val: number): Java.java.lang.Float;
        function newDouble(val: number): Java.java.lang.Double;
        function newInstanceA(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t, arg1: Java.ScriptEngine, cb: Callback<Java.GroovyLambda>): void;
        function newInstanceA(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t, cb: Callback<Java.GroovyLambda>): void;
        function newInstanceA(className: 'co.redseal.gremlinnode.testing.TestClass', cb: Callback<Java.TestClass>): void;
        function newInstanceA(className: 'co.redseal.util.StringInputStream', cb: Callback<Java.StringInputStream>): void;
        function newInstanceA(className: 'groovy.lang.Binding', arg0: array_t<string_t>, cb: Callback<Java.Binding>): void;
        function newInstanceA(className: 'groovy.lang.Binding', arg0: Java.Map, cb: Callback<Java.Binding>): void;
        function newInstanceA(className: 'groovy.lang.Binding', cb: Callback<Java.Binding>): void;
        function newInstanceA(className: 'groovy.lang.Closure', arg0: object_t, arg1: object_t, cb: Callback<Java.Closure>): void;
        function newInstanceA(className: 'groovy.lang.Closure', arg0: object_t, cb: Callback<Java.Closure>): void;
        function newInstanceA(className: 'groovy.lang.DelegatingMetaClass', arg0: Java.MetaClass, cb: Callback<Java.DelegatingMetaClass>): void;
        function newInstanceA(className: 'groovy.lang.DelegatingMetaClass', arg0: Java.Class, cb: Callback<Java.DelegatingMetaClass>): void;
        function newInstanceA(className: 'groovy.lang.GroovyClassLoader', arg0: Java.ClassLoader, arg1: Java.CompilerConfiguration, arg2: boolean_t, cb: Callback<Java.GroovyClassLoader>): void;
        function newInstanceA(className: 'groovy.lang.GroovyClassLoader', arg0: Java.ClassLoader, arg1: Java.CompilerConfiguration, cb: Callback<Java.GroovyClassLoader>): void;
        function newInstanceA(className: 'groovy.lang.GroovyClassLoader', arg0: Java.GroovyClassLoader, cb: Callback<Java.GroovyClassLoader>): void;
        function newInstanceA(className: 'groovy.lang.GroovyClassLoader', arg0: Java.ClassLoader, cb: Callback<Java.GroovyClassLoader>): void;
        function newInstanceA(className: 'groovy.lang.GroovyClassLoader', cb: Callback<Java.GroovyClassLoader>): void;
        function newInstanceA(className: 'groovy.lang.GroovyCodeSource', arg0: string_t, arg1: string_t, arg2: string_t, cb: Callback<Java.GroovyCodeSource>): void;
        function newInstanceA(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, arg2: string_t, cb: Callback<Java.GroovyCodeSource>): void;
        function newInstanceA(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, cb: Callback<Java.GroovyCodeSource>): void;
        function newInstanceA(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, cb: Callback<Java.GroovyCodeSource>): void;
        function newInstanceA(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, cb: Callback<Java.GroovyCodeSource>): void;
        function newInstanceA(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, cb: Callback<Java.GroovyCodeSource>): void;
        function newInstanceA(className: 'groovy.lang.GroovyObjectSupport', cb: Callback<Java.GroovyObjectSupport>): void;
        function newInstanceA(className: 'groovy.lang.IntRange', arg0: boolean_t, arg1: integer_t, arg2: integer_t, cb: Callback<Java.IntRange>): void;
        function newInstanceA(className: 'groovy.lang.IntRange', arg0: integer_t, arg1: integer_t, cb: Callback<Java.IntRange>): void;
        function newInstanceA(className: 'groovy.lang.MetaBeanProperty', arg0: string_t, arg1: Java.Class, arg2: Java.MetaMethod, arg3: Java.MetaMethod, cb: Callback<Java.MetaBeanProperty>): void;
        function newInstanceA(className: 'groovy.lang.MetaMethod', arg0: array_t<Java.Class>, cb: Callback<Java.MetaMethod>): void;
        function newInstanceA(className: 'groovy.lang.MetaMethod', cb: Callback<Java.MetaMethod>): void;
        function newInstanceA(className: 'groovy.lang.MetaProperty', arg0: string_t, arg1: Java.Class, cb: Callback<Java.MetaProperty>): void;
        function newInstanceA(className: 'groovy.lang.Reference', arg0: object_t, cb: Callback<Java.Reference>): void;
        function newInstanceA(className: 'groovy.lang.Reference', cb: Callback<Java.Reference>): void;
        function newInstanceA(className: 'java.io.ByteArrayOutputStream', arg0: integer_t, cb: Callback<Java.ByteArrayOutputStream>): void;
        function newInstanceA(className: 'java.io.ByteArrayOutputStream', cb: Callback<Java.ByteArrayOutputStream>): void;
        function newInstanceA(className: 'java.io.FileInputStream', arg0: object_t, cb: Callback<Java.FileInputStream>): void;
        function newInstanceA(className: 'java.io.FileInputStream', arg0: string_t, cb: Callback<Java.FileInputStream>): void;
        function newInstanceA(className: 'java.io.FileInputStream', arg0: object_t, cb: Callback<Java.FileInputStream>): void;
        function newInstanceA(className: 'java.io.FileOutputStream', arg0: string_t, arg1: boolean_t, cb: Callback<Java.FileOutputStream>): void;
        function newInstanceA(className: 'java.io.FileOutputStream', arg0: object_t, arg1: boolean_t, cb: Callback<Java.FileOutputStream>): void;
        function newInstanceA(className: 'java.io.FileOutputStream', arg0: object_t, cb: Callback<Java.FileOutputStream>): void;
        function newInstanceA(className: 'java.io.FileOutputStream', arg0: string_t, cb: Callback<Java.FileOutputStream>): void;
        function newInstanceA(className: 'java.io.FileOutputStream', arg0: object_t, cb: Callback<Java.FileOutputStream>): void;
        function newInstanceA(className: 'java.io.InputStream', cb: Callback<Java.InputStream>): void;
        function newInstanceA(className: 'java.io.OutputStream', cb: Callback<Java.OutputStream>): void;
        function newInstanceA(className: 'java.lang.Boolean', arg0: string_t, cb: Callback<boolean>): void;
        function newInstanceA(className: 'java.lang.Boolean', arg0: boolean_t, cb: Callback<boolean>): void;
        function newInstanceA(className: 'java.lang.Double', arg0: string_t, cb: Callback<number>): void;
        function newInstanceA(className: 'java.lang.Double', arg0: double_t, cb: Callback<number>): void;
        function newInstanceA(className: 'java.lang.Float', arg0: string_t, cb: Callback<number>): void;
        function newInstanceA(className: 'java.lang.Float', arg0: float_t, cb: Callback<number>): void;
        function newInstanceA(className: 'java.lang.Float', arg0: double_t, cb: Callback<number>): void;
        function newInstanceA(className: 'java.lang.Integer', arg0: string_t, cb: Callback<number>): void;
        function newInstanceA(className: 'java.lang.Integer', arg0: integer_t, cb: Callback<number>): void;
        function newInstanceA(className: 'java.lang.Long', arg0: string_t, cb: Callback<longValue_t>): void;
        function newInstanceA(className: 'java.lang.Long', arg0: long_t, cb: Callback<longValue_t>): void;
        function newInstanceA(className: 'java.lang.Number', cb: Callback<number>): void;
        function newInstanceA(className: 'java.lang.Object', cb: Callback<object_t>): void;
        function newInstanceA(className: 'java.lang.Short', arg0: string_t, cb: Callback<number>): void;
        function newInstanceA(className: 'java.lang.Short', arg0: short_t, cb: Callback<number>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Charset, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: Java.Charset, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: string_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: string_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_array_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', arg0: object_array_t, cb: Callback<string>): void;
        function newInstanceA(className: 'java.lang.String', cb: Callback<string>): void;
        function newInstanceA(className: 'java.util.ArrayList', arg0: Java.Collection, cb: Callback<Java.ArrayList>): void;
        function newInstanceA(className: 'java.util.ArrayList', arg0: integer_t, cb: Callback<Java.ArrayList>): void;
        function newInstanceA(className: 'java.util.ArrayList', cb: Callback<Java.ArrayList>): void;
        function newInstanceA(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t, cb: Callback<Java.HashMap>): void;
        function newInstanceA(className: 'java.util.HashMap', arg0: Java.Map, cb: Callback<Java.HashMap>): void;
        function newInstanceA(className: 'java.util.HashMap', arg0: integer_t, cb: Callback<Java.HashMap>): void;
        function newInstanceA(className: 'java.util.HashMap', cb: Callback<Java.HashMap>): void;
        function newInstanceA(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t, cb: Callback<Java.HashSet>): void;
        function newInstanceA(className: 'java.util.HashSet', arg0: Java.Collection, cb: Callback<Java.HashSet>): void;
        function newInstanceA(className: 'java.util.HashSet', arg0: integer_t, cb: Callback<Java.HashSet>): void;
        function newInstanceA(className: 'java.util.HashSet', cb: Callback<Java.HashSet>): void;
        function newInstanceA(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, arg2: boolean_t, cb: Callback<Java.LinkedHashMap>): void;
        function newInstanceA(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, cb: Callback<Java.LinkedHashMap>): void;
        function newInstanceA(className: 'java.util.LinkedHashMap', arg0: Java.Map, cb: Callback<Java.LinkedHashMap>): void;
        function newInstanceA(className: 'java.util.LinkedHashMap', arg0: integer_t, cb: Callback<Java.LinkedHashMap>): void;
        function newInstanceA(className: 'java.util.LinkedHashMap', cb: Callback<Java.LinkedHashMap>): void;
        function newInstanceA(className: 'java.util.NoSuchElementException', arg0: string_t, cb: Callback<Java.NoSuchElementException>): void;
        function newInstanceA(className: 'java.util.NoSuchElementException', cb: Callback<Java.NoSuchElementException>): void;
        function newInstanceA(className: 'javax.script.AbstractScriptEngine', arg0: Java.Bindings, cb: Callback<Java.AbstractScriptEngine>): void;
        function newInstanceA(className: 'javax.script.AbstractScriptEngine', cb: Callback<Java.AbstractScriptEngine>): void;
        function newInstanceA(className: 'javax.script.CompiledScript', cb: Callback<Java.CompiledScript>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.groovy.function.GComparator', arg0: Java.Closure, cb: Callback<Java.GComparator>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.groovy.function.GFunction', arg0: Java.Closure, cb: Callback<Java.GFunction>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.groovy.function.GSupplier', arg0: Java.Closure, cb: Callback<Java.GSupplier>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator', arg0: Java.Closure, cb: Callback<Java.GUnaryOperator>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t, arg2: long_t, cb: Callback<Java.GremlinGroovyScriptEngine>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t, cb: Callback<Java.GremlinGroovyScriptEngine>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, cb: Callback<Java.GremlinGroovyScriptEngine>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', cb: Callback<Java.GremlinGroovyScriptEngine>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.computer.KeyValue', arg0: object_t, arg1: object_t, cb: Callback<Java.KeyValue>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject', cb: Callback<Java.MapReduce$NullObject>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope', cb: Callback<Java.MessageScope>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier', arg0: Java.MessageScope$Local, cb: Callback<Java.MessageScope$Local$ReverseTraversalSupplier>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger', arg0: Java.Messenger, arg1: object_t, cb: Callback<Java.SingleMessenger>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder', cb: Callback<Java.TraversalVertexProgram$Builder>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor', cb: Callback<Java.TraverserExecutor>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal', arg0: Java.Graph, cb: Callback<Java.DefaultGraphTraversal>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal', cb: Callback<Java.DefaultGraphTraversal>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub', arg0: Java.GraphTraversal$Admin, arg1: boolean_t, cb: Callback<Java.GraphTraversalSource$GraphTraversalSourceStub>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder', cb: Callback<Java.ComputerTraversalEngine$Builder>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder', cb: Callback<Java.StandardTraversalEngine$Builder>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.P', arg0: Java.BiPredicate, arg1: object_t, cb: Callback<Java.P>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions', cb: Callback<Java.Path$Exceptions>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep', arg0: Java.Traversal$Admin, cb: Callback<Java.AbstractStep>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet', cb: Callback<Java.BulkSet>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep', arg0: Java.Traversal$Admin, cb: Callback<Java.CollectingBarrierStep>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep', arg0: Java.Traversal$Admin, cb: Callback<Java.ComputerAwareStep>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep', arg0: Java.ComputerAwareStep, arg1: Java.Traversal$Admin, cb: Callback<Java.ComputerAwareStep$EndStep>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator', arg0: Java.Function, arg1: Java.Comparator, cb: Callback<Java.ElementFunctionComparator>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator', arg0: string_t, arg1: Java.Comparator, cb: Callback<Java.ElementValueComparator>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator', arg0: Java.Step, cb: Callback<Java.ExpandableStepIterator>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer', arg0: string_t, arg1: Java.P, cb: Callback<Java.HasContainer>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep', arg0: Java.Traversal$Admin, cb: Callback<Java.NoOpBarrierStep>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep', arg0: Java.Traversal$Admin, cb: Callback<Java.PathIdentityStep>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep', arg0: Java.Traversal$Admin, cb: Callback<Java.ReducingBarrierStep>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce', arg0: Java.Supplier, arg1: Java.BiFunction, cb: Callback<Java.ReducingBarrierStep$DefaultMapReduce>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep', arg0: Java.Traversal$Admin, cb: Callback<Java.SupplyingBarrierStep>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator', arg0: Java.Traversal$Admin, arg1: Java.Comparator, cb: Callback<Java.TraversalComparator>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', arg0: array_t<Java.Map$Entry>, cb: Callback<Java.Tree>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', arg0: object_array_t, cb: Callback<Java.Tree>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', cb: Callback<Java.Tree>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback', arg0: Java.EventStrategy, arg1: object_t, cb: Callback<Java.EventStrategy$EventStrategyCallback>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException', arg0: string_t, arg1: Java.Traversal, cb: Callback<Java.ComputerVerificationException>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions', cb: Callback<Java.Traversal$Exceptions>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions', cb: Callback<Java.TraversalSideEffects$Exceptions>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache', cb: Callback<Java.TraversalStrategies$GlobalCache>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.AndP', arg0: Java.P, arg1: array_t<Java.P>, cb: Callback<Java.AndP>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP', arg0: Java.P, arg1: array_t<Java.P>, cb: Callback<Java.ConjunctionP>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal', arg0: Java.Graph, cb: Callback<Java.DefaultTraversal>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal', cb: Callback<Java.DefaultTraversal>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects', cb: Callback<Java.DefaultTraversalSideEffects>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies', cb: Callback<Java.DefaultTraversalStrategies>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics', arg0: string_t, arg1: string_t, arg2: Java.DependantMutableMetrics, cb: Callback<Java.DependantMutableMetrics>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics', arg0: string_t, arg1: string_t, cb: Callback<Java.MutableMetrics>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.OrP', arg0: Java.P, arg1: array_t<Java.P>, cb: Callback<Java.OrP>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics', cb: Callback<Java.StandardTraversalMetrics>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition', cb: Callback<Java.StepPosition>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction', arg0: Java.Class, cb: Callback<Java.TraversalClassFunction>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix', arg0: Java.Traversal$Admin, cb: Callback<Java.TraversalMatrix>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction', arg0: Java.Traversal$Admin, cb: Callback<Java.TraversalObjectFunction>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Java.Traversal$Admin, arg1: object_t, arg2: boolean_t, cb: Callback<Java.TraversalP>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Java.Traversal$Admin, arg1: boolean_t, cb: Callback<Java.TraversalP>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing', arg0: array_t<Java.Traversal$Admin>, cb: Callback<Java.TraversalRing>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction', arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t, cb: Callback<Java.TraversalScriptFunction>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple', arg0: Java.Collection, cb: Callback<Java.TraversalUtil$Multiple>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Exceptions', cb: Callback<Java.Graph$Exceptions>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Hidden', cb: Callback<Java.Graph$Hidden>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry', cb: Callback<Java.AbstractIoRegistry>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphMigrator', cb: Callback<Java.GraphMigrator>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo', arg0: Java.Graph, cb: Callback<Java.GraphMLIo>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder', cb: Callback<Java.GraphMLIo$Builder>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper', cb: Callback<Java.GraphMLMapper>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder', cb: Callback<Java.GraphMLMapper$Builder>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter', arg0: object_t, cb: Callback<Java.GraphMLWriterHelper$IndentingXMLStreamWriter>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo', arg0: Java.IoRegistry, arg1: Java.Graph, cb: Callback<Java.GraphSONIo>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder', cb: Callback<Java.GraphSONIo$Builder>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg0: Java.GraphSONMapper, arg1: long_t, cb: Callback<Java.GraphSONReader>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader', arg0: object_t, arg1: long_t, cb: Callback<Java.LegacyGraphSONReader>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens', cb: Callback<Java.LegacyGraphSONReader$GraphSONTokens>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo', arg0: Java.IoRegistry, arg1: Java.Graph, cb: Callback<Java.GryoIo>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder', cb: Callback<Java.GryoIo$Builder>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t, arg1: Java.GryoPool$Type, arg2: object_t, cb: Callback<Java.GryoPool>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: object_t, cb: Callback<Java.GryoPool>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t, cb: Callback<Java.GryoPool>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream', arg0: Java.InputStream, cb: Callback<Java.VertexByteArrayInputStream>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions', cb: Callback<Java.Io$Exceptions>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.io.IoCore', cb: Callback<Java.IoCore>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Workload', arg0: Java.Graph, arg1: Java.Function, cb: Callback<Java.Transaction$Workload>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction', arg0: Java.Graph, cb: Callback<Java.AbstractTransaction>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t, arg1: object_t, cb: Callback<Java.AbstractTransaction$TransactionException>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: object_t, cb: Callback<Java.AbstractTransaction$TransactionException>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t, cb: Callback<Java.AbstractTransaction$TransactionException>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Method', cb: Callback<Java.Attachable$Method>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.Comparators', cb: Callback<Java.Comparators>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge', arg0: object_t, arg1: string_t, arg2: Java.Map, arg3: object_t, arg4: object_t, cb: Callback<Java.DetachedEdge>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t, arg2: Java.Element, cb: Callback<Java.DetachedProperty>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t, cb: Callback<Java.DetachedProperty>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex', arg0: object_t, arg1: string_t, arg2: Java.Map, cb: Callback<Java.DetachedVertex>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Java.Map, arg4: Java.Vertex, cb: Callback<Java.DetachedVertexProperty>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Java.Map, cb: Callback<Java.DetachedVertexProperty>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphFactory', cb: Callback<Java.GraphFactory>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper', cb: Callback<Java.GraphVariableHelper>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult', arg0: Java.Graph, arg1: Java.Memory, cb: Callback<Java.TinkerComputerResult>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer', arg0: Java.TinkerGraph, cb: Callback<Java.TinkerGraphComputer>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView', arg0: Java.Set, cb: Callback<Java.TinkerGraphView>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter', arg0: boolean_t, cb: Callback<Java.TinkerMapEmitter>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory', arg0: Java.VertexProgram, arg1: Java.Set, cb: Callback<Java.TinkerMemory>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger', arg0: Java.Vertex, arg1: object_t, arg2: object_t, cb: Callback<Java.TinkerMessenger>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter', cb: Callback<Java.TinkerReduceEmitter>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool', arg0: integer_t, cb: Callback<Java.TinkerWorkerPool>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables', cb: Callback<Java.TinkerGraphVariables>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty', arg0: Java.Element, arg1: string_t, arg2: object_t, cb: Callback<Java.TinkerProperty>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: object_t, arg1: Java.TinkerVertex, arg2: string_t, arg3: object_t, arg4: object_array_t, cb: Callback<Java.TinkerVertexProperty>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: Java.TinkerVertex, arg1: string_t, arg2: object_t, arg3: object_array_t, cb: Callback<Java.TinkerVertexProperty>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.util.function.ChainedComparator', arg0: Java.List, cb: Callback<Java.ChainedComparator>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.util.function.ConstantSupplier', arg0: object_t, cb: Callback<Java.ConstantSupplier>): void;
        function newInstanceA(className: 'org.apache.tinkerpop.gremlin.util.function.ScriptEngineLambda', arg0: string_t, arg1: string_t, cb: Callback<Java.ScriptEngineLambda>): void;
        function newInstanceA(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: array_t<Java.ClassNode>, arg4: object_array_t, cb: Callback<Java.ClassNode>): void;
        function newInstanceA(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, cb: Callback<Java.ClassNode>): void;
        function newInstanceA(className: 'org.codehaus.groovy.ast.ClassNode', arg0: Java.Class, cb: Callback<Java.ClassNode>): void;
        function newInstanceA(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: Java.CompilerConfiguration, cb: Callback<Java.CompilerConfiguration>): void;
        function newInstanceA(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: object_t, cb: Callback<Java.CompilerConfiguration>): void;
        function newInstanceA(className: 'org.codehaus.groovy.control.CompilerConfiguration', cb: Callback<Java.CompilerConfiguration>): void;
        function newInstanceA(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg0: object_t, cb: Callback<Java.CompilationCustomizer>): void;
        function newInstanceA(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Java.ClassLoader, arg1: Java.Binding, arg2: object_t, arg3: Java.Closure, cb: Callback<Java.Groovysh>): void;
        function newInstanceA(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Java.ClassLoader, arg1: Java.Binding, arg2: object_t, cb: Callback<Java.Groovysh>): void;
        function newInstanceA(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Java.Binding, arg1: object_t, cb: Callback<Java.Groovysh>): void;
        function newInstanceA(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: object_t, cb: Callback<Java.Groovysh>): void;
        function newInstanceA(className: 'org.codehaus.groovy.tools.shell.Groovysh', cb: Callback<Java.Groovysh>): void;
        function newInstanceA(className: 'org.codehaus.groovy.util.ManagedReference', arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<Java.ManagedReference>): void;
        function newInstanceA(className: 'org.codehaus.groovy.util.ManagedReference', arg0: Java.ReferenceBundle, arg1: object_t, cb: Callback<Java.ManagedReference>): void;
        function newInstanceA(className: 'org.codehaus.groovy.util.ReferenceBundle', arg0: object_t, arg1: object_t, cb: Callback<Java.ReferenceBundle>): void;
        function newInstanceA(className: string, ...args: any[]): void;
        function newInstance(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t, arg1: Java.ScriptEngine): Java.GroovyLambda;
        function newInstance(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t): Java.GroovyLambda;
        function newInstance(className: 'co.redseal.gremlinnode.testing.TestClass'): Java.TestClass;
        function newInstance(className: 'co.redseal.util.StringInputStream'): Java.StringInputStream;
        function newInstance(className: 'groovy.lang.Binding', arg0: array_t<string_t>): Java.Binding;
        function newInstance(className: 'groovy.lang.Binding', arg0: Java.Map): Java.Binding;
        function newInstance(className: 'groovy.lang.Binding'): Java.Binding;
        function newInstance(className: 'groovy.lang.Closure', arg0: object_t, arg1: object_t): Java.Closure;
        function newInstance(className: 'groovy.lang.Closure', arg0: object_t): Java.Closure;
        function newInstance(className: 'groovy.lang.DelegatingMetaClass', arg0: Java.MetaClass): Java.DelegatingMetaClass;
        function newInstance(className: 'groovy.lang.DelegatingMetaClass', arg0: Java.Class): Java.DelegatingMetaClass;
        function newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: Java.ClassLoader, arg1: Java.CompilerConfiguration, arg2: boolean_t): Java.GroovyClassLoader;
        function newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: Java.ClassLoader, arg1: Java.CompilerConfiguration): Java.GroovyClassLoader;
        function newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: Java.GroovyClassLoader): Java.GroovyClassLoader;
        function newInstance(className: 'groovy.lang.GroovyClassLoader', arg0: Java.ClassLoader): Java.GroovyClassLoader;
        function newInstance(className: 'groovy.lang.GroovyClassLoader'): Java.GroovyClassLoader;
        function newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: string_t, arg1: string_t, arg2: string_t): Java.GroovyCodeSource;
        function newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, arg2: string_t): Java.GroovyCodeSource;
        function newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t): Java.GroovyCodeSource;
        function newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Java.GroovyCodeSource;
        function newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Java.GroovyCodeSource;
        function newInstance(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Java.GroovyCodeSource;
        function newInstance(className: 'groovy.lang.GroovyObjectSupport'): Java.GroovyObjectSupport;
        function newInstance(className: 'groovy.lang.IntRange', arg0: boolean_t, arg1: integer_t, arg2: integer_t): Java.IntRange;
        function newInstance(className: 'groovy.lang.IntRange', arg0: integer_t, arg1: integer_t): Java.IntRange;
        function newInstance(className: 'groovy.lang.MetaBeanProperty', arg0: string_t, arg1: Java.Class, arg2: Java.MetaMethod, arg3: Java.MetaMethod): Java.MetaBeanProperty;
        function newInstance(className: 'groovy.lang.MetaMethod', arg0: array_t<Java.Class>): Java.MetaMethod;
        function newInstance(className: 'groovy.lang.MetaMethod'): Java.MetaMethod;
        function newInstance(className: 'groovy.lang.MetaProperty', arg0: string_t, arg1: Java.Class): Java.MetaProperty;
        function newInstance(className: 'groovy.lang.Reference', arg0: object_t): Java.Reference;
        function newInstance(className: 'groovy.lang.Reference'): Java.Reference;
        function newInstance(className: 'java.io.ByteArrayOutputStream', arg0: integer_t): Java.ByteArrayOutputStream;
        function newInstance(className: 'java.io.ByteArrayOutputStream'): Java.ByteArrayOutputStream;
        function newInstance(className: 'java.io.FileInputStream', arg0: object_t): Java.FileInputStream;
        function newInstance(className: 'java.io.FileInputStream', arg0: string_t): Java.FileInputStream;
        function newInstance(className: 'java.io.FileInputStream', arg0: object_t): Java.FileInputStream;
        function newInstance(className: 'java.io.FileOutputStream', arg0: string_t, arg1: boolean_t): Java.FileOutputStream;
        function newInstance(className: 'java.io.FileOutputStream', arg0: object_t, arg1: boolean_t): Java.FileOutputStream;
        function newInstance(className: 'java.io.FileOutputStream', arg0: object_t): Java.FileOutputStream;
        function newInstance(className: 'java.io.FileOutputStream', arg0: string_t): Java.FileOutputStream;
        function newInstance(className: 'java.io.FileOutputStream', arg0: object_t): Java.FileOutputStream;
        function newInstance(className: 'java.io.InputStream'): Java.InputStream;
        function newInstance(className: 'java.io.OutputStream'): Java.OutputStream;
        function newInstance(className: 'java.lang.Boolean', arg0: string_t): boolean;
        function newInstance(className: 'java.lang.Boolean', arg0: boolean_t): boolean;
        function newInstance(className: 'java.lang.Double', arg0: string_t): number;
        function newInstance(className: 'java.lang.Double', arg0: double_t): number;
        function newInstance(className: 'java.lang.Float', arg0: string_t): number;
        function newInstance(className: 'java.lang.Float', arg0: float_t): number;
        function newInstance(className: 'java.lang.Float', arg0: double_t): number;
        function newInstance(className: 'java.lang.Integer', arg0: string_t): number;
        function newInstance(className: 'java.lang.Integer', arg0: integer_t): number;
        function newInstance(className: 'java.lang.Long', arg0: string_t): longValue_t;
        function newInstance(className: 'java.lang.Long', arg0: long_t): longValue_t;
        function newInstance(className: 'java.lang.Number'): number;
        function newInstance(className: 'java.lang.Object'): object_t;
        function newInstance(className: 'java.lang.Short', arg0: string_t): number;
        function newInstance(className: 'java.lang.Short', arg0: short_t): number;
        function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Charset): string;
        function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): string;
        function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): string;
        function newInstance(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): string;
        function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
        function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
        function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: Java.Charset): string;
        function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: string_t): string;
        function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t): string;
        function newInstance(className: 'java.lang.String', arg0: object_t): string;
        function newInstance(className: 'java.lang.String', arg0: object_t): string;
        function newInstance(className: 'java.lang.String', arg0: string_t): string;
        function newInstance(className: 'java.lang.String', arg0: object_array_t): string;
        function newInstance(className: 'java.lang.String', arg0: object_array_t): string;
        function newInstance(className: 'java.lang.String'): string;
        function newInstance(className: 'java.util.ArrayList', arg0: Java.Collection): Java.ArrayList;
        function newInstance(className: 'java.util.ArrayList', arg0: integer_t): Java.ArrayList;
        function newInstance(className: 'java.util.ArrayList'): Java.ArrayList;
        function newInstance(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t): Java.HashMap;
        function newInstance(className: 'java.util.HashMap', arg0: Java.Map): Java.HashMap;
        function newInstance(className: 'java.util.HashMap', arg0: integer_t): Java.HashMap;
        function newInstance(className: 'java.util.HashMap'): Java.HashMap;
        function newInstance(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t): Java.HashSet;
        function newInstance(className: 'java.util.HashSet', arg0: Java.Collection): Java.HashSet;
        function newInstance(className: 'java.util.HashSet', arg0: integer_t): Java.HashSet;
        function newInstance(className: 'java.util.HashSet'): Java.HashSet;
        function newInstance(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, arg2: boolean_t): Java.LinkedHashMap;
        function newInstance(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t): Java.LinkedHashMap;
        function newInstance(className: 'java.util.LinkedHashMap', arg0: Java.Map): Java.LinkedHashMap;
        function newInstance(className: 'java.util.LinkedHashMap', arg0: integer_t): Java.LinkedHashMap;
        function newInstance(className: 'java.util.LinkedHashMap'): Java.LinkedHashMap;
        function newInstance(className: 'java.util.NoSuchElementException', arg0: string_t): Java.NoSuchElementException;
        function newInstance(className: 'java.util.NoSuchElementException'): Java.NoSuchElementException;
        function newInstance(className: 'javax.script.AbstractScriptEngine', arg0: Java.Bindings): Java.AbstractScriptEngine;
        function newInstance(className: 'javax.script.AbstractScriptEngine'): Java.AbstractScriptEngine;
        function newInstance(className: 'javax.script.CompiledScript'): Java.CompiledScript;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.function.GComparator', arg0: Java.Closure): Java.GComparator;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.function.GFunction', arg0: Java.Closure): Java.GFunction;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.function.GSupplier', arg0: Java.Closure): Java.GSupplier;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator', arg0: Java.Closure): Java.GUnaryOperator;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t, arg2: long_t): Java.GremlinGroovyScriptEngine;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t): Java.GremlinGroovyScriptEngine;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t): Java.GremlinGroovyScriptEngine;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine'): Java.GremlinGroovyScriptEngine;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.KeyValue', arg0: object_t, arg1: object_t): Java.KeyValue;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject'): Java.MapReduce$NullObject;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope'): Java.MessageScope;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier', arg0: Java.MessageScope$Local): Java.MessageScope$Local$ReverseTraversalSupplier;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger', arg0: Java.Messenger, arg1: object_t): Java.SingleMessenger;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder'): Java.TraversalVertexProgram$Builder;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor'): Java.TraverserExecutor;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal', arg0: Java.Graph): Java.DefaultGraphTraversal;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal'): Java.DefaultGraphTraversal;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub', arg0: Java.GraphTraversal$Admin, arg1: boolean_t): Java.GraphTraversalSource$GraphTraversalSourceStub;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder'): Java.ComputerTraversalEngine$Builder;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder'): Java.StandardTraversalEngine$Builder;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.P', arg0: Java.BiPredicate, arg1: object_t): Java.P;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions'): Java.Path$Exceptions;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep', arg0: Java.Traversal$Admin): Java.AbstractStep;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet'): Java.BulkSet;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep', arg0: Java.Traversal$Admin): Java.CollectingBarrierStep;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep', arg0: Java.Traversal$Admin): Java.ComputerAwareStep;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep', arg0: Java.ComputerAwareStep, arg1: Java.Traversal$Admin): Java.ComputerAwareStep$EndStep;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator', arg0: Java.Function, arg1: Java.Comparator): Java.ElementFunctionComparator;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator', arg0: string_t, arg1: Java.Comparator): Java.ElementValueComparator;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator', arg0: Java.Step): Java.ExpandableStepIterator;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer', arg0: string_t, arg1: Java.P): Java.HasContainer;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep', arg0: Java.Traversal$Admin): Java.NoOpBarrierStep;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep', arg0: Java.Traversal$Admin): Java.PathIdentityStep;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep', arg0: Java.Traversal$Admin): Java.ReducingBarrierStep;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce', arg0: Java.Supplier, arg1: Java.BiFunction): Java.ReducingBarrierStep$DefaultMapReduce;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep', arg0: Java.Traversal$Admin): Java.SupplyingBarrierStep;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator', arg0: Java.Traversal$Admin, arg1: Java.Comparator): Java.TraversalComparator;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', ...arg0: Java.Map$Entry[]): Java.Tree;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', ...arg0: object_t[]): Java.Tree;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree'): Java.Tree;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback', arg0: Java.EventStrategy, arg1: object_t): Java.EventStrategy$EventStrategyCallback;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException', arg0: string_t, arg1: Java.Traversal): Java.ComputerVerificationException;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions'): Java.Traversal$Exceptions;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions'): Java.TraversalSideEffects$Exceptions;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache'): Java.TraversalStrategies$GlobalCache;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.AndP', arg0: Java.P, ...arg1: Java.P[]): Java.AndP;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP', arg0: Java.P, ...arg1: Java.P[]): Java.ConjunctionP;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal', arg0: Java.Graph): Java.DefaultTraversal;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal'): Java.DefaultTraversal;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects'): Java.DefaultTraversalSideEffects;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies'): Java.DefaultTraversalStrategies;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics', arg0: string_t, arg1: string_t, arg2: Java.DependantMutableMetrics): Java.DependantMutableMetrics;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics', arg0: string_t, arg1: string_t): Java.MutableMetrics;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.OrP', arg0: Java.P, ...arg1: Java.P[]): Java.OrP;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics'): Java.StandardTraversalMetrics;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition'): Java.StepPosition;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction', arg0: Java.Class): Java.TraversalClassFunction;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix', arg0: Java.Traversal$Admin): Java.TraversalMatrix;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction', arg0: Java.Traversal$Admin): Java.TraversalObjectFunction;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Java.Traversal$Admin, arg1: object_t, arg2: boolean_t): Java.TraversalP;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Java.Traversal$Admin, arg1: boolean_t): Java.TraversalP;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing', ...arg0: Java.Traversal$Admin[]): Java.TraversalRing;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction', arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Java.TraversalScriptFunction;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple', arg0: Java.Collection): Java.TraversalUtil$Multiple;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Exceptions'): Java.Graph$Exceptions;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Hidden'): Java.Graph$Hidden;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry'): Java.AbstractIoRegistry;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphMigrator'): Java.GraphMigrator;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo', arg0: Java.Graph): Java.GraphMLIo;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder'): Java.GraphMLIo$Builder;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper'): Java.GraphMLMapper;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder'): Java.GraphMLMapper$Builder;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter', arg0: object_t): Java.GraphMLWriterHelper$IndentingXMLStreamWriter;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo', arg0: Java.IoRegistry, arg1: Java.Graph): Java.GraphSONIo;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder'): Java.GraphSONIo$Builder;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg0: Java.GraphSONMapper, arg1: long_t): Java.GraphSONReader;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader', arg0: object_t, arg1: long_t): Java.LegacyGraphSONReader;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens'): Java.LegacyGraphSONReader$GraphSONTokens;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo', arg0: Java.IoRegistry, arg1: Java.Graph): Java.GryoIo;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder'): Java.GryoIo$Builder;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t, arg1: Java.GryoPool$Type, arg2: object_t): Java.GryoPool;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: object_t): Java.GryoPool;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t): Java.GryoPool;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream', arg0: Java.InputStream): Java.VertexByteArrayInputStream;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions'): Java.Io$Exceptions;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.io.IoCore'): Java.IoCore;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Workload', arg0: Java.Graph, arg1: Java.Function): Java.Transaction$Workload;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction', arg0: Java.Graph): Java.AbstractTransaction;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t, arg1: object_t): Java.AbstractTransaction$TransactionException;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: object_t): Java.AbstractTransaction$TransactionException;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t): Java.AbstractTransaction$TransactionException;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Method'): Java.Attachable$Method;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.Comparators'): Java.Comparators;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge', arg0: object_t, arg1: string_t, arg2: Java.Map, arg3: object_t, arg4: object_t): Java.DetachedEdge;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t, arg2: Java.Element): Java.DetachedProperty;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t): Java.DetachedProperty;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex', arg0: object_t, arg1: string_t, arg2: Java.Map): Java.DetachedVertex;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Java.Map, arg4: Java.Vertex): Java.DetachedVertexProperty;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Java.Map): Java.DetachedVertexProperty;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphFactory'): Java.GraphFactory;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper'): Java.GraphVariableHelper;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult', arg0: Java.Graph, arg1: Java.Memory): Java.TinkerComputerResult;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer', arg0: Java.TinkerGraph): Java.TinkerGraphComputer;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView', arg0: Java.Set): Java.TinkerGraphView;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter', arg0: boolean_t): Java.TinkerMapEmitter;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory', arg0: Java.VertexProgram, arg1: Java.Set): Java.TinkerMemory;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger', arg0: Java.Vertex, arg1: object_t, arg2: object_t): Java.TinkerMessenger;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter'): Java.TinkerReduceEmitter;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool', arg0: integer_t): Java.TinkerWorkerPool;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables'): Java.TinkerGraphVariables;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty', arg0: Java.Element, arg1: string_t, arg2: object_t): Java.TinkerProperty;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: object_t, arg1: Java.TinkerVertex, arg2: string_t, arg3: object_t, ...arg4: object_t[]): Java.TinkerVertexProperty;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: Java.TinkerVertex, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Java.TinkerVertexProperty;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.util.function.ChainedComparator', arg0: Java.List): Java.ChainedComparator;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.util.function.ConstantSupplier', arg0: object_t): Java.ConstantSupplier;
        function newInstance(className: 'org.apache.tinkerpop.gremlin.util.function.ScriptEngineLambda', arg0: string_t, arg1: string_t): Java.ScriptEngineLambda;
        function newInstance(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: array_t<Java.ClassNode>, arg4: object_array_t): Java.ClassNode;
        function newInstance(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: Java.ClassNode): Java.ClassNode;
        function newInstance(className: 'org.codehaus.groovy.ast.ClassNode', arg0: Java.Class): Java.ClassNode;
        function newInstance(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: Java.CompilerConfiguration): Java.CompilerConfiguration;
        function newInstance(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: object_t): Java.CompilerConfiguration;
        function newInstance(className: 'org.codehaus.groovy.control.CompilerConfiguration'): Java.CompilerConfiguration;
        function newInstance(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg0: object_t): Java.CompilationCustomizer;
        function newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Java.ClassLoader, arg1: Java.Binding, arg2: object_t, arg3: Java.Closure): Java.Groovysh;
        function newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Java.ClassLoader, arg1: Java.Binding, arg2: object_t): Java.Groovysh;
        function newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Java.Binding, arg1: object_t): Java.Groovysh;
        function newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: object_t): Java.Groovysh;
        function newInstance(className: 'org.codehaus.groovy.tools.shell.Groovysh'): Java.Groovysh;
        function newInstance(className: 'org.codehaus.groovy.util.ManagedReference', arg0: object_t, arg1: object_t, arg2: object_t): Java.ManagedReference;
        function newInstance(className: 'org.codehaus.groovy.util.ManagedReference', arg0: Java.ReferenceBundle, arg1: object_t): Java.ManagedReference;
        function newInstance(className: 'org.codehaus.groovy.util.ReferenceBundle', arg0: object_t, arg1: object_t): Java.ReferenceBundle;
        function newInstance(className: string, ...args: any[]): any;
        function newInstanceP(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t, arg1: Java.ScriptEngine): Promise<Java.GroovyLambda>;
        function newInstanceP(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg0: string_t): Promise<Java.GroovyLambda>;
        function newInstanceP(className: 'co.redseal.gremlinnode.testing.TestClass'): Promise<Java.TestClass>;
        function newInstanceP(className: 'co.redseal.util.StringInputStream'): Promise<Java.StringInputStream>;
        function newInstanceP(className: 'groovy.lang.Binding', arg0: array_t<string_t>): Promise<Java.Binding>;
        function newInstanceP(className: 'groovy.lang.Binding', arg0: Java.Map): Promise<Java.Binding>;
        function newInstanceP(className: 'groovy.lang.Binding'): Promise<Java.Binding>;
        function newInstanceP(className: 'groovy.lang.Closure', arg0: object_t, arg1: object_t): Promise<Java.Closure>;
        function newInstanceP(className: 'groovy.lang.Closure', arg0: object_t): Promise<Java.Closure>;
        function newInstanceP(className: 'groovy.lang.DelegatingMetaClass', arg0: Java.MetaClass): Promise<Java.DelegatingMetaClass>;
        function newInstanceP(className: 'groovy.lang.DelegatingMetaClass', arg0: Java.Class): Promise<Java.DelegatingMetaClass>;
        function newInstanceP(className: 'groovy.lang.GroovyClassLoader', arg0: Java.ClassLoader, arg1: Java.CompilerConfiguration, arg2: boolean_t): Promise<Java.GroovyClassLoader>;
        function newInstanceP(className: 'groovy.lang.GroovyClassLoader', arg0: Java.ClassLoader, arg1: Java.CompilerConfiguration): Promise<Java.GroovyClassLoader>;
        function newInstanceP(className: 'groovy.lang.GroovyClassLoader', arg0: Java.GroovyClassLoader): Promise<Java.GroovyClassLoader>;
        function newInstanceP(className: 'groovy.lang.GroovyClassLoader', arg0: Java.ClassLoader): Promise<Java.GroovyClassLoader>;
        function newInstanceP(className: 'groovy.lang.GroovyClassLoader'): Promise<Java.GroovyClassLoader>;
        function newInstanceP(className: 'groovy.lang.GroovyCodeSource', arg0: string_t, arg1: string_t, arg2: string_t): Promise<Java.GroovyCodeSource>;
        function newInstanceP(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t, arg2: string_t): Promise<Java.GroovyCodeSource>;
        function newInstanceP(className: 'groovy.lang.GroovyCodeSource', arg0: object_t, arg1: string_t): Promise<Java.GroovyCodeSource>;
        function newInstanceP(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Promise<Java.GroovyCodeSource>;
        function newInstanceP(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Promise<Java.GroovyCodeSource>;
        function newInstanceP(className: 'groovy.lang.GroovyCodeSource', arg0: object_t): Promise<Java.GroovyCodeSource>;
        function newInstanceP(className: 'groovy.lang.GroovyObjectSupport'): Promise<Java.GroovyObjectSupport>;
        function newInstanceP(className: 'groovy.lang.IntRange', arg0: boolean_t, arg1: integer_t, arg2: integer_t): Promise<Java.IntRange>;
        function newInstanceP(className: 'groovy.lang.IntRange', arg0: integer_t, arg1: integer_t): Promise<Java.IntRange>;
        function newInstanceP(className: 'groovy.lang.MetaBeanProperty', arg0: string_t, arg1: Java.Class, arg2: Java.MetaMethod, arg3: Java.MetaMethod): Promise<Java.MetaBeanProperty>;
        function newInstanceP(className: 'groovy.lang.MetaMethod', arg0: array_t<Java.Class>): Promise<Java.MetaMethod>;
        function newInstanceP(className: 'groovy.lang.MetaMethod'): Promise<Java.MetaMethod>;
        function newInstanceP(className: 'groovy.lang.MetaProperty', arg0: string_t, arg1: Java.Class): Promise<Java.MetaProperty>;
        function newInstanceP(className: 'groovy.lang.Reference', arg0: object_t): Promise<Java.Reference>;
        function newInstanceP(className: 'groovy.lang.Reference'): Promise<Java.Reference>;
        function newInstanceP(className: 'java.io.ByteArrayOutputStream', arg0: integer_t): Promise<Java.ByteArrayOutputStream>;
        function newInstanceP(className: 'java.io.ByteArrayOutputStream'): Promise<Java.ByteArrayOutputStream>;
        function newInstanceP(className: 'java.io.FileInputStream', arg0: object_t): Promise<Java.FileInputStream>;
        function newInstanceP(className: 'java.io.FileInputStream', arg0: string_t): Promise<Java.FileInputStream>;
        function newInstanceP(className: 'java.io.FileInputStream', arg0: object_t): Promise<Java.FileInputStream>;
        function newInstanceP(className: 'java.io.FileOutputStream', arg0: string_t, arg1: boolean_t): Promise<Java.FileOutputStream>;
        function newInstanceP(className: 'java.io.FileOutputStream', arg0: object_t, arg1: boolean_t): Promise<Java.FileOutputStream>;
        function newInstanceP(className: 'java.io.FileOutputStream', arg0: object_t): Promise<Java.FileOutputStream>;
        function newInstanceP(className: 'java.io.FileOutputStream', arg0: string_t): Promise<Java.FileOutputStream>;
        function newInstanceP(className: 'java.io.FileOutputStream', arg0: object_t): Promise<Java.FileOutputStream>;
        function newInstanceP(className: 'java.io.InputStream'): Promise<Java.InputStream>;
        function newInstanceP(className: 'java.io.OutputStream'): Promise<Java.OutputStream>;
        function newInstanceP(className: 'java.lang.Boolean', arg0: string_t): Promise<boolean>;
        function newInstanceP(className: 'java.lang.Boolean', arg0: boolean_t): Promise<boolean>;
        function newInstanceP(className: 'java.lang.Double', arg0: string_t): Promise<number>;
        function newInstanceP(className: 'java.lang.Double', arg0: double_t): Promise<number>;
        function newInstanceP(className: 'java.lang.Float', arg0: string_t): Promise<number>;
        function newInstanceP(className: 'java.lang.Float', arg0: float_t): Promise<number>;
        function newInstanceP(className: 'java.lang.Float', arg0: double_t): Promise<number>;
        function newInstanceP(className: 'java.lang.Integer', arg0: string_t): Promise<number>;
        function newInstanceP(className: 'java.lang.Integer', arg0: integer_t): Promise<number>;
        function newInstanceP(className: 'java.lang.Long', arg0: string_t): Promise<longValue_t>;
        function newInstanceP(className: 'java.lang.Long', arg0: long_t): Promise<longValue_t>;
        function newInstanceP(className: 'java.lang.Number'): Promise<number>;
        function newInstanceP(className: 'java.lang.Object'): Promise<object_t>;
        function newInstanceP(className: 'java.lang.Short', arg0: string_t): Promise<number>;
        function newInstanceP(className: 'java.lang.Short', arg0: short_t): Promise<number>;
        function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Charset): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: Java.Charset): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: string_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: object_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: object_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: string_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: object_array_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String', arg0: object_array_t): Promise<string>;
        function newInstanceP(className: 'java.lang.String'): Promise<string>;
        function newInstanceP(className: 'java.util.ArrayList', arg0: Java.Collection): Promise<Java.ArrayList>;
        function newInstanceP(className: 'java.util.ArrayList', arg0: integer_t): Promise<Java.ArrayList>;
        function newInstanceP(className: 'java.util.ArrayList'): Promise<Java.ArrayList>;
        function newInstanceP(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t): Promise<Java.HashMap>;
        function newInstanceP(className: 'java.util.HashMap', arg0: Java.Map): Promise<Java.HashMap>;
        function newInstanceP(className: 'java.util.HashMap', arg0: integer_t): Promise<Java.HashMap>;
        function newInstanceP(className: 'java.util.HashMap'): Promise<Java.HashMap>;
        function newInstanceP(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t): Promise<Java.HashSet>;
        function newInstanceP(className: 'java.util.HashSet', arg0: Java.Collection): Promise<Java.HashSet>;
        function newInstanceP(className: 'java.util.HashSet', arg0: integer_t): Promise<Java.HashSet>;
        function newInstanceP(className: 'java.util.HashSet'): Promise<Java.HashSet>;
        function newInstanceP(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, arg2: boolean_t): Promise<Java.LinkedHashMap>;
        function newInstanceP(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t): Promise<Java.LinkedHashMap>;
        function newInstanceP(className: 'java.util.LinkedHashMap', arg0: Java.Map): Promise<Java.LinkedHashMap>;
        function newInstanceP(className: 'java.util.LinkedHashMap', arg0: integer_t): Promise<Java.LinkedHashMap>;
        function newInstanceP(className: 'java.util.LinkedHashMap'): Promise<Java.LinkedHashMap>;
        function newInstanceP(className: 'java.util.NoSuchElementException', arg0: string_t): Promise<Java.NoSuchElementException>;
        function newInstanceP(className: 'java.util.NoSuchElementException'): Promise<Java.NoSuchElementException>;
        function newInstanceP(className: 'javax.script.AbstractScriptEngine', arg0: Java.Bindings): Promise<Java.AbstractScriptEngine>;
        function newInstanceP(className: 'javax.script.AbstractScriptEngine'): Promise<Java.AbstractScriptEngine>;
        function newInstanceP(className: 'javax.script.CompiledScript'): Promise<Java.CompiledScript>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.groovy.function.GComparator', arg0: Java.Closure): Promise<Java.GComparator>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.groovy.function.GFunction', arg0: Java.Closure): Promise<Java.GFunction>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.groovy.function.GSupplier', arg0: Java.Closure): Promise<Java.GSupplier>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator', arg0: Java.Closure): Promise<Java.GUnaryOperator>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t, arg2: long_t): Promise<Java.GremlinGroovyScriptEngine>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t, arg1: object_t): Promise<Java.GremlinGroovyScriptEngine>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg0: object_t): Promise<Java.GremlinGroovyScriptEngine>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine'): Promise<Java.GremlinGroovyScriptEngine>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.computer.KeyValue', arg0: object_t, arg1: object_t): Promise<Java.KeyValue>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject'): Promise<Java.MapReduce$NullObject>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope'): Promise<Java.MessageScope>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier', arg0: Java.MessageScope$Local): Promise<Java.MessageScope$Local$ReverseTraversalSupplier>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger', arg0: Java.Messenger, arg1: object_t): Promise<Java.SingleMessenger>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder'): Promise<Java.TraversalVertexProgram$Builder>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor'): Promise<Java.TraverserExecutor>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal', arg0: Java.Graph): Promise<Java.DefaultGraphTraversal>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal'): Promise<Java.DefaultGraphTraversal>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub', arg0: Java.GraphTraversal$Admin, arg1: boolean_t): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder'): Promise<Java.ComputerTraversalEngine$Builder>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder'): Promise<Java.StandardTraversalEngine$Builder>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.P', arg0: Java.BiPredicate, arg1: object_t): Promise<Java.P>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions'): Promise<Java.Path$Exceptions>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep', arg0: Java.Traversal$Admin): Promise<Java.AbstractStep>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet'): Promise<Java.BulkSet>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep', arg0: Java.Traversal$Admin): Promise<Java.CollectingBarrierStep>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep', arg0: Java.Traversal$Admin): Promise<Java.ComputerAwareStep>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep', arg0: Java.ComputerAwareStep, arg1: Java.Traversal$Admin): Promise<Java.ComputerAwareStep$EndStep>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator', arg0: Java.Function, arg1: Java.Comparator): Promise<Java.ElementFunctionComparator>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator', arg0: string_t, arg1: Java.Comparator): Promise<Java.ElementValueComparator>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator', arg0: Java.Step): Promise<Java.ExpandableStepIterator>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer', arg0: string_t, arg1: Java.P): Promise<Java.HasContainer>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep', arg0: Java.Traversal$Admin): Promise<Java.NoOpBarrierStep>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep', arg0: Java.Traversal$Admin): Promise<Java.PathIdentityStep>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep', arg0: Java.Traversal$Admin): Promise<Java.ReducingBarrierStep>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce', arg0: Java.Supplier, arg1: Java.BiFunction): Promise<Java.ReducingBarrierStep$DefaultMapReduce>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep', arg0: Java.Traversal$Admin): Promise<Java.SupplyingBarrierStep>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator', arg0: Java.Traversal$Admin, arg1: Java.Comparator): Promise<Java.TraversalComparator>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', ...arg0: Java.Map$Entry[]): Promise<Java.Tree>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', ...arg0: object_t[]): Promise<Java.Tree>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree'): Promise<Java.Tree>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback', arg0: Java.EventStrategy, arg1: object_t): Promise<Java.EventStrategy$EventStrategyCallback>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException', arg0: string_t, arg1: Java.Traversal): Promise<Java.ComputerVerificationException>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions'): Promise<Java.Traversal$Exceptions>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions'): Promise<Java.TraversalSideEffects$Exceptions>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache'): Promise<Java.TraversalStrategies$GlobalCache>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.AndP', arg0: Java.P, ...arg1: Java.P[]): Promise<Java.AndP>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP', arg0: Java.P, ...arg1: Java.P[]): Promise<Java.ConjunctionP>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal', arg0: Java.Graph): Promise<Java.DefaultTraversal>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal'): Promise<Java.DefaultTraversal>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects'): Promise<Java.DefaultTraversalSideEffects>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies'): Promise<Java.DefaultTraversalStrategies>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics', arg0: string_t, arg1: string_t, arg2: Java.DependantMutableMetrics): Promise<Java.DependantMutableMetrics>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics', arg0: string_t, arg1: string_t): Promise<Java.MutableMetrics>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.OrP', arg0: Java.P, ...arg1: Java.P[]): Promise<Java.OrP>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics'): Promise<Java.StandardTraversalMetrics>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition'): Promise<Java.StepPosition>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction', arg0: Java.Class): Promise<Java.TraversalClassFunction>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix', arg0: Java.Traversal$Admin): Promise<Java.TraversalMatrix>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction', arg0: Java.Traversal$Admin): Promise<Java.TraversalObjectFunction>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Java.Traversal$Admin, arg1: object_t, arg2: boolean_t): Promise<Java.TraversalP>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg0: Java.Traversal$Admin, arg1: boolean_t): Promise<Java.TraversalP>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing', ...arg0: Java.Traversal$Admin[]): Promise<Java.TraversalRing>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction', arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<Java.TraversalScriptFunction>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple', arg0: Java.Collection): Promise<Java.TraversalUtil$Multiple>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Exceptions'): Promise<Java.Graph$Exceptions>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Hidden'): Promise<Java.Graph$Hidden>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry'): Promise<Java.AbstractIoRegistry>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphMigrator'): Promise<Java.GraphMigrator>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo', arg0: Java.Graph): Promise<Java.GraphMLIo>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder'): Promise<Java.GraphMLIo$Builder>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper'): Promise<Java.GraphMLMapper>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder'): Promise<Java.GraphMLMapper$Builder>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter', arg0: object_t): Promise<Java.GraphMLWriterHelper$IndentingXMLStreamWriter>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo', arg0: Java.IoRegistry, arg1: Java.Graph): Promise<Java.GraphSONIo>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder'): Promise<Java.GraphSONIo$Builder>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg0: Java.GraphSONMapper, arg1: long_t): Promise<Java.GraphSONReader>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader', arg0: object_t, arg1: long_t): Promise<Java.LegacyGraphSONReader>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens'): Promise<Java.LegacyGraphSONReader$GraphSONTokens>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo', arg0: Java.IoRegistry, arg1: Java.Graph): Promise<Java.GryoIo>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder'): Promise<Java.GryoIo$Builder>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t, arg1: Java.GryoPool$Type, arg2: object_t): Promise<Java.GryoPool>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: object_t): Promise<Java.GryoPool>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg0: integer_t): Promise<Java.GryoPool>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream', arg0: Java.InputStream): Promise<Java.VertexByteArrayInputStream>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions'): Promise<Java.Io$Exceptions>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.io.IoCore'): Promise<Java.IoCore>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Workload', arg0: Java.Graph, arg1: Java.Function): Promise<Java.Transaction$Workload>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction', arg0: Java.Graph): Promise<Java.AbstractTransaction>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t, arg1: object_t): Promise<Java.AbstractTransaction$TransactionException>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: object_t): Promise<Java.AbstractTransaction$TransactionException>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg0: string_t): Promise<Java.AbstractTransaction$TransactionException>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Method'): Promise<Java.Attachable$Method>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.Comparators'): Promise<Java.Comparators>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge', arg0: object_t, arg1: string_t, arg2: Java.Map, arg3: object_t, arg4: object_t): Promise<Java.DetachedEdge>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t, arg2: Java.Element): Promise<Java.DetachedProperty>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg0: string_t, arg1: object_t): Promise<Java.DetachedProperty>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex', arg0: object_t, arg1: string_t, arg2: Java.Map): Promise<Java.DetachedVertex>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Java.Map, arg4: Java.Vertex): Promise<Java.DetachedVertexProperty>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg0: object_t, arg1: string_t, arg2: object_t, arg3: Java.Map): Promise<Java.DetachedVertexProperty>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphFactory'): Promise<Java.GraphFactory>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper'): Promise<Java.GraphVariableHelper>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult', arg0: Java.Graph, arg1: Java.Memory): Promise<Java.TinkerComputerResult>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer', arg0: Java.TinkerGraph): Promise<Java.TinkerGraphComputer>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView', arg0: Java.Set): Promise<Java.TinkerGraphView>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter', arg0: boolean_t): Promise<Java.TinkerMapEmitter>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory', arg0: Java.VertexProgram, arg1: Java.Set): Promise<Java.TinkerMemory>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger', arg0: Java.Vertex, arg1: object_t, arg2: object_t): Promise<Java.TinkerMessenger>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter'): Promise<Java.TinkerReduceEmitter>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool', arg0: integer_t): Promise<Java.TinkerWorkerPool>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables'): Promise<Java.TinkerGraphVariables>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty', arg0: Java.Element, arg1: string_t, arg2: object_t): Promise<Java.TinkerProperty>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: object_t, arg1: Java.TinkerVertex, arg2: string_t, arg3: object_t, ...arg4: object_t[]): Promise<Java.TinkerVertexProperty>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg0: Java.TinkerVertex, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<Java.TinkerVertexProperty>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.util.function.ChainedComparator', arg0: Java.List): Promise<Java.ChainedComparator>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.util.function.ConstantSupplier', arg0: object_t): Promise<Java.ConstantSupplier>;
        function newInstanceP(className: 'org.apache.tinkerpop.gremlin.util.function.ScriptEngineLambda', arg0: string_t, arg1: string_t): Promise<Java.ScriptEngineLambda>;
        function newInstanceP(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: array_t<Java.ClassNode>, arg4: object_array_t): Promise<Java.ClassNode>;
        function newInstanceP(className: 'org.codehaus.groovy.ast.ClassNode', arg0: string_t, arg1: integer_t, arg2: Java.ClassNode): Promise<Java.ClassNode>;
        function newInstanceP(className: 'org.codehaus.groovy.ast.ClassNode', arg0: Java.Class): Promise<Java.ClassNode>;
        function newInstanceP(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: Java.CompilerConfiguration): Promise<Java.CompilerConfiguration>;
        function newInstanceP(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg0: object_t): Promise<Java.CompilerConfiguration>;
        function newInstanceP(className: 'org.codehaus.groovy.control.CompilerConfiguration'): Promise<Java.CompilerConfiguration>;
        function newInstanceP(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg0: object_t): Promise<Java.CompilationCustomizer>;
        function newInstanceP(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Java.ClassLoader, arg1: Java.Binding, arg2: object_t, arg3: Java.Closure): Promise<Java.Groovysh>;
        function newInstanceP(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Java.ClassLoader, arg1: Java.Binding, arg2: object_t): Promise<Java.Groovysh>;
        function newInstanceP(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: Java.Binding, arg1: object_t): Promise<Java.Groovysh>;
        function newInstanceP(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg0: object_t): Promise<Java.Groovysh>;
        function newInstanceP(className: 'org.codehaus.groovy.tools.shell.Groovysh'): Promise<Java.Groovysh>;
        function newInstanceP(className: 'org.codehaus.groovy.util.ManagedReference', arg0: object_t, arg1: object_t, arg2: object_t): Promise<Java.ManagedReference>;
        function newInstanceP(className: 'org.codehaus.groovy.util.ManagedReference', arg0: Java.ReferenceBundle, arg1: object_t): Promise<Java.ManagedReference>;
        function newInstanceP(className: 'org.codehaus.groovy.util.ReferenceBundle', arg0: object_t, arg1: object_t): Promise<Java.ReferenceBundle>;
        function newInstanceP(className: string, ...args: any[]): Promise<any>;
        function newArray(className: 'co.redseal.gremlinnode.function.GlobFunction', arg: Java.GlobFunction[]): array_t<co.redseal.gremlinnode.function_.GlobFunction>;
        function newArray(className: 'co.redseal.gremlinnode.function.GroovyLambda', arg: Java.GroovyLambda[]): array_t<co.redseal.gremlinnode.function_.GroovyLambda>;
        function newArray(className: 'co.redseal.gremlinnode.testing.TestClass', arg: Java.TestClass[]): array_t<co.redseal.gremlinnode.testing.TestClass>;
        function newArray(className: 'co.redseal.util.StringInputStream', arg: Java.StringInputStream[]): array_t<co.redseal.util.StringInputStream>;
        function newArray(className: 'groovy.lang.Binding', arg: Java.Binding[]): array_t<groovy.lang.Binding>;
        function newArray(className: 'groovy.lang.Closure', arg: Java.Closure[]): array_t<groovy.lang.Closure>;
        function newArray(className: 'groovy.lang.DelegatingMetaClass', arg: Java.DelegatingMetaClass[]): array_t<groovy.lang.DelegatingMetaClass>;
        function newArray(className: 'groovy.lang.GroovyClassLoader', arg: Java.GroovyClassLoader[]): array_t<groovy.lang.GroovyClassLoader>;
        function newArray(className: 'groovy.lang.GroovyCodeSource', arg: Java.GroovyCodeSource[]): array_t<groovy.lang.GroovyCodeSource>;
        function newArray(className: 'groovy.lang.GroovyObjectSupport', arg: Java.GroovyObjectSupport[]): array_t<groovy.lang.GroovyObjectSupport>;
        function newArray(className: 'groovy.lang.GroovyResourceLoader', arg: Java.GroovyResourceLoader[]): array_t<groovy.lang.GroovyResourceLoader>;
        function newArray(className: 'groovy.lang.IntRange', arg: Java.IntRange[]): array_t<groovy.lang.IntRange>;
        function newArray(className: 'groovy.lang.MetaBeanProperty', arg: Java.MetaBeanProperty[]): array_t<groovy.lang.MetaBeanProperty>;
        function newArray(className: 'groovy.lang.MetaClass', arg: Java.MetaClass[]): array_t<groovy.lang.MetaClass>;
        function newArray(className: 'groovy.lang.MetaMethod', arg: Java.MetaMethod[]): array_t<groovy.lang.MetaMethod>;
        function newArray(className: 'groovy.lang.MetaProperty', arg: Java.MetaProperty[]): array_t<groovy.lang.MetaProperty>;
        function newArray(className: 'groovy.lang.Range', arg: Java.Range[]): array_t<groovy.lang.Range>;
        function newArray(className: 'groovy.lang.Reference', arg: Java.Reference[]): array_t<groovy.lang.Reference>;
        function newArray(className: 'java.io.ByteArrayOutputStream', arg: Java.ByteArrayOutputStream[]): array_t<java.io.ByteArrayOutputStream>;
        function newArray(className: 'java.io.FileInputStream', arg: Java.FileInputStream[]): array_t<java.io.FileInputStream>;
        function newArray(className: 'java.io.FileOutputStream', arg: Java.FileOutputStream[]): array_t<java.io.FileOutputStream>;
        function newArray(className: 'java.io.InputStream', arg: Java.InputStream[]): array_t<java.io.InputStream>;
        function newArray(className: 'java.io.OutputStream', arg: Java.OutputStream[]): array_t<java.io.OutputStream>;
        function newArray(className: 'java.lang.Boolean', arg: boolean_t[]): array_t<java.lang.Boolean>;
        function newArray(className: 'java.lang.Class', arg: Java.Class[]): array_t<java.lang.Class>;
        function newArray(className: 'java.lang.ClassLoader', arg: Java.ClassLoader[]): array_t<java.lang.ClassLoader>;
        function newArray(className: 'java.lang.Double', arg: double_t[]): array_t<java.lang.Double>;
        function newArray(className: 'java.lang.Enum', arg: Java.Enum[]): array_t<java.lang.Enum>;
        function newArray(className: 'java.lang.Float', arg: float_t[]): array_t<java.lang.Float>;
        function newArray(className: 'java.lang.Integer', arg: integer_t[]): array_t<java.lang.Integer>;
        function newArray(className: 'java.lang.Iterable', arg: Java.Iterable[]): array_t<java.lang.Iterable>;
        function newArray(className: 'java.lang.Long', arg: long_t[]): array_t<java.lang.Long>;
        function newArray(className: 'java.lang.Number', arg: number_t[]): array_t<java.lang.Number>;
        function newArray(className: 'java.lang.Object', arg: object_t[]): array_t<java.lang.Object>;
        function newArray(className: 'java.lang.reflect.Array', arg: Java.Array[]): array_t<java.lang.reflect.Array>;
        function newArray(className: 'java.lang.Short', arg: short_t[]): array_t<java.lang.Short>;
        function newArray(className: 'java.lang.String', arg: string_t[]): array_t<java.lang.String>;
        function newArray(className: 'java.nio.charset.Charset', arg: Java.Charset[]): array_t<java.nio.charset.Charset>;
        function newArray(className: 'java.nio.charset.StandardCharsets', arg: Java.StandardCharsets[]): array_t<java.nio.charset.StandardCharsets>;
        function newArray(className: 'java.util.AbstractCollection', arg: Java.AbstractCollection[]): array_t<java.util.AbstractCollection>;
        function newArray(className: 'java.util.AbstractList', arg: Java.AbstractList[]): array_t<java.util.AbstractList>;
        function newArray(className: 'java.util.AbstractMap', arg: Java.AbstractMap[]): array_t<java.util.AbstractMap>;
        function newArray(className: 'java.util.AbstractSet', arg: Java.AbstractSet[]): array_t<java.util.AbstractSet>;
        function newArray(className: 'java.util.ArrayList', arg: Java.ArrayList[]): array_t<java.util.ArrayList>;
        function newArray(className: 'java.util.Collection', arg: Java.Collection[]): array_t<java.util.Collection>;
        function newArray(className: 'java.util.Comparator', arg: Java.Comparator[]): array_t<java.util.Comparator>;
        function newArray(className: 'java.util.function.BiConsumer', arg: Java.BiConsumer[]): array_t<java.util.function_.BiConsumer>;
        function newArray(className: 'java.util.function.BiFunction', arg: Java.BiFunction[]): array_t<java.util.function_.BiFunction>;
        function newArray(className: 'java.util.function.BinaryOperator', arg: Java.BinaryOperator[]): array_t<java.util.function_.BinaryOperator>;
        function newArray(className: 'java.util.function.BiPredicate', arg: Java.BiPredicate[]): array_t<java.util.function_.BiPredicate>;
        function newArray(className: 'java.util.function.Consumer', arg: Java.Consumer[]): array_t<java.util.function_.Consumer>;
        function newArray(className: 'java.util.function.Function', arg: Java.Function[]): array_t<java.util.function_.Function>;
        function newArray(className: 'java.util.function.Predicate', arg: Java.Predicate[]): array_t<java.util.function_.Predicate>;
        function newArray(className: 'java.util.function.Supplier', arg: Java.Supplier[]): array_t<java.util.function_.Supplier>;
        function newArray(className: 'java.util.function.UnaryOperator', arg: Java.UnaryOperator[]): array_t<java.util.function_.UnaryOperator>;
        function newArray(className: 'java.util.HashMap', arg: Java.HashMap[]): array_t<java.util.HashMap>;
        function newArray(className: 'java.util.HashSet', arg: Java.HashSet[]): array_t<java.util.HashSet>;
        function newArray(className: 'java.util.Iterator', arg: Java.Iterator[]): array_t<java.util.Iterator>;
        function newArray(className: 'java.util.LinkedHashMap', arg: Java.LinkedHashMap[]): array_t<java.util.LinkedHashMap>;
        function newArray(className: 'java.util.List', arg: Java.List[]): array_t<java.util.List>;
        function newArray(className: 'java.util.ListIterator', arg: Java.ListIterator[]): array_t<java.util.ListIterator>;
        function newArray(className: 'java.util.Map', arg: Java.Map[]): array_t<java.util.Map>;
        function newArray(className: 'java.util.Map$Entry', arg: Java.Map$Entry[]): array_t<java.util.Map$Entry>;
        function newArray(className: 'java.util.NoSuchElementException', arg: Java.NoSuchElementException[]): array_t<java.util.NoSuchElementException>;
        function newArray(className: 'java.util.Set', arg: Java.Set[]): array_t<java.util.Set>;
        function newArray(className: 'javax.script.AbstractScriptEngine', arg: Java.AbstractScriptEngine[]): array_t<javax.script.AbstractScriptEngine>;
        function newArray(className: 'javax.script.Bindings', arg: Java.Bindings[]): array_t<javax.script.Bindings>;
        function newArray(className: 'javax.script.CompiledScript', arg: Java.CompiledScript[]): array_t<javax.script.CompiledScript>;
        function newArray(className: 'javax.script.ScriptContext', arg: Java.ScriptContext[]): array_t<javax.script.ScriptContext>;
        function newArray(className: 'javax.script.ScriptEngine', arg: Java.ScriptEngine[]): array_t<javax.script.ScriptEngine>;
        function newArray(className: 'javax.script.ScriptEngineFactory', arg: Java.ScriptEngineFactory[]): array_t<javax.script.ScriptEngineFactory>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.groovy.function.GComparator', arg: Java.GComparator[]): array_t<org.apache.tinkerpop.gremlin.groovy.function_.GComparator>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.groovy.function.GFunction', arg: Java.GFunction[]): array_t<org.apache.tinkerpop.gremlin.groovy.function_.GFunction>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.groovy.function.GSupplier', arg: Java.GSupplier[]): array_t<org.apache.tinkerpop.gremlin.groovy.function_.GSupplier>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.groovy.function.GUnaryOperator', arg: Java.GUnaryOperator[]): array_t<org.apache.tinkerpop.gremlin.groovy.function_.GUnaryOperator>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine', arg: Java.GremlinGroovyScriptEngine[]): array_t<org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce', arg: Java.ClusterCountMapReduce[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder', arg: Java.ClusterCountMapReduce$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce', arg: Java.ClusterPopulationMapReduce[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder', arg: Java.ClusterPopulationMapReduce$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram', arg: Java.PeerPressureVertexProgram[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder', arg: Java.PeerPressureVertexProgram$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ComputerResult', arg: Java.ComputerResult[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ComputerResult>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer', arg: Java.GraphComputer[]): array_t<org.apache.tinkerpop.gremlin.process.computer.GraphComputer>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions', arg: Java.GraphComputer$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features', arg: Java.GraphComputer$Features[]): array_t<org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist', arg: Java.GraphComputer$Persist[]): array_t<org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph', arg: Java.GraphComputer$ResultGraph[]): array_t<org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.KeyValue', arg: Java.KeyValue[]): array_t<org.apache.tinkerpop.gremlin.process.computer.KeyValue>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce', arg: Java.MapReduce[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MapReduce>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter', arg: Java.MapReduce$MapEmitter[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject', arg: Java.MapReduce$NullObject[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter', arg: Java.MapReduce$ReduceEmitter[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage', arg: Java.MapReduce$Stage[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory', arg: Java.Memory[]): array_t<org.apache.tinkerpop.gremlin.process.computer.Memory>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory$Admin', arg: Java.Memory$Admin[]): array_t<org.apache.tinkerpop.gremlin.process.computer.Memory$Admin>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions', arg: Java.Memory$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageCombiner', arg: Java.MessageCombiner[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MessageCombiner>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope', arg: Java.MessageScope[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MessageScope>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global', arg: Java.MessageScope$Global[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local', arg: Java.MessageScope$Local[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier', arg: Java.MessageScope$Local$ReverseTraversalSupplier[]): array_t<org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.Messenger', arg: Java.Messenger[]): array_t<org.apache.tinkerpop.gremlin.process.computer.Messenger>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce', arg: Java.PageRankMapReduce[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder', arg: Java.PageRankMapReduce$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner', arg: Java.PageRankMessageCombiner[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram', arg: Java.PageRankVertexProgram[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder', arg: Java.PageRankVertexProgram$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger', arg: Java.SingleMessenger[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram', arg: Java.TraversalVertexProgram[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder', arg: Java.TraversalVertexProgram$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner', arg: Java.TraversalVertexProgramMessageCombiner[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor', arg: Java.TraverserExecutor[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects', arg: Java.VertexTraversalSideEffects[]): array_t<org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram', arg: Java.VertexProgram[]): array_t<org.apache.tinkerpop.gremlin.process.computer.VertexProgram>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder', arg: Java.VertexProgram$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features', arg: Java.VertexProgram$Features[]): array_t<org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Compare', arg: Java.Compare[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Compare>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Contains', arg: Java.Contains[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Contains>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__', arg: Java.__[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal', arg: Java.DefaultGraphTraversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal', arg: Java.EmptyGraphTraversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal', arg: Java.GraphTraversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin', arg: Java.GraphTraversal$Admin[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource', arg: Java.GraphTraversalSource[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder', arg: Java.GraphTraversalSource$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub', arg: Java.GraphTraversalSource$GraphTraversalSourceStub[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine', arg: Java.ComputerTraversalEngine[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder', arg: Java.ComputerTraversalEngine$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy', arg: Java.ComputerTraversalEngine$ComputerResultStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine', arg: Java.StandardTraversalEngine[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder', arg: Java.StandardTraversalEngine$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Operator', arg: Java.Operator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Operator>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Order', arg: Java.Order[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Order>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.P', arg: Java.P[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.P>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path', arg: Java.Path[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Path>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions', arg: Java.Path$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Scope', arg: Java.Scope[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Scope>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Step', arg: Java.Step[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Step>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep', arg: Java.AbstractStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet', arg: Java.BulkSet[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep', arg: Java.CollectingBarrierStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep', arg: Java.ComputerAwareStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep', arg: Java.ComputerAwareStep$EndStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator', arg: Java.ElementFunctionComparator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator', arg: Java.ElementValueComparator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath', arg: Java.EmptyPath[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep', arg: Java.EmptyStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator', arg: Java.ExpandableStepIterator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer', arg: Java.HasContainer[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath', arg: Java.ImmutablePath[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper', arg: Java.MapHelper[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath', arg: Java.MutablePath[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep', arg: Java.NoOpBarrierStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep', arg: Java.PathIdentityStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep', arg: Java.ReducingBarrierStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce', arg: Java.ReducingBarrierStep$DefaultMapReduce[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet', arg: Java.ReducingBarrierStep$FinalGet[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep', arg: Java.SupplyingBarrierStep[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator', arg: Java.TraversalComparator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree', arg: Java.Tree[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy', arg: Java.ConjunctionStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy', arg: Java.ElementIdStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder', arg: Java.ElementIdStrategy$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy', arg: Java.EventStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder', arg: Java.EventStrategy$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback', arg: Java.EventStrategy$EventStrategyCallback[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy', arg: Java.PartitionStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder', arg: Java.PartitionStrategy$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy', arg: Java.SubgraphStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder', arg: Java.SubgraphStrategy$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException', arg: Java.ComputerVerificationException[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy', arg: Java.ComputerVerificationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy', arg: Java.LambdaRestrictionStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy', arg: Java.ReadOnlyStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal', arg: Java.Traversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Traversal>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin', arg: Java.Traversal$Admin[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions', arg: Java.Traversal$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine', arg: Java.TraversalEngine[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder', arg: Java.TraversalEngine$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type', arg: Java.TraversalEngine$Type[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects', arg: Java.TraversalSideEffects[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions', arg: Java.TraversalSideEffects$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSource', arg: Java.TraversalSource[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalSource>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder', arg: Java.TraversalSource$Builder[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies', arg: Java.TraversalStrategies[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache', arg: Java.TraversalStrategies$GlobalCache[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy', arg: Java.TraversalStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy', arg: Java.TraversalStrategy$DecorationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy', arg: Java.TraversalStrategy$FinalizationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy', arg: Java.TraversalStrategy$OptimizationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy', arg: Java.TraversalStrategy$VendorOptimizationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy', arg: Java.TraversalStrategy$VerificationStrategy[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traverser', arg: Java.Traverser[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Traverser>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin', arg: Java.Traverser$Admin[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator', arg: Java.TraverserGenerator[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.AndP', arg: Java.AndP[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.AndP>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP', arg: Java.ConjunctionP[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal', arg: Java.DefaultTraversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects', arg: Java.DefaultTraversalSideEffects[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies', arg: Java.DefaultTraversalStrategies[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics', arg: Java.DependantMutableMetrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal', arg: Java.EmptyTraversal[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects', arg: Java.EmptyTraversalSideEffects[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies', arg: Java.EmptyTraversalStrategies[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException', arg: Java.FastNoSuchElementException[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics', arg: Java.ImmutableMetrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.Metrics', arg: Java.Metrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.Metrics>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics', arg: Java.MutableMetrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.OrP', arg: Java.OrP[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.OrP>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper', arg: Java.SideEffectHelper[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics', arg: Java.StandardTraversalMetrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition', arg: Java.StepPosition[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction', arg: Java.TraversalClassFunction[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper', arg: Java.TraversalHelper[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix', arg: Java.TraversalMatrix[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics', arg: Java.TraversalMetrics[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction', arg: Java.TraversalObjectFunction[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP', arg: Java.TraversalP[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing', arg: Java.TraversalRing[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction', arg: Java.TraversalScriptFunction[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper', arg: Java.TraversalScriptHelper[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil', arg: Java.TraversalUtil[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple', arg: Java.TraversalUtil$Multiple[]): array_t<org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Direction', arg: Java.Direction[]): array_t<org.apache.tinkerpop.gremlin.structure.Direction>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Edge', arg: Java.Edge[]): array_t<org.apache.tinkerpop.gremlin.structure.Edge>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Edge$Exceptions', arg: Java.Edge$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Edge$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Element', arg: Java.Element[]): array_t<org.apache.tinkerpop.gremlin.structure.Element>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Element$Exceptions', arg: Java.Element$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Element$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph', arg: Java.Graph[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Exceptions', arg: Java.Graph$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features', arg: Java.Graph$Features[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures', arg: Java.Graph$Features$DataTypeFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures', arg: Java.Graph$Features$EdgeFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures', arg: Java.Graph$Features$EdgePropertyFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures', arg: Java.Graph$Features$ElementFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet', arg: Java.Graph$Features$FeatureSet[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures', arg: Java.Graph$Features$GraphFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures', arg: Java.Graph$Features$PropertyFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures', arg: Java.Graph$Features$VariableFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures', arg: Java.Graph$Features$VertexFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures', arg: Java.Graph$Features$VertexPropertyFeatures[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Hidden', arg: Java.Graph$Hidden[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Hidden>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptIn', arg: Java.Graph$OptIn[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$OptIn>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptIns', arg: Java.Graph$OptIns[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$OptIns>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptOut', arg: Java.Graph$OptOut[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$OptOut>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$OptOuts', arg: Java.Graph$OptOuts[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$OptOuts>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Variables', arg: Java.Graph$Variables[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Variables>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions', arg: Java.Graph$Variables$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry', arg: Java.AbstractIoRegistry[]): array_t<org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphMigrator', arg: Java.GraphMigrator[]): array_t<org.apache.tinkerpop.gremlin.structure.io.GraphMigrator>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo', arg: Java.GraphMLIo[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder', arg: Java.GraphMLIo$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper', arg: Java.GraphMLMapper[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder', arg: Java.GraphMLMapper$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader', arg: Java.GraphMLReader[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder', arg: Java.GraphMLReader$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter', arg: Java.GraphMLWriter[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder', arg: Java.GraphMLWriter$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter', arg: Java.GraphMLWriterHelper$IndentingXMLStreamWriter[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphReader', arg: Java.GraphReader[]): array_t<org.apache.tinkerpop.gremlin.structure.io.GraphReader>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder', arg: Java.GraphReader$ReaderBuilder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo', arg: Java.GraphSONIo[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder', arg: Java.GraphSONIo$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper', arg: Java.GraphSONMapper[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder', arg: Java.GraphSONMapper$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader', arg: Java.GraphSONReader[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder', arg: Java.GraphSONReader$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens', arg: Java.GraphSONTokens[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil', arg: Java.GraphSONUtil[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion', arg: Java.GraphSONVersion[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter', arg: Java.GraphSONWriter[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder', arg: Java.GraphSONWriter$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader', arg: Java.LegacyGraphSONReader[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder', arg: Java.LegacyGraphSONReader$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens', arg: Java.LegacyGraphSONReader$GraphSONTokens[]): array_t<org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphWriter', arg: Java.GraphWriter[]): array_t<org.apache.tinkerpop.gremlin.structure.io.GraphWriter>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder', arg: Java.GraphWriter$WriterBuilder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo', arg: Java.GryoIo[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder', arg: Java.GryoIo$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper', arg: Java.GryoMapper[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder', arg: Java.GryoMapper$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool', arg: Java.GryoPool[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type', arg: Java.GryoPool$Type[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader', arg: Java.GryoReader[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder', arg: Java.GryoReader$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter', arg: Java.GryoWriter[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder', arg: Java.GryoWriter$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream', arg: Java.VertexByteArrayInputStream[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator', arg: Java.VertexTerminator[]): array_t<org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.Io', arg: Java.Io[]): array_t<org.apache.tinkerpop.gremlin.structure.io.Io>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Builder', arg: Java.Io$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.Io$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions', arg: Java.Io$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.IoCore', arg: Java.IoCore[]): array_t<org.apache.tinkerpop.gremlin.structure.io.IoCore>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.IoRegistry', arg: Java.IoRegistry[]): array_t<org.apache.tinkerpop.gremlin.structure.io.IoRegistry>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.Mapper', arg: Java.Mapper[]): array_t<org.apache.tinkerpop.gremlin.structure.io.Mapper>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder', arg: Java.Mapper$Builder[]): array_t<org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Property', arg: Java.Property[]): array_t<org.apache.tinkerpop.gremlin.structure.Property>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Property$Exceptions', arg: Java.Property$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Property$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.PropertyType', arg: Java.PropertyType[]): array_t<org.apache.tinkerpop.gremlin.structure.PropertyType>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.T', arg: Java.T[]): array_t<org.apache.tinkerpop.gremlin.structure.T>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction', arg: Java.Transaction[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR', arg: Java.Transaction$CLOSE_BEHAVIOR[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions', arg: Java.Transaction$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR', arg: Java.Transaction$READ_WRITE_BEHAVIOR[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Status', arg: Java.Transaction$Status[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction$Status>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Transaction$Workload', arg: Java.Transaction$Workload[]): array_t<org.apache.tinkerpop.gremlin.structure.Transaction$Workload>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction', arg: Java.AbstractTransaction[]): array_t<org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException', arg: Java.AbstractTransaction$TransactionException[]): array_t<org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable', arg: Java.Attachable[]): array_t<org.apache.tinkerpop.gremlin.structure.util.Attachable>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions', arg: Java.Attachable$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.Attachable$Method', arg: Java.Attachable$Method[]): array_t<org.apache.tinkerpop.gremlin.structure.util.Attachable$Method>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.Comparators', arg: Java.Comparators[]): array_t<org.apache.tinkerpop.gremlin.structure.util.Comparators>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge', arg: Java.DetachedEdge[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement', arg: Java.DetachedElement[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory', arg: Java.DetachedFactory[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath', arg: Java.DetachedPath[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty', arg: Java.DetachedProperty[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex', arg: Java.DetachedVertex[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty', arg: Java.DetachedVertexProperty[]): array_t<org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.ElementHelper', arg: Java.ElementHelper[]): array_t<org.apache.tinkerpop.gremlin.structure.util.ElementHelper>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor', arg: Java.FeatureDescriptor[]): array_t<org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphFactory', arg: Java.GraphFactory[]): array_t<org.apache.tinkerpop.gremlin.structure.util.GraphFactory>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper', arg: Java.GraphVariableHelper[]): array_t<org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.Host', arg: Java.Host[]): array_t<org.apache.tinkerpop.gremlin.structure.util.Host>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.util.StringFactory', arg: Java.StringFactory[]): array_t<org.apache.tinkerpop.gremlin.structure.util.StringFactory>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Vertex', arg: Java.Vertex[]): array_t<org.apache.tinkerpop.gremlin.structure.Vertex>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions', arg: Java.Vertex$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty', arg: Java.VertexProperty[]): array_t<org.apache.tinkerpop.gremlin.structure.VertexProperty>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality', arg: Java.VertexProperty$Cardinality[]): array_t<org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions', arg: Java.VertexProperty$Exceptions[]): array_t<org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult', arg: Java.TinkerComputerResult[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer', arg: Java.TinkerGraphComputer[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView', arg: Java.TinkerGraphView[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter', arg: Java.TinkerMapEmitter[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory', arg: Java.TinkerMemory[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger', arg: Java.TinkerMessenger[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter', arg: Java.TinkerReduceEmitter[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool', arg: Java.TinkerWorkerPool[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge', arg: Java.TinkerEdge[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement', arg: Java.TinkerElement[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory', arg: Java.TinkerFactory[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph', arg: Java.TinkerGraph[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager', arg: Java.TinkerGraph$DefaultIdManager[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager', arg: Java.TinkerGraph$IdManager[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures', arg: Java.TinkerGraph$TinkerGraphEdgeFeatures[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures', arg: Java.TinkerGraph$TinkerGraphFeatures[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures', arg: Java.TinkerGraph$TinkerGraphGraphFeatures[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures', arg: Java.TinkerGraph$TinkerGraphVertexFeatures[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables', arg: Java.TinkerGraphVariables[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper', arg: Java.TinkerHelper[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty', arg: Java.TinkerProperty[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex', arg: Java.TinkerVertex[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty', arg: Java.TinkerVertexProperty[]): array_t<org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ArrayListSupplier', arg: Java.ArrayListSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ArrayListSupplier>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.BulkSetSupplier', arg: Java.BulkSetSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.BulkSetSupplier>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ChainedComparator', arg: Java.ChainedComparator[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ChainedComparator>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ConstantSupplier', arg: Java.ConstantSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ConstantSupplier>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.FunctionUtils', arg: Java.FunctionUtils[]): array_t<org.apache.tinkerpop.gremlin.util.function_.FunctionUtils>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.HashMapSupplier', arg: Java.HashMapSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.HashMapSupplier>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.HashSetSupplier', arg: Java.HashSetSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.HashSetSupplier>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.MeanNumberSupplier', arg: Java.MeanNumberSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.MeanNumberSupplier>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ScriptEngineLambda', arg: Java.ScriptEngineLambda[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ScriptEngineLambda>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingBiConsumer', arg: Java.ThrowingBiConsumer[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ThrowingBiConsumer>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingConsumer', arg: Java.ThrowingConsumer[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ThrowingConsumer>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingFunction', arg: Java.ThrowingFunction[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ThrowingFunction>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.ThrowingSupplier', arg: Java.ThrowingSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.ThrowingSupplier>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.TraversableLambda', arg: Java.TraversableLambda[]): array_t<org.apache.tinkerpop.gremlin.util.function_.TraversableLambda>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.TreeSupplier', arg: Java.TreeSupplier[]): array_t<org.apache.tinkerpop.gremlin.util.function_.TreeSupplier>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.TriConsumer', arg: Java.TriConsumer[]): array_t<org.apache.tinkerpop.gremlin.util.function_.TriConsumer>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.function.TriFunction', arg: Java.TriFunction[]): array_t<org.apache.tinkerpop.gremlin.util.function_.TriFunction>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.Gremlin', arg: Java.Gremlin[]): array_t<org.apache.tinkerpop.gremlin.util.Gremlin>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.ScriptEngineCache', arg: Java.ScriptEngineCache[]): array_t<org.apache.tinkerpop.gremlin.util.ScriptEngineCache>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.Serializer', arg: Java.Serializer[]): array_t<org.apache.tinkerpop.gremlin.util.Serializer>;
        function newArray(className: 'org.apache.tinkerpop.gremlin.util.TimeUtil', arg: Java.TimeUtil[]): array_t<org.apache.tinkerpop.gremlin.util.TimeUtil>;
        function newArray(className: 'org.codehaus.groovy.ast.ClassNode', arg: Java.ClassNode[]): array_t<org.codehaus.groovy.ast.ClassNode>;
        function newArray(className: 'org.codehaus.groovy.control.CompilerConfiguration', arg: Java.CompilerConfiguration[]): array_t<org.codehaus.groovy.control.CompilerConfiguration>;
        function newArray(className: 'org.codehaus.groovy.control.customizers.CompilationCustomizer', arg: Java.CompilationCustomizer[]): array_t<org.codehaus.groovy.control.customizers.CompilationCustomizer>;
        function newArray(className: 'org.codehaus.groovy.runtime.NullObject', arg: Java.NullObject[]): array_t<org.codehaus.groovy.runtime.NullObject>;
        function newArray(className: 'org.codehaus.groovy.tools.shell.Groovysh', arg: Java.Groovysh[]): array_t<org.codehaus.groovy.tools.shell.Groovysh>;
        function newArray(className: 'org.codehaus.groovy.util.ManagedReference', arg: Java.ManagedReference[]): array_t<org.codehaus.groovy.util.ManagedReference>;
        function newArray(className: 'org.codehaus.groovy.util.ReferenceBundle', arg: Java.ReferenceBundle[]): array_t<org.codehaus.groovy.util.ReferenceBundle>;
        function newArray<T>(className: string, arg: any[]): array_t<T>;
        interface longValue_t extends Number {
            longValue: string;
        }
        type string_t = string | Java.java.lang.String;
        type object_t = Java.java.lang.Object | string | boolean | number | longValue_t;
        type long_t = number | longValue_t | Java.java.lang.Long;
        type boolean_t = boolean | Java.java.lang.Boolean;
        type short_t = number | Java.java.lang.Short;
        type integer_t = number | Java.java.lang.Integer;
        type double_t = number | Java.java.lang.Double;
        type float_t = number | Java.java.lang.Float;
        type number_t = number | Java.java.lang.Number;
        interface array_t<T> extends Java.java.lang.Object {
            __dummy: T;
        }
        type object_array_t = array_t<Java.java.lang.Object> | object_t[];
        export import GlobFunction = co.redseal.gremlinnode.function_.GlobFunction;
        export import GroovyLambda = co.redseal.gremlinnode.function_.GroovyLambda;
        export import TestClass = co.redseal.gremlinnode.testing.TestClass;
        export import StringInputStream = co.redseal.util.StringInputStream;
        export import Binding = groovy.lang.Binding;
        export import Closure = groovy.lang.Closure;
        export import DelegatingMetaClass = groovy.lang.DelegatingMetaClass;
        export import GroovyClassLoader = groovy.lang.GroovyClassLoader;
        export import GroovyCodeSource = groovy.lang.GroovyCodeSource;
        export import GroovyObjectSupport = groovy.lang.GroovyObjectSupport;
        export import GroovyResourceLoader = groovy.lang.GroovyResourceLoader;
        export import IntRange = groovy.lang.IntRange;
        export import MetaBeanProperty = groovy.lang.MetaBeanProperty;
        export import MetaClass = groovy.lang.MetaClass;
        export import MetaMethod = groovy.lang.MetaMethod;
        export import MetaProperty = groovy.lang.MetaProperty;
        export import Range = groovy.lang.Range;
        export import Reference = groovy.lang.Reference;
        export import ByteArrayOutputStream = java.io.ByteArrayOutputStream;
        export import FileInputStream = java.io.FileInputStream;
        export import FileOutputStream = java.io.FileOutputStream;
        export import InputStream = java.io.InputStream;
        export import OutputStream = java.io.OutputStream;
        export import Boolean = java.lang.Boolean;
        export import Class = java.lang.Class;
        export import ClassLoader = java.lang.ClassLoader;
        export import Double = java.lang.Double;
        export import Enum = java.lang.Enum;
        export import Float = java.lang.Float;
        export import Integer = java.lang.Integer;
        export import Iterable = java.lang.Iterable;
        export import Long = java.lang.Long;
        export import Object = java.lang.Object;
        export import Array = java.lang.reflect.Array;
        export import Short = java.lang.Short;
        export import String = java.lang.String;
        export import Charset = java.nio.charset.Charset;
        export import StandardCharsets = java.nio.charset.StandardCharsets;
        export import AbstractCollection = java.util.AbstractCollection;
        export import AbstractList = java.util.AbstractList;
        export import AbstractMap = java.util.AbstractMap;
        export import AbstractSet = java.util.AbstractSet;
        export import ArrayList = java.util.ArrayList;
        export import Collection = java.util.Collection;
        export import Comparator = java.util.Comparator;
        export import BiConsumer = java.util.function_.BiConsumer;
        export import BiFunction = java.util.function_.BiFunction;
        export import BinaryOperator = java.util.function_.BinaryOperator;
        export import BiPredicate = java.util.function_.BiPredicate;
        export import Consumer = java.util.function_.Consumer;
        export import Function = java.util.function_.Function;
        export import Predicate = java.util.function_.Predicate;
        export import Supplier = java.util.function_.Supplier;
        export import UnaryOperator = java.util.function_.UnaryOperator;
        export import HashMap = java.util.HashMap;
        export import HashSet = java.util.HashSet;
        export import Iterator = java.util.Iterator;
        export import LinkedHashMap = java.util.LinkedHashMap;
        export import List = java.util.List;
        export import ListIterator = java.util.ListIterator;
        export import Map = java.util.Map;
        export import Map$Entry = java.util.Map$Entry;
        export import NoSuchElementException = java.util.NoSuchElementException;
        export import Set = java.util.Set;
        export import AbstractScriptEngine = javax.script.AbstractScriptEngine;
        export import Bindings = javax.script.Bindings;
        export import CompiledScript = javax.script.CompiledScript;
        export import ScriptContext = javax.script.ScriptContext;
        export import ScriptEngine = javax.script.ScriptEngine;
        export import ScriptEngineFactory = javax.script.ScriptEngineFactory;
        export import GComparator = org.apache.tinkerpop.gremlin.groovy.function_.GComparator;
        export import GFunction = org.apache.tinkerpop.gremlin.groovy.function_.GFunction;
        export import GSupplier = org.apache.tinkerpop.gremlin.groovy.function_.GSupplier;
        export import GUnaryOperator = org.apache.tinkerpop.gremlin.groovy.function_.GUnaryOperator;
        export import GremlinGroovyScriptEngine = org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
        export import ClusterCountMapReduce = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce;
        export import ClusterCountMapReduce$Builder = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterCountMapReduce$Builder;
        export import ClusterPopulationMapReduce = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce;
        export import ClusterPopulationMapReduce$Builder = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.ClusterPopulationMapReduce$Builder;
        export import PeerPressureVertexProgram = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram;
        export import PeerPressureVertexProgram$Builder = org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure.PeerPressureVertexProgram$Builder;
        export import ComputerResult = org.apache.tinkerpop.gremlin.process.computer.ComputerResult;
        export import GraphComputer = org.apache.tinkerpop.gremlin.process.computer.GraphComputer;
        export import GraphComputer$Exceptions = org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Exceptions;
        export import GraphComputer$Features = org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Features;
        export import GraphComputer$Persist = org.apache.tinkerpop.gremlin.process.computer.GraphComputer$Persist;
        export import GraphComputer$ResultGraph = org.apache.tinkerpop.gremlin.process.computer.GraphComputer$ResultGraph;
        export import KeyValue = org.apache.tinkerpop.gremlin.process.computer.KeyValue;
        export import MapReduce = org.apache.tinkerpop.gremlin.process.computer.MapReduce;
        export import MapReduce$MapEmitter = org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter;
        export import MapReduce$NullObject = org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject;
        export import MapReduce$ReduceEmitter = org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter;
        export import MapReduce$Stage = org.apache.tinkerpop.gremlin.process.computer.MapReduce$Stage;
        export import Memory = org.apache.tinkerpop.gremlin.process.computer.Memory;
        export import Memory$Admin = org.apache.tinkerpop.gremlin.process.computer.Memory$Admin;
        export import Memory$Exceptions = org.apache.tinkerpop.gremlin.process.computer.Memory$Exceptions;
        export import MessageCombiner = org.apache.tinkerpop.gremlin.process.computer.MessageCombiner;
        export import MessageScope = org.apache.tinkerpop.gremlin.process.computer.MessageScope;
        export import MessageScope$Global = org.apache.tinkerpop.gremlin.process.computer.MessageScope$Global;
        export import MessageScope$Local = org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local;
        export import MessageScope$Local$ReverseTraversalSupplier = org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier;
        export import Messenger = org.apache.tinkerpop.gremlin.process.computer.Messenger;
        export import PageRankMapReduce = org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce;
        export import PageRankMapReduce$Builder = org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMapReduce$Builder;
        export import PageRankMessageCombiner = org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankMessageCombiner;
        export import PageRankVertexProgram = org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram;
        export import PageRankVertexProgram$Builder = org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank.PageRankVertexProgram$Builder;
        export import SingleMessenger = org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger;
        export import TraversalVertexProgram = org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram;
        export import TraversalVertexProgram$Builder = org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder;
        export import TraversalVertexProgramMessageCombiner = org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgramMessageCombiner;
        export import TraverserExecutor = org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor;
        export import VertexTraversalSideEffects = org.apache.tinkerpop.gremlin.process.computer.traversal.VertexTraversalSideEffects;
        export import VertexProgram = org.apache.tinkerpop.gremlin.process.computer.VertexProgram;
        export import VertexProgram$Builder = org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Builder;
        export import VertexProgram$Features = org.apache.tinkerpop.gremlin.process.computer.VertexProgram$Features;
        export import Compare = org.apache.tinkerpop.gremlin.process.traversal.Compare;
        export import Contains = org.apache.tinkerpop.gremlin.process.traversal.Contains;
        export import __ = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__;
        export import DefaultGraphTraversal = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;
        export import EmptyGraphTraversal = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.EmptyGraphTraversal;
        export import GraphTraversal = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal;
        export import GraphTraversal$Admin = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin;
        export import GraphTraversalSource = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;
        export import GraphTraversalSource$Builder = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$Builder;
        export import GraphTraversalSource$GraphTraversalSourceStub = org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub;
        export import ComputerTraversalEngine = org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine;
        export import ComputerTraversalEngine$Builder = org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder;
        export import ComputerTraversalEngine$ComputerResultStrategy = org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$ComputerResultStrategy;
        export import StandardTraversalEngine = org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine;
        export import StandardTraversalEngine$Builder = org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder;
        export import Operator = org.apache.tinkerpop.gremlin.process.traversal.Operator;
        export import Order = org.apache.tinkerpop.gremlin.process.traversal.Order;
        export import P = org.apache.tinkerpop.gremlin.process.traversal.P;
        export import Path = org.apache.tinkerpop.gremlin.process.traversal.Path;
        export import Path$Exceptions = org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions;
        export import Scope = org.apache.tinkerpop.gremlin.process.traversal.Scope;
        export import Step = org.apache.tinkerpop.gremlin.process.traversal.Step;
        export import AbstractStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep;
        export import BulkSet = org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet;
        export import CollectingBarrierStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep;
        export import ComputerAwareStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep;
        export import ComputerAwareStep$EndStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep;
        export import ElementFunctionComparator = org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator;
        export import ElementValueComparator = org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator;
        export import EmptyPath = org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyPath;
        export import EmptyStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.EmptyStep;
        export import ExpandableStepIterator = org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator;
        export import HasContainer = org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;
        export import ImmutablePath = org.apache.tinkerpop.gremlin.process.traversal.step.util.ImmutablePath;
        export import MapHelper = org.apache.tinkerpop.gremlin.process.traversal.step.util.MapHelper;
        export import MutablePath = org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath;
        export import NoOpBarrierStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep;
        export import PathIdentityStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep;
        export import ReducingBarrierStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep;
        export import ReducingBarrierStep$DefaultMapReduce = org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce;
        export import ReducingBarrierStep$FinalGet = org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$FinalGet;
        export import SupplyingBarrierStep = org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep;
        export import TraversalComparator = org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator;
        export import Tree = org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree;
        export import ConjunctionStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ConjunctionStrategy;
        export import ElementIdStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy;
        export import ElementIdStrategy$Builder = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.ElementIdStrategy$Builder;
        export import EventStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy;
        export import EventStrategy$Builder = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$Builder;
        export import EventStrategy$EventStrategyCallback = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback;
        export import PartitionStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy;
        export import PartitionStrategy$Builder = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.PartitionStrategy$Builder;
        export import SubgraphStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy;
        export import SubgraphStrategy$Builder = org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy$Builder;
        export import ComputerVerificationException = org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException;
        export import ComputerVerificationStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationStrategy;
        export import LambdaRestrictionStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.LambdaRestrictionStrategy;
        export import ReadOnlyStrategy = org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy;
        export import Traversal = org.apache.tinkerpop.gremlin.process.traversal.Traversal;
        export import Traversal$Admin = org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin;
        export import Traversal$Exceptions = org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions;
        export import TraversalEngine = org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine;
        export import TraversalEngine$Builder = org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder;
        export import TraversalEngine$Type = org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Type;
        export import TraversalSideEffects = org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects;
        export import TraversalSideEffects$Exceptions = org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions;
        export import TraversalSource = org.apache.tinkerpop.gremlin.process.traversal.TraversalSource;
        export import TraversalSource$Builder = org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder;
        export import TraversalStrategies = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies;
        export import TraversalStrategies$GlobalCache = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache;
        export import TraversalStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy;
        export import TraversalStrategy$DecorationStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy;
        export import TraversalStrategy$FinalizationStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy;
        export import TraversalStrategy$OptimizationStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$OptimizationStrategy;
        export import TraversalStrategy$VendorOptimizationStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VendorOptimizationStrategy;
        export import TraversalStrategy$VerificationStrategy = org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy;
        export import Traverser = org.apache.tinkerpop.gremlin.process.traversal.Traverser;
        export import Traverser$Admin = org.apache.tinkerpop.gremlin.process.traversal.Traverser$Admin;
        export import TraverserGenerator = org.apache.tinkerpop.gremlin.process.traversal.TraverserGenerator;
        export import AndP = org.apache.tinkerpop.gremlin.process.traversal.util.AndP;
        export import ConjunctionP = org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP;
        export import DefaultTraversal = org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal;
        export import DefaultTraversalSideEffects = org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects;
        export import DefaultTraversalStrategies = org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies;
        export import DependantMutableMetrics = org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics;
        export import EmptyTraversal = org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal;
        export import EmptyTraversalSideEffects = org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalSideEffects;
        export import EmptyTraversalStrategies = org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversalStrategies;
        export import FastNoSuchElementException = org.apache.tinkerpop.gremlin.process.traversal.util.FastNoSuchElementException;
        export import ImmutableMetrics = org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics;
        export import Metrics = org.apache.tinkerpop.gremlin.process.traversal.util.Metrics;
        export import MutableMetrics = org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics;
        export import OrP = org.apache.tinkerpop.gremlin.process.traversal.util.OrP;
        export import SideEffectHelper = org.apache.tinkerpop.gremlin.process.traversal.util.SideEffectHelper;
        export import StandardTraversalMetrics = org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics;
        export import StepPosition = org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition;
        export import TraversalClassFunction = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction;
        export import TraversalHelper = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalHelper;
        export import TraversalMatrix = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix;
        export import TraversalMetrics = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics;
        export import TraversalObjectFunction = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction;
        export import TraversalP = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP;
        export import TraversalRing = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing;
        export import TraversalScriptFunction = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction;
        export import TraversalScriptHelper = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptHelper;
        export import TraversalUtil = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil;
        export import TraversalUtil$Multiple = org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple;
        export import Direction = org.apache.tinkerpop.gremlin.structure.Direction;
        export import Edge = org.apache.tinkerpop.gremlin.structure.Edge;
        export import Edge$Exceptions = org.apache.tinkerpop.gremlin.structure.Edge$Exceptions;
        export import Element = org.apache.tinkerpop.gremlin.structure.Element;
        export import Element$Exceptions = org.apache.tinkerpop.gremlin.structure.Element$Exceptions;
        export import Graph = org.apache.tinkerpop.gremlin.structure.Graph;
        export import Graph$Exceptions = org.apache.tinkerpop.gremlin.structure.Graph$Exceptions;
        export import Graph$Features = org.apache.tinkerpop.gremlin.structure.Graph$Features;
        export import Graph$Features$DataTypeFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures;
        export import Graph$Features$EdgeFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures;
        export import Graph$Features$EdgePropertyFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures;
        export import Graph$Features$ElementFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures;
        export import Graph$Features$FeatureSet = org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet;
        export import Graph$Features$GraphFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures;
        export import Graph$Features$PropertyFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures;
        export import Graph$Features$VariableFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures;
        export import Graph$Features$VertexFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures;
        export import Graph$Features$VertexPropertyFeatures = org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures;
        export import Graph$Hidden = org.apache.tinkerpop.gremlin.structure.Graph$Hidden;
        export import Graph$OptIn = org.apache.tinkerpop.gremlin.structure.Graph$OptIn;
        export import Graph$OptIns = org.apache.tinkerpop.gremlin.structure.Graph$OptIns;
        export import Graph$OptOut = org.apache.tinkerpop.gremlin.structure.Graph$OptOut;
        export import Graph$OptOuts = org.apache.tinkerpop.gremlin.structure.Graph$OptOuts;
        export import Graph$Variables = org.apache.tinkerpop.gremlin.structure.Graph$Variables;
        export import Graph$Variables$Exceptions = org.apache.tinkerpop.gremlin.structure.Graph$Variables$Exceptions;
        export import AbstractIoRegistry = org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry;
        export import GraphMigrator = org.apache.tinkerpop.gremlin.structure.io.GraphMigrator;
        export import GraphMLIo = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo;
        export import GraphMLIo$Builder = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder;
        export import GraphMLMapper = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper;
        export import GraphMLMapper$Builder = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder;
        export import GraphMLReader = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader;
        export import GraphMLReader$Builder = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder;
        export import GraphMLWriter = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter;
        export import GraphMLWriter$Builder = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder;
        export import GraphMLWriterHelper$IndentingXMLStreamWriter = org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter;
        export import GraphReader = org.apache.tinkerpop.gremlin.structure.io.GraphReader;
        export import GraphReader$ReaderBuilder = org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder;
        export import GraphSONIo = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo;
        export import GraphSONIo$Builder = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder;
        export import GraphSONMapper = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper;
        export import GraphSONMapper$Builder = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder;
        export import GraphSONReader = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader;
        export import GraphSONReader$Builder = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder;
        export import GraphSONTokens = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONTokens;
        export import GraphSONUtil = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONUtil;
        export import GraphSONVersion = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONVersion;
        export import GraphSONWriter = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter;
        export import GraphSONWriter$Builder = org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder;
        export import LegacyGraphSONReader = org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader;
        export import LegacyGraphSONReader$Builder = org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$Builder;
        export import LegacyGraphSONReader$GraphSONTokens = org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens;
        export import GraphWriter = org.apache.tinkerpop.gremlin.structure.io.GraphWriter;
        export import GraphWriter$WriterBuilder = org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder;
        export import GryoIo = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo;
        export import GryoIo$Builder = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder;
        export import GryoMapper = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper;
        export import GryoMapper$Builder = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoMapper$Builder;
        export import GryoPool = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool;
        export import GryoPool$Type = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool$Type;
        export import GryoReader = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader;
        export import GryoReader$Builder = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoReader$Builder;
        export import GryoWriter = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter;
        export import GryoWriter$Builder = org.apache.tinkerpop.gremlin.structure.io.gryo.GryoWriter$Builder;
        export import VertexByteArrayInputStream = org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream;
        export import VertexTerminator = org.apache.tinkerpop.gremlin.structure.io.gryo.VertexTerminator;
        export import Io = org.apache.tinkerpop.gremlin.structure.io.Io;
        export import Io$Builder = org.apache.tinkerpop.gremlin.structure.io.Io$Builder;
        export import Io$Exceptions = org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions;
        export import IoCore = org.apache.tinkerpop.gremlin.structure.io.IoCore;
        export import IoRegistry = org.apache.tinkerpop.gremlin.structure.io.IoRegistry;
        export import Mapper = org.apache.tinkerpop.gremlin.structure.io.Mapper;
        export import Mapper$Builder = org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder;
        export import Property = org.apache.tinkerpop.gremlin.structure.Property;
        export import Property$Exceptions = org.apache.tinkerpop.gremlin.structure.Property$Exceptions;
        export import PropertyType = org.apache.tinkerpop.gremlin.structure.PropertyType;
        export import T = org.apache.tinkerpop.gremlin.structure.T;
        export import Transaction = org.apache.tinkerpop.gremlin.structure.Transaction;
        export import Transaction$CLOSE_BEHAVIOR = org.apache.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR;
        export import Transaction$Exceptions = org.apache.tinkerpop.gremlin.structure.Transaction$Exceptions;
        export import Transaction$READ_WRITE_BEHAVIOR = org.apache.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR;
        export import Transaction$Status = org.apache.tinkerpop.gremlin.structure.Transaction$Status;
        export import Transaction$Workload = org.apache.tinkerpop.gremlin.structure.Transaction$Workload;
        export import AbstractTransaction = org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction;
        export import AbstractTransaction$TransactionException = org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException;
        export import Attachable = org.apache.tinkerpop.gremlin.structure.util.Attachable;
        export import Attachable$Exceptions = org.apache.tinkerpop.gremlin.structure.util.Attachable$Exceptions;
        export import Attachable$Method = org.apache.tinkerpop.gremlin.structure.util.Attachable$Method;
        export import Comparators = org.apache.tinkerpop.gremlin.structure.util.Comparators;
        export import DetachedEdge = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge;
        export import DetachedElement = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement;
        export import DetachedFactory = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedFactory;
        export import DetachedPath = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedPath;
        export import DetachedProperty = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty;
        export import DetachedVertex = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex;
        export import DetachedVertexProperty = org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty;
        export import ElementHelper = org.apache.tinkerpop.gremlin.structure.util.ElementHelper;
        export import FeatureDescriptor = org.apache.tinkerpop.gremlin.structure.util.FeatureDescriptor;
        export import GraphFactory = org.apache.tinkerpop.gremlin.structure.util.GraphFactory;
        export import GraphVariableHelper = org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper;
        export import Host = org.apache.tinkerpop.gremlin.structure.util.Host;
        export import StringFactory = org.apache.tinkerpop.gremlin.structure.util.StringFactory;
        export import Vertex = org.apache.tinkerpop.gremlin.structure.Vertex;
        export import Vertex$Exceptions = org.apache.tinkerpop.gremlin.structure.Vertex$Exceptions;
        export import VertexProperty = org.apache.tinkerpop.gremlin.structure.VertexProperty;
        export import VertexProperty$Cardinality = org.apache.tinkerpop.gremlin.structure.VertexProperty$Cardinality;
        export import VertexProperty$Exceptions = org.apache.tinkerpop.gremlin.structure.VertexProperty$Exceptions;
        export import TinkerComputerResult = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult;
        export import TinkerGraphComputer = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer;
        export import TinkerGraphView = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView;
        export import TinkerMapEmitter = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter;
        export import TinkerMemory = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory;
        export import TinkerMessenger = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger;
        export import TinkerReduceEmitter = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter;
        export import TinkerWorkerPool = org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool;
        export import TinkerEdge = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge;
        export import TinkerElement = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement;
        export import TinkerFactory = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory;
        export import TinkerGraph = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph;
        export import TinkerGraph$DefaultIdManager = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$DefaultIdManager;
        export import TinkerGraph$IdManager = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager;
        export import TinkerGraph$TinkerGraphEdgeFeatures = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures;
        export import TinkerGraph$TinkerGraphFeatures = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures;
        export import TinkerGraph$TinkerGraphGraphFeatures = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures;
        export import TinkerGraph$TinkerGraphVertexFeatures = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures;
        export import TinkerGraphVariables = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables;
        export import TinkerHelper = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper;
        export import TinkerProperty = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty;
        export import TinkerVertex = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex;
        export import TinkerVertexProperty = org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty;
        export import ArrayListSupplier = org.apache.tinkerpop.gremlin.util.function_.ArrayListSupplier;
        export import BulkSetSupplier = org.apache.tinkerpop.gremlin.util.function_.BulkSetSupplier;
        export import ChainedComparator = org.apache.tinkerpop.gremlin.util.function_.ChainedComparator;
        export import ConstantSupplier = org.apache.tinkerpop.gremlin.util.function_.ConstantSupplier;
        export import FunctionUtils = org.apache.tinkerpop.gremlin.util.function_.FunctionUtils;
        export import HashMapSupplier = org.apache.tinkerpop.gremlin.util.function_.HashMapSupplier;
        export import HashSetSupplier = org.apache.tinkerpop.gremlin.util.function_.HashSetSupplier;
        export import MeanNumberSupplier = org.apache.tinkerpop.gremlin.util.function_.MeanNumberSupplier;
        export import ScriptEngineLambda = org.apache.tinkerpop.gremlin.util.function_.ScriptEngineLambda;
        export import ThrowingBiConsumer = org.apache.tinkerpop.gremlin.util.function_.ThrowingBiConsumer;
        export import ThrowingConsumer = org.apache.tinkerpop.gremlin.util.function_.ThrowingConsumer;
        export import ThrowingFunction = org.apache.tinkerpop.gremlin.util.function_.ThrowingFunction;
        export import ThrowingSupplier = org.apache.tinkerpop.gremlin.util.function_.ThrowingSupplier;
        export import TraversableLambda = org.apache.tinkerpop.gremlin.util.function_.TraversableLambda;
        export import TreeSupplier = org.apache.tinkerpop.gremlin.util.function_.TreeSupplier;
        export import TriConsumer = org.apache.tinkerpop.gremlin.util.function_.TriConsumer;
        export import TriFunction = org.apache.tinkerpop.gremlin.util.function_.TriFunction;
        export import Gremlin = org.apache.tinkerpop.gremlin.util.Gremlin;
        export import ScriptEngineCache = org.apache.tinkerpop.gremlin.util.ScriptEngineCache;
        export import Serializer = org.apache.tinkerpop.gremlin.util.Serializer;
        export import TimeUtil = org.apache.tinkerpop.gremlin.util.TimeUtil;
        export import ClassNode = org.codehaus.groovy.ast.ClassNode;
        export import CompilerConfiguration = org.codehaus.groovy.control.CompilerConfiguration;
        export import CompilationCustomizer = org.codehaus.groovy.control.customizers.CompilationCustomizer;
        export import NullObject = org.codehaus.groovy.runtime.NullObject;
        export import Groovysh = org.codehaus.groovy.tools.shell.Groovysh;
        export import ManagedReference = org.codehaus.groovy.util.ManagedReference;
        export import ReferenceBundle = org.codehaus.groovy.util.ReferenceBundle;
        module co.redseal.gremlinnode.function_ {
            interface GlobFunction extends Java.java.util.function_.BiConsumer, Java.java.util.function_.BiFunction, Java.java.util.function_.BiPredicate, Java.java.util.function_.BinaryOperator, Java.java.util.function_.Consumer, Java.java.util.function_.Function, Java.java.util.function_.Predicate, Java.java.util.function_.Supplier, Java.java.util.function_.UnaryOperator, Java.org.apache.tinkerpop.gremlin.util.function_.TriConsumer {
                accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
                acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
                accept(arg0: object_t, arg1: object_t): void;
                acceptP(arg0: object_t, arg1: object_t): Promise<void>;
                accept(arg0: object_t): void;
                acceptP(arg0: object_t): Promise<void>;
                and(arg0: Java.BiPredicate): Java.BiPredicate;
                andP(arg0: Java.BiPredicate): Promise<Java.BiPredicate>;
                and(arg0: Java.Predicate): Java.Predicate;
                andP(arg0: Java.Predicate): Promise<Java.Predicate>;
                andThen(arg0: Java.TriConsumer): Java.TriConsumer;
                andThenP(arg0: Java.TriConsumer): Promise<Java.TriConsumer>;
                andThen(arg0: Java.GlobFunction): Java.GlobFunction;
                andThenP(arg0: Java.GlobFunction): Promise<Java.GlobFunction>;
                andThen(arg0: Java.BiConsumer): Java.GlobFunction;
                andThenP(arg0: Java.BiConsumer): Promise<Java.GlobFunction>;
                andThen(arg0: Java.Function): Java.GlobFunction;
                andThenP(arg0: Java.Function): Promise<Java.GlobFunction>;
                andThen(arg0: Java.Consumer): Java.GlobFunction;
                andThenP(arg0: Java.Consumer): Promise<Java.GlobFunction>;
                andThen(arg0: Java.BiConsumer): Java.BiConsumer;
                andThenP(arg0: Java.BiConsumer): Promise<Java.BiConsumer>;
                andThen(arg0: Java.Function): Java.BiFunction;
                andThenP(arg0: Java.Function): Promise<Java.BiFunction>;
                andThen(arg0: Java.Function): Java.Function;
                andThenP(arg0: Java.Function): Promise<Java.Function>;
                andThen(arg0: Java.Consumer): Java.Consumer;
                andThenP(arg0: Java.Consumer): Promise<Java.Consumer>;
                apply(arg0: object_t, arg1: object_t): object_t;
                applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
                compose(arg0: Java.Function): Java.Function;
                composeP(arg0: Java.Function): Promise<Java.Function>;
                get(): object_t;
                getP(): Promise<object_t>;
                negate(): Java.GlobFunction;
                negateP(): Promise<Java.GlobFunction>;
                negate(): Java.BiPredicate;
                negateP(): Promise<Java.BiPredicate>;
                negate(): Java.Predicate;
                negateP(): Promise<Java.Predicate>;
                or(arg0: Java.BiPredicate): Java.BiPredicate;
                orP(arg0: Java.BiPredicate): Promise<Java.BiPredicate>;
                or(arg0: Java.Predicate): Java.Predicate;
                orP(arg0: Java.Predicate): Promise<Java.Predicate>;
                test(arg0: object_t, arg1: object_t): boolean;
                testP(arg0: object_t, arg1: object_t): Promise<boolean>;
                test(arg0: object_t): boolean;
                testP(arg0: object_t): Promise<boolean>;
            }
            module GlobFunction {
                interface Static {
                }
            }
        }
        module co.redseal.gremlinnode.function_ {
            interface GroovyLambda extends Java.java.lang.Object {
                accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
                acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
                accept(arg0: object_t, arg1: object_t): void;
                acceptP(arg0: object_t, arg1: object_t): Promise<void>;
                accept(arg0: object_t): void;
                acceptP(arg0: object_t): Promise<void>;
                and(arg0: Java.BiPredicate): Java.BiPredicate;
                andP(arg0: Java.BiPredicate): Promise<Java.BiPredicate>;
                and(arg0: Java.Predicate): Java.Predicate;
                andP(arg0: Java.Predicate): Promise<Java.Predicate>;
                andThen(arg0: Java.TriConsumer): Java.TriConsumer;
                andThenP(arg0: Java.TriConsumer): Promise<Java.TriConsumer>;
                andThen(arg0: Java.GlobFunction): Java.GlobFunction;
                andThenP(arg0: Java.GlobFunction): Promise<Java.GlobFunction>;
                andThen(arg0: Java.BiConsumer): Java.GlobFunction;
                andThenP(arg0: Java.BiConsumer): Promise<Java.GlobFunction>;
                andThen(arg0: Java.Function): Java.GlobFunction;
                andThenP(arg0: Java.Function): Promise<Java.GlobFunction>;
                andThen(arg0: Java.Consumer): Java.GlobFunction;
                andThenP(arg0: Java.Consumer): Promise<Java.GlobFunction>;
                andThen(arg0: Java.BiConsumer): Java.BiConsumer;
                andThenP(arg0: Java.BiConsumer): Promise<Java.BiConsumer>;
                andThen(arg0: Java.Function): Java.BiFunction;
                andThenP(arg0: Java.Function): Promise<Java.BiFunction>;
                andThen(arg0: Java.Function): Java.Function;
                andThenP(arg0: Java.Function): Promise<Java.Function>;
                andThen(arg0: Java.Consumer): Java.Consumer;
                andThenP(arg0: Java.Consumer): Promise<Java.Consumer>;
                apply(arg0: object_t, arg1: object_t): object_t;
                applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
                compose(arg0: Java.Function): Java.Function;
                composeP(arg0: Java.Function): Promise<Java.Function>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                negate(): Java.GlobFunction;
                negateP(): Promise<Java.GlobFunction>;
                negate(): Java.BiPredicate;
                negateP(): Promise<Java.BiPredicate>;
                negate(): Java.Predicate;
                negateP(): Promise<Java.Predicate>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                or(arg0: Java.BiPredicate): Java.BiPredicate;
                orP(arg0: Java.BiPredicate): Promise<Java.BiPredicate>;
                or(arg0: Java.Predicate): Java.Predicate;
                orP(arg0: Java.Predicate): Promise<Java.Predicate>;
                test(arg0: object_t, arg1: object_t): boolean;
                testP(arg0: object_t, arg1: object_t): Promise<boolean>;
                test(arg0: object_t): boolean;
                testP(arg0: object_t): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GroovyLambda {
                interface Static {
                    new (arg0: string_t, arg1: Java.ScriptEngine): co.redseal.gremlinnode.function_.GroovyLambda;
                    new (arg0: string_t): co.redseal.gremlinnode.function_.GroovyLambda;
                    getDefaultEngine(): Java.ScriptEngine;
                    getDefaultEngineP(): Promise<Java.ScriptEngine>;
                }
            }
        }
        module co.redseal.gremlinnode.testing {
            interface TestClass extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TestClass {
                interface Static {
                    new (): co.redseal.gremlinnode.testing.TestClass;
                }
            }
        }
        module co.redseal.util {
            interface StringInputStream extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module StringInputStream {
                interface Static {
                    new (): co.redseal.util.StringInputStream;
                    from(arg0: string_t): Java.InputStream;
                    fromP(arg0: string_t): Promise<Java.InputStream>;
                }
            }
        }
        module groovy.lang {
            interface Binding extends Java.groovy.lang.GroovyObjectSupport {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getMetaClass(): Java.MetaClass;
                getMetaClassP(): Promise<Java.MetaClass>;
                getProperty(arg0: string_t): object_t;
                getPropertyP(arg0: string_t): Promise<object_t>;
                getVariable(arg0: string_t): object_t;
                getVariableP(arg0: string_t): Promise<object_t>;
                getVariables(): Java.Map;
                getVariablesP(): Promise<Java.Map>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasVariable(arg0: string_t): boolean;
                hasVariableP(arg0: string_t): Promise<boolean>;
                invokeMethod(arg0: string_t, arg1: object_t): object_t;
                invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setMetaClass(arg0: Java.MetaClass): void;
                setMetaClassP(arg0: Java.MetaClass): Promise<void>;
                setProperty(arg0: string_t, arg1: object_t): void;
                setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
                setVariable(arg0: string_t, arg1: object_t): void;
                setVariableP(arg0: string_t, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Binding {
                interface Static {
                    new (arg0: array_t<string_t>): groovy.lang.Binding;
                    new (arg0: Java.Map): groovy.lang.Binding;
                    new (): groovy.lang.Binding;
                }
            }
        }
        module groovy.lang {
            interface Closure extends Java.groovy.lang.GroovyObjectSupport {
                asWritable(): Java.Closure;
                asWritableP(): Promise<Java.Closure>;
                call(...arg0: object_t[]): object_t;
                call(arg0: object_array_t): object_t;
                callP(...arg0: object_t[]): Promise<object_t>;
                callP(arg0: object_array_t): Promise<object_t>;
                call(arg0: object_t): object_t;
                callP(arg0: object_t): Promise<object_t>;
                call(): object_t;
                callP(): Promise<object_t>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                curry(...arg0: object_t[]): Java.Closure;
                curry(arg0: object_array_t): Java.Closure;
                curryP(...arg0: object_t[]): Promise<Java.Closure>;
                curryP(arg0: object_array_t): Promise<Java.Closure>;
                curry(arg0: object_t): Java.Closure;
                curryP(arg0: object_t): Promise<Java.Closure>;
                dehydrate(): Java.Closure;
                dehydrateP(): Promise<Java.Closure>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDelegate(): object_t;
                getDelegateP(): Promise<object_t>;
                getDirective(): number;
                getDirectiveP(): Promise<number>;
                getMaximumNumberOfParameters(): number;
                getMaximumNumberOfParametersP(): Promise<number>;
                getMetaClass(): Java.MetaClass;
                getMetaClassP(): Promise<Java.MetaClass>;
                getOwner(): object_t;
                getOwnerP(): Promise<object_t>;
                getParameterTypes(): Java.Class[];
                getParameterTypesP(): Promise<Java.Class[]>;
                getProperty(arg0: string_t): object_t;
                getPropertyP(arg0: string_t): Promise<object_t>;
                getResolveStrategy(): number;
                getResolveStrategyP(): Promise<number>;
                getThisObject(): object_t;
                getThisObjectP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                invokeMethod(arg0: string_t, arg1: object_t): object_t;
                invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
                isCase(arg0: object_t): boolean;
                isCaseP(arg0: object_t): Promise<boolean>;
                leftShift(arg0: Java.Closure): Java.Closure;
                leftShiftP(arg0: Java.Closure): Promise<Java.Closure>;
                leftShift(arg0: object_t): object_t;
                leftShiftP(arg0: object_t): Promise<object_t>;
                memoize(): Java.Closure;
                memoizeP(): Promise<Java.Closure>;
                memoizeAtLeast(arg0: integer_t): Java.Closure;
                memoizeAtLeastP(arg0: integer_t): Promise<Java.Closure>;
                memoizeAtMost(arg0: integer_t): Java.Closure;
                memoizeAtMostP(arg0: integer_t): Promise<Java.Closure>;
                memoizeBetween(arg0: integer_t, arg1: integer_t): Java.Closure;
                memoizeBetweenP(arg0: integer_t, arg1: integer_t): Promise<Java.Closure>;
                ncurry(arg0: integer_t, ...arg1: object_t[]): Java.Closure;
                ncurry(arg0: integer_t, arg1: object_array_t): Java.Closure;
                ncurryP(arg0: integer_t, ...arg1: object_t[]): Promise<Java.Closure>;
                ncurryP(arg0: integer_t, arg1: object_array_t): Promise<Java.Closure>;
                ncurry(arg0: integer_t, arg1: object_t): Java.Closure;
                ncurryP(arg0: integer_t, arg1: object_t): Promise<Java.Closure>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                rcurry(...arg0: object_t[]): Java.Closure;
                rcurry(arg0: object_array_t): Java.Closure;
                rcurryP(...arg0: object_t[]): Promise<Java.Closure>;
                rcurryP(arg0: object_array_t): Promise<Java.Closure>;
                rcurry(arg0: object_t): Java.Closure;
                rcurryP(arg0: object_t): Promise<Java.Closure>;
                rehydrate(arg0: object_t, arg1: object_t, arg2: object_t): Java.Closure;
                rehydrateP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<Java.Closure>;
                rightShift(arg0: Java.Closure): Java.Closure;
                rightShiftP(arg0: Java.Closure): Promise<Java.Closure>;
                run(): void;
                runP(): Promise<void>;
                setDelegate(arg0: object_t): void;
                setDelegateP(arg0: object_t): Promise<void>;
                setDirective(arg0: integer_t): void;
                setDirectiveP(arg0: integer_t): Promise<void>;
                setMetaClass(arg0: Java.MetaClass): void;
                setMetaClassP(arg0: Java.MetaClass): Promise<void>;
                setProperty(arg0: string_t, arg1: object_t): void;
                setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
                setResolveStrategy(arg0: integer_t): void;
                setResolveStrategyP(arg0: integer_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                trampoline(...arg0: object_t[]): Java.Closure;
                trampoline(arg0: object_array_t): Java.Closure;
                trampolineP(...arg0: object_t[]): Promise<Java.Closure>;
                trampolineP(arg0: object_array_t): Promise<Java.Closure>;
                trampoline(): Java.Closure;
                trampolineP(): Promise<Java.Closure>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Closure {
                interface Static {
                    OWNER_FIRST: number;
                    DELEGATE_FIRST: number;
                    OWNER_ONLY: number;
                    DELEGATE_ONLY: number;
                    TO_SELF: number;
                    DONE: number;
                    SKIP: number;
                    IDENTITY: Java.Closure;
                    new (arg0: object_t, arg1: object_t): groovy.lang.Closure;
                    new (arg0: object_t): groovy.lang.Closure;
                }
            }
        }
        module groovy.lang {
            interface DelegatingMetaClass extends Java.java.lang.Object, Java.groovy.lang.MetaClass {
                addMetaBeanProperty(arg0: Java.MetaBeanProperty): void;
                addMetaBeanPropertyP(arg0: Java.MetaBeanProperty): Promise<void>;
                addMetaMethod(arg0: Java.MetaMethod): void;
                addMetaMethodP(arg0: Java.MetaMethod): Promise<void>;
                addNewInstanceMethod(arg0: object_t): void;
                addNewInstanceMethodP(arg0: object_t): Promise<void>;
                addNewStaticMethod(arg0: object_t): void;
                addNewStaticMethodP(arg0: object_t): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getAdaptee(): Java.MetaClass;
                getAdapteeP(): Promise<Java.MetaClass>;
                getAttribute(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: boolean_t): object_t;
                getAttributeP(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: boolean_t): Promise<object_t>;
                getAttribute(arg0: object_t, arg1: string_t): object_t;
                getAttributeP(arg0: object_t, arg1: string_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getClassNode(): Java.ClassNode;
                getClassNodeP(): Promise<Java.ClassNode>;
                getMetaClass(): Java.MetaClass;
                getMetaClassP(): Promise<Java.MetaClass>;
                getMetaMethod(arg0: string_t, arg1: object_array_t): Java.MetaMethod;
                getMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<Java.MetaMethod>;
                getMetaMethods(): Java.List;
                getMetaMethodsP(): Promise<Java.List>;
                getMetaProperty(arg0: string_t): Java.MetaProperty;
                getMetaPropertyP(arg0: string_t): Promise<Java.MetaProperty>;
                getMethods(): Java.List;
                getMethodsP(): Promise<Java.List>;
                getProperties(): Java.List;
                getPropertiesP(): Promise<Java.List>;
                getProperty(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): object_t;
                getPropertyP(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): Promise<object_t>;
                getProperty(arg0: object_t, arg1: string_t): object_t;
                getPropertyP(arg0: object_t, arg1: string_t): Promise<object_t>;
                getProperty(arg0: string_t): object_t;
                getPropertyP(arg0: string_t): Promise<object_t>;
                getStaticMetaMethod(arg0: string_t, arg1: object_array_t): Java.MetaMethod;
                getStaticMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<Java.MetaMethod>;
                getStaticMetaMethod(arg0: string_t, arg1: array_t<Java.Class>): Java.MetaMethod;
                getStaticMetaMethodP(arg0: string_t, arg1: array_t<Java.Class>): Promise<Java.MetaMethod>;
                getTheClass(): Java.Class;
                getTheClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasProperty(arg0: object_t, arg1: string_t): Java.MetaProperty;
                hasPropertyP(arg0: object_t, arg1: string_t): Promise<Java.MetaProperty>;
                initialize(): void;
                initializeP(): Promise<void>;
                invokeConstructor(arg0: object_array_t): object_t;
                invokeConstructorP(arg0: object_array_t): Promise<object_t>;
                invokeMethod(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): object_t;
                invokeMethodP(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): Promise<object_t>;
                invokeMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
                invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
                invokeMethod(arg0: object_t, arg1: string_t, arg2: object_t): object_t;
                invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<object_t>;
                invokeMethod(arg0: string_t, arg1: object_t): object_t;
                invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
                invokeMissingMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
                invokeMissingMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
                invokeMissingProperty(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): object_t;
                invokeMissingPropertyP(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): Promise<object_t>;
                invokeStaticMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
                invokeStaticMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
                isGroovyObject(): boolean;
                isGroovyObjectP(): Promise<boolean>;
                isModified(): boolean;
                isModifiedP(): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                pickMethod(arg0: string_t, arg1: array_t<Java.Class>): Java.MetaMethod;
                pickMethodP(arg0: string_t, arg1: array_t<Java.Class>): Promise<Java.MetaMethod>;
                respondsTo(arg0: object_t, arg1: string_t, arg2: object_array_t): Java.List;
                respondsToP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<Java.List>;
                respondsTo(arg0: object_t, arg1: string_t): Java.List;
                respondsToP(arg0: object_t, arg1: string_t): Promise<Java.List>;
                selectConstructorAndTransformArguments(arg0: integer_t, arg1: object_array_t): number;
                selectConstructorAndTransformArgumentsP(arg0: integer_t, arg1: object_array_t): Promise<number>;
                setAdaptee(arg0: Java.MetaClass): void;
                setAdapteeP(arg0: Java.MetaClass): Promise<void>;
                setAttribute(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
                setAttributeP(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
                setAttribute(arg0: object_t, arg1: string_t, arg2: object_t): void;
                setAttributeP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
                setMetaClass(arg0: Java.MetaClass): void;
                setMetaClassP(arg0: Java.MetaClass): Promise<void>;
                setProperty(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
                setPropertyP(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
                setProperty(arg0: object_t, arg1: string_t, arg2: object_t): void;
                setPropertyP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
                setProperty(arg0: string_t, arg1: object_t): void;
                setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DelegatingMetaClass {
                interface Static {
                    new (arg0: Java.MetaClass): groovy.lang.DelegatingMetaClass;
                    new (arg0: Java.Class): groovy.lang.DelegatingMetaClass;
                }
            }
        }
        module groovy.lang {
            interface GroovyClassLoader extends Java.java.lang.ClassLoader {
                addClasspath(arg0: string_t): void;
                addClasspathP(arg0: string_t): Promise<void>;
                addURL(arg0: object_t): void;
                addURLP(arg0: object_t): Promise<void>;
                clearAssertionStatus(): void;
                clearAssertionStatusP(): Promise<void>;
                clearCache(): void;
                clearCacheP(): Promise<void>;
                close(): void;
                closeP(): Promise<void>;
                defineClass(arg0: Java.ClassNode, arg1: string_t, arg2: string_t): Java.Class;
                defineClassP(arg0: Java.ClassNode, arg1: string_t, arg2: string_t): Promise<Java.Class>;
                defineClass(arg0: string_t, arg1: object_array_t): Java.Class;
                defineClassP(arg0: string_t, arg1: object_array_t): Promise<Java.Class>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                findResource(arg0: string_t): object_t;
                findResourceP(arg0: string_t): Promise<object_t>;
                findResources(arg0: string_t): object_t;
                findResourcesP(arg0: string_t): Promise<object_t>;
                generateScriptName(): string;
                generateScriptNameP(): Promise<string>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getLoadedClasses(): Java.Class[];
                getLoadedClassesP(): Promise<Java.Class[]>;
                getParent(): Java.ClassLoader;
                getParentP(): Promise<Java.ClassLoader>;
                getResource(arg0: string_t): object_t;
                getResourceP(arg0: string_t): Promise<object_t>;
                getResourceAsStream(arg0: string_t): Java.InputStream;
                getResourceAsStreamP(arg0: string_t): Promise<Java.InputStream>;
                getResourceLoader(): Java.GroovyResourceLoader;
                getResourceLoaderP(): Promise<Java.GroovyResourceLoader>;
                getResources(arg0: string_t): object_t;
                getResourcesP(arg0: string_t): Promise<object_t>;
                getURLs(): object_t[];
                getURLsP(): Promise<object_t[]>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isShouldRecompile(): boolean;
                isShouldRecompileP(): Promise<boolean>;
                loadClass(arg0: string_t, arg1: boolean_t, arg2: boolean_t, arg3: boolean_t): Java.Class;
                loadClassP(arg0: string_t, arg1: boolean_t, arg2: boolean_t, arg3: boolean_t): Promise<Java.Class>;
                loadClass(arg0: string_t, arg1: boolean_t, arg2: boolean_t): Java.Class;
                loadClassP(arg0: string_t, arg1: boolean_t, arg2: boolean_t): Promise<Java.Class>;
                loadClass(arg0: string_t): Java.Class;
                loadClassP(arg0: string_t): Promise<Java.Class>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                parseClass(arg0: Java.InputStream, arg1: string_t): Java.Class;
                parseClassP(arg0: Java.InputStream, arg1: string_t): Promise<Java.Class>;
                parseClass(arg0: string_t, arg1: string_t): Java.Class;
                parseClassP(arg0: string_t, arg1: string_t): Promise<Java.Class>;
                parseClass(arg0: Java.GroovyCodeSource, arg1: boolean_t): Java.Class;
                parseClassP(arg0: Java.GroovyCodeSource, arg1: boolean_t): Promise<Java.Class>;
                parseClass(arg0: Java.GroovyCodeSource): Java.Class;
                parseClassP(arg0: Java.GroovyCodeSource): Promise<Java.Class>;
                parseClass(arg0: string_t): Java.Class;
                parseClassP(arg0: string_t): Promise<Java.Class>;
                parseClass(arg0: object_t): Java.Class;
                parseClassP(arg0: object_t): Promise<Java.Class>;
                setClassAssertionStatus(arg0: string_t, arg1: boolean_t): void;
                setClassAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
                setDefaultAssertionStatus(arg0: boolean_t): void;
                setDefaultAssertionStatusP(arg0: boolean_t): Promise<void>;
                setPackageAssertionStatus(arg0: string_t, arg1: boolean_t): void;
                setPackageAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
                setResourceLoader(arg0: Java.GroovyResourceLoader): void;
                setResourceLoaderP(arg0: Java.GroovyResourceLoader): Promise<void>;
                setShouldRecompile(arg0: boolean_t): void;
                setShouldRecompileP(arg0: boolean_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GroovyClassLoader {
                interface Static {
                    new (arg0: Java.ClassLoader, arg1: Java.CompilerConfiguration, arg2: boolean_t): groovy.lang.GroovyClassLoader;
                    new (arg0: Java.ClassLoader, arg1: Java.CompilerConfiguration): groovy.lang.GroovyClassLoader;
                    new (arg0: Java.GroovyClassLoader): groovy.lang.GroovyClassLoader;
                    new (arg0: Java.ClassLoader): groovy.lang.GroovyClassLoader;
                    new (): groovy.lang.GroovyClassLoader;
                    getSystemClassLoader(): Java.ClassLoader;
                    getSystemClassLoaderP(): Promise<Java.ClassLoader>;
                    getSystemResource(arg0: string_t): object_t;
                    getSystemResourceP(arg0: string_t): Promise<object_t>;
                    getSystemResourceAsStream(arg0: string_t): Java.InputStream;
                    getSystemResourceAsStreamP(arg0: string_t): Promise<Java.InputStream>;
                    getSystemResources(arg0: string_t): object_t;
                    getSystemResourcesP(arg0: string_t): Promise<object_t>;
                    newInstance(arg0: object_array_t, arg1: Java.ClassLoader): object_t;
                    newInstanceP(arg0: object_array_t, arg1: Java.ClassLoader): Promise<object_t>;
                    newInstance(arg0: object_array_t): object_t;
                    newInstanceP(arg0: object_array_t): Promise<object_t>;
                }
            }
        }
        module groovy.lang {
            interface GroovyCodeSource extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getFile(): object_t;
                getFileP(): Promise<object_t>;
                getName(): string;
                getNameP(): Promise<string>;
                getScriptText(): string;
                getScriptTextP(): Promise<string>;
                getURL(): object_t;
                getURLP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isCachable(): boolean;
                isCachableP(): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setCachable(arg0: boolean_t): void;
                setCachableP(arg0: boolean_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GroovyCodeSource {
                interface Static {
                    new (arg0: string_t, arg1: string_t, arg2: string_t): groovy.lang.GroovyCodeSource;
                    new (arg0: object_t, arg1: string_t, arg2: string_t): groovy.lang.GroovyCodeSource;
                    new (arg0: object_t, arg1: string_t): groovy.lang.GroovyCodeSource;
                    new (arg0: object_t): groovy.lang.GroovyCodeSource;
                    new (arg0: object_t): groovy.lang.GroovyCodeSource;
                    new (arg0: object_t): groovy.lang.GroovyCodeSource;
                }
            }
        }
        module groovy.lang {
            interface GroovyObjectSupport extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getMetaClass(): Java.MetaClass;
                getMetaClassP(): Promise<Java.MetaClass>;
                getProperty(arg0: string_t): object_t;
                getPropertyP(arg0: string_t): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                invokeMethod(arg0: string_t, arg1: object_t): object_t;
                invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setMetaClass(arg0: Java.MetaClass): void;
                setMetaClassP(arg0: Java.MetaClass): Promise<void>;
                setProperty(arg0: string_t, arg1: object_t): void;
                setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GroovyObjectSupport {
                interface Static {
                    new (): groovy.lang.GroovyObjectSupport;
                }
            }
        }
        module groovy.lang {
            interface GroovyResourceLoader extends Java.java.lang.Object {
                loadGroovySource(arg0: string_t): object_t;
                loadGroovySourceP(arg0: string_t): Promise<object_t>;
            }
            module GroovyResourceLoader {
                interface Static {
                }
            }
        }
        module groovy.lang {
            interface IntRange extends Java.java.util.AbstractList, Java.groovy.lang.Range {
                add(arg0: integer_t, arg1: object_t): void;
                addP(arg0: integer_t, arg1: object_t): Promise<void>;
                add(arg0: object_t): boolean;
                addP(arg0: object_t): Promise<boolean>;
                addAll(arg0: integer_t, arg1: Java.Collection): boolean;
                addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
                addAll(arg0: Java.Collection): boolean;
                addAllP(arg0: Java.Collection): Promise<boolean>;
                clear(): void;
                clearP(): Promise<void>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                containsAll(arg0: Java.Collection): boolean;
                containsAllP(arg0: Java.Collection): Promise<boolean>;
                containsWithinBounds(arg0: object_t): boolean;
                containsWithinBoundsP(arg0: object_t): Promise<boolean>;
                equals(arg0: Java.IntRange): boolean;
                equalsP(arg0: Java.IntRange): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                get(arg0: integer_t): number;
                getP(arg0: integer_t): Promise<number>;
                get(arg0: integer_t): object_t;
                getP(arg0: integer_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getFrom(): object_t;
                getFromP(): Promise<object_t>;
                getFrom(): number;
                getFromP(): Promise<number>;
                getFromInt(): number;
                getFromIntP(): Promise<number>;
                getInclusive(): boolean;
                getInclusiveP(): Promise<boolean>;
                getTo(): object_t;
                getToP(): Promise<object_t>;
                getTo(): number;
                getToP(): Promise<number>;
                getToInt(): number;
                getToIntP(): Promise<number>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                indexOf(arg0: object_t): number;
                indexOfP(arg0: object_t): Promise<number>;
                inspect(): string;
                inspectP(): Promise<string>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                isReverse(): boolean;
                isReverseP(): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                lastIndexOf(arg0: object_t): number;
                lastIndexOfP(arg0: object_t): Promise<number>;
                listIterator(arg0: integer_t): Java.ListIterator;
                listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
                listIterator(): Java.ListIterator;
                listIteratorP(): Promise<Java.ListIterator>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                parallelStream(): object_t;
                parallelStreamP(): Promise<object_t>;
                remove(arg0: object_t): boolean;
                removeP(arg0: object_t): Promise<boolean>;
                remove(arg0: integer_t): object_t;
                removeP(arg0: integer_t): Promise<object_t>;
                removeAll(arg0: Java.Collection): boolean;
                removeAllP(arg0: Java.Collection): Promise<boolean>;
                removeIf(arg0: Java.Predicate): boolean;
                removeIfP(arg0: Java.Predicate): Promise<boolean>;
                replaceAll(arg0: Java.UnaryOperator): void;
                replaceAllP(arg0: Java.UnaryOperator): Promise<void>;
                retainAll(arg0: Java.Collection): boolean;
                retainAllP(arg0: Java.Collection): Promise<boolean>;
                set(arg0: integer_t, arg1: object_t): object_t;
                setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
                size(): number;
                sizeP(): Promise<number>;
                sort(arg0: Java.Comparator): void;
                sortP(arg0: Java.Comparator): Promise<void>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                step(arg0: integer_t, arg1: Java.Closure): void;
                stepP(arg0: integer_t, arg1: Java.Closure): Promise<void>;
                step(arg0: integer_t): Java.List;
                stepP(arg0: integer_t): Promise<Java.List>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                subList(arg0: integer_t, arg1: integer_t): Java.List;
                subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
                subListBorders(arg0: integer_t): object_t;
                subListBordersP(arg0: integer_t): Promise<object_t>;
                toArray(arg0: object_array_t): object_t[];
                toArrayP(arg0: object_array_t): Promise<object_t[]>;
                toArray(): object_t[];
                toArrayP(): Promise<object_t[]>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module IntRange {
                interface Static {
                    new (arg0: boolean_t, arg1: integer_t, arg2: integer_t): groovy.lang.IntRange;
                    new (arg0: integer_t, arg1: integer_t): groovy.lang.IntRange;
                }
            }
        }
        module groovy.lang {
            interface MetaBeanProperty extends Java.groovy.lang.MetaProperty {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getField(): object_t;
                getFieldP(): Promise<object_t>;
                getGetter(): Java.MetaMethod;
                getGetterP(): Promise<Java.MetaMethod>;
                getModifiers(): number;
                getModifiersP(): Promise<number>;
                getName(): string;
                getNameP(): Promise<string>;
                getProperty(arg0: object_t): object_t;
                getPropertyP(arg0: object_t): Promise<object_t>;
                getSetter(): Java.MetaMethod;
                getSetterP(): Promise<Java.MetaMethod>;
                getType(): Java.Class;
                getTypeP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setField(arg0: object_t): void;
                setFieldP(arg0: object_t): Promise<void>;
                setProperty(arg0: object_t, arg1: object_t): void;
                setPropertyP(arg0: object_t, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MetaBeanProperty {
                interface Static {
                    PROPERTY_SET_PREFIX: string;
                    new (arg0: string_t, arg1: Java.Class, arg2: Java.MetaMethod, arg3: Java.MetaMethod): groovy.lang.MetaBeanProperty;
                    getGetterName(arg0: string_t, arg1: Java.Class): string;
                    getGetterNameP(arg0: string_t, arg1: Java.Class): Promise<string>;
                    getSetterName(arg0: string_t): string;
                    getSetterNameP(arg0: string_t): Promise<string>;
                }
            }
        }
        module groovy.lang {
            interface MetaClass extends Java.java.lang.Object {
                getAttribute(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: boolean_t): object_t;
                getAttributeP(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: boolean_t): Promise<object_t>;
                getAttribute(arg0: object_t, arg1: string_t): object_t;
                getAttributeP(arg0: object_t, arg1: string_t): Promise<object_t>;
                getClassNode(): Java.ClassNode;
                getClassNodeP(): Promise<Java.ClassNode>;
                getMetaMethod(arg0: string_t, arg1: object_array_t): Java.MetaMethod;
                getMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<Java.MetaMethod>;
                getMetaMethods(): Java.List;
                getMetaMethodsP(): Promise<Java.List>;
                getMetaProperty(arg0: string_t): Java.MetaProperty;
                getMetaPropertyP(arg0: string_t): Promise<Java.MetaProperty>;
                getMethods(): Java.List;
                getMethodsP(): Promise<Java.List>;
                getProperties(): Java.List;
                getPropertiesP(): Promise<Java.List>;
                getProperty(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): object_t;
                getPropertyP(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: boolean_t, arg4: boolean_t): Promise<object_t>;
                getProperty(arg0: object_t, arg1: string_t): object_t;
                getPropertyP(arg0: object_t, arg1: string_t): Promise<object_t>;
                getStaticMetaMethod(arg0: string_t, arg1: object_array_t): Java.MetaMethod;
                getStaticMetaMethodP(arg0: string_t, arg1: object_array_t): Promise<Java.MetaMethod>;
                getTheClass(): Java.Class;
                getTheClassP(): Promise<Java.Class>;
                hasProperty(arg0: object_t, arg1: string_t): Java.MetaProperty;
                hasPropertyP(arg0: object_t, arg1: string_t): Promise<Java.MetaProperty>;
                initialize(): void;
                initializeP(): Promise<void>;
                invokeConstructor(arg0: object_array_t): object_t;
                invokeConstructorP(arg0: object_array_t): Promise<object_t>;
                invokeMethod(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): object_t;
                invokeMethodP(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_array_t, arg4: boolean_t, arg5: boolean_t): Promise<object_t>;
                invokeMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
                invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
                invokeMethod(arg0: object_t, arg1: string_t, arg2: object_t): object_t;
                invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<object_t>;
                invokeMissingMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
                invokeMissingMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
                invokeMissingProperty(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): object_t;
                invokeMissingPropertyP(arg0: object_t, arg1: string_t, arg2: object_t, arg3: boolean_t): Promise<object_t>;
                invokeStaticMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
                invokeStaticMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
                pickMethod(arg0: string_t, arg1: array_t<Java.Class>): Java.MetaMethod;
                pickMethodP(arg0: string_t, arg1: array_t<Java.Class>): Promise<Java.MetaMethod>;
                respondsTo(arg0: object_t, arg1: string_t, arg2: object_array_t): Java.List;
                respondsToP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<Java.List>;
                respondsTo(arg0: object_t, arg1: string_t): Java.List;
                respondsToP(arg0: object_t, arg1: string_t): Promise<Java.List>;
                selectConstructorAndTransformArguments(arg0: integer_t, arg1: object_array_t): number;
                selectConstructorAndTransformArgumentsP(arg0: integer_t, arg1: object_array_t): Promise<number>;
                setAttribute(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
                setAttributeP(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
                setAttribute(arg0: object_t, arg1: string_t, arg2: object_t): void;
                setAttributeP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
                setProperty(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): void;
                setPropertyP(arg0: Java.Class, arg1: object_t, arg2: string_t, arg3: object_t, arg4: boolean_t, arg5: boolean_t): Promise<void>;
                setProperty(arg0: object_t, arg1: string_t, arg2: object_t): void;
                setPropertyP(arg0: object_t, arg1: string_t, arg2: object_t): Promise<void>;
            }
            module MetaClass {
                interface Static {
                }
            }
        }
        module groovy.lang {
            interface MetaMethod extends Java.java.lang.Object {
                checkParameters(arg0: array_t<Java.Class>): void;
                checkParametersP(arg0: array_t<Java.Class>): Promise<void>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                coerceArgumentsToClasses(arg0: object_array_t): object_t[];
                coerceArgumentsToClassesP(arg0: object_array_t): Promise<object_t[]>;
                correctArguments(arg0: object_array_t): object_t[];
                correctArgumentsP(arg0: object_array_t): Promise<object_t[]>;
                doMethodInvoke(arg0: object_t, arg1: object_array_t): object_t;
                doMethodInvokeP(arg0: object_t, arg1: object_array_t): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): object_t;
                getDeclaringClassP(): Promise<object_t>;
                getDescriptor(): string;
                getDescriptorP(): Promise<string>;
                getModifiers(): number;
                getModifiersP(): Promise<number>;
                getMopName(): string;
                getMopNameP(): Promise<string>;
                getName(): string;
                getNameP(): Promise<string>;
                getNativeParameterTypes(): Java.Class[];
                getNativeParameterTypesP(): Promise<Java.Class[]>;
                getParameterTypes(): object_t[];
                getParameterTypesP(): Promise<object_t[]>;
                getReturnType(): Java.Class;
                getReturnTypeP(): Promise<Java.Class>;
                getSignature(): string;
                getSignatureP(): Promise<string>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                invoke(arg0: object_t, arg1: object_array_t): object_t;
                invokeP(arg0: object_t, arg1: object_array_t): Promise<object_t>;
                isAbstract(): boolean;
                isAbstractP(): Promise<boolean>;
                isCacheable(): boolean;
                isCacheableP(): Promise<boolean>;
                isMethod(arg0: Java.MetaMethod): boolean;
                isMethodP(arg0: Java.MetaMethod): Promise<boolean>;
                isPrivate(): boolean;
                isPrivateP(): Promise<boolean>;
                isProtected(): boolean;
                isProtectedP(): Promise<boolean>;
                isPublic(): boolean;
                isPublicP(): Promise<boolean>;
                isSame(arg0: Java.MetaMethod): boolean;
                isSameP(arg0: Java.MetaMethod): Promise<boolean>;
                isStatic(): boolean;
                isStaticP(): Promise<boolean>;
                isValidExactMethod(arg0: object_array_t): boolean;
                isValidExactMethodP(arg0: object_array_t): Promise<boolean>;
                isValidExactMethod(arg0: array_t<Java.Class>): boolean;
                isValidExactMethodP(arg0: array_t<Java.Class>): Promise<boolean>;
                isValidMethod(arg0: object_array_t): boolean;
                isValidMethodP(arg0: object_array_t): Promise<boolean>;
                isValidMethod(arg0: array_t<Java.Class>): boolean;
                isValidMethodP(arg0: array_t<Java.Class>): Promise<boolean>;
                isVargsMethod(arg0: object_array_t): boolean;
                isVargsMethodP(arg0: object_array_t): Promise<boolean>;
                isVargsMethod(): boolean;
                isVargsMethodP(): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                processDoMethodInvokeException(arg0: object_t, arg1: object_t, arg2: object_array_t): object_t;
                processDoMethodInvokeExceptionP(arg0: object_t, arg1: object_t, arg2: object_array_t): Promise<object_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MetaMethod {
                interface Static {
                    new (arg0: array_t<Java.Class>): groovy.lang.MetaMethod;
                    new (): groovy.lang.MetaMethod;
                }
            }
        }
        module groovy.lang {
            interface MetaProperty extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getModifiers(): number;
                getModifiersP(): Promise<number>;
                getName(): string;
                getNameP(): Promise<string>;
                getProperty(arg0: object_t): object_t;
                getPropertyP(arg0: object_t): Promise<object_t>;
                getType(): Java.Class;
                getTypeP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setProperty(arg0: object_t, arg1: object_t): void;
                setPropertyP(arg0: object_t, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MetaProperty {
                interface Static {
                    PROPERTY_SET_PREFIX: string;
                    new (arg0: string_t, arg1: Java.Class): groovy.lang.MetaProperty;
                    getGetterName(arg0: string_t, arg1: Java.Class): string;
                    getGetterNameP(arg0: string_t, arg1: Java.Class): Promise<string>;
                    getSetterName(arg0: string_t): string;
                    getSetterNameP(arg0: string_t): Promise<string>;
                }
            }
        }
        module groovy.lang {
            interface Range extends Java.java.util.List {
                add(arg0: integer_t, arg1: object_t): void;
                addP(arg0: integer_t, arg1: object_t): Promise<void>;
                add(arg0: object_t): boolean;
                addP(arg0: object_t): Promise<boolean>;
                addAll(arg0: integer_t, arg1: Java.Collection): boolean;
                addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
                addAll(arg0: Java.Collection): boolean;
                addAllP(arg0: Java.Collection): Promise<boolean>;
                clear(): void;
                clearP(): Promise<void>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                containsAll(arg0: Java.Collection): boolean;
                containsAllP(arg0: Java.Collection): Promise<boolean>;
                containsWithinBounds(arg0: object_t): boolean;
                containsWithinBoundsP(arg0: object_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                get(arg0: integer_t): object_t;
                getP(arg0: integer_t): Promise<object_t>;
                getFrom(): object_t;
                getFromP(): Promise<object_t>;
                getTo(): object_t;
                getToP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                indexOf(arg0: object_t): number;
                indexOfP(arg0: object_t): Promise<number>;
                inspect(): string;
                inspectP(): Promise<string>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                isReverse(): boolean;
                isReverseP(): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                lastIndexOf(arg0: object_t): number;
                lastIndexOfP(arg0: object_t): Promise<number>;
                listIterator(arg0: integer_t): Java.ListIterator;
                listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
                listIterator(): Java.ListIterator;
                listIteratorP(): Promise<Java.ListIterator>;
                parallelStream(): object_t;
                parallelStreamP(): Promise<object_t>;
                remove(arg0: object_t): boolean;
                removeP(arg0: object_t): Promise<boolean>;
                remove(arg0: integer_t): object_t;
                removeP(arg0: integer_t): Promise<object_t>;
                removeAll(arg0: Java.Collection): boolean;
                removeAllP(arg0: Java.Collection): Promise<boolean>;
                removeIf(arg0: Java.Predicate): boolean;
                removeIfP(arg0: Java.Predicate): Promise<boolean>;
                replaceAll(arg0: Java.UnaryOperator): void;
                replaceAllP(arg0: Java.UnaryOperator): Promise<void>;
                retainAll(arg0: Java.Collection): boolean;
                retainAllP(arg0: Java.Collection): Promise<boolean>;
                set(arg0: integer_t, arg1: object_t): object_t;
                setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
                size(): number;
                sizeP(): Promise<number>;
                sort(arg0: Java.Comparator): void;
                sortP(arg0: Java.Comparator): Promise<void>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                step(arg0: integer_t, arg1: Java.Closure): void;
                stepP(arg0: integer_t, arg1: Java.Closure): Promise<void>;
                step(arg0: integer_t): Java.List;
                stepP(arg0: integer_t): Promise<Java.List>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                subList(arg0: integer_t, arg1: integer_t): Java.List;
                subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
                toArray(arg0: object_array_t): object_t[];
                toArrayP(arg0: object_array_t): Promise<object_t[]>;
                toArray(): object_t[];
                toArrayP(): Promise<object_t[]>;
            }
            module Range {
                interface Static {
                }
            }
        }
        module groovy.lang {
            interface Reference extends Java.groovy.lang.GroovyObjectSupport {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getMetaClass(): Java.MetaClass;
                getMetaClassP(): Promise<Java.MetaClass>;
                getProperty(arg0: string_t): object_t;
                getPropertyP(arg0: string_t): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                invokeMethod(arg0: string_t, arg1: object_t): object_t;
                invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                set(arg0: object_t): void;
                setP(arg0: object_t): Promise<void>;
                setMetaClass(arg0: Java.MetaClass): void;
                setMetaClassP(arg0: Java.MetaClass): Promise<void>;
                setProperty(arg0: string_t, arg1: object_t): void;
                setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Reference {
                interface Static {
                    new (arg0: object_t): groovy.lang.Reference;
                    new (): groovy.lang.Reference;
                }
            }
        }
        module java.io {
            interface ByteArrayOutputStream extends Java.java.io.OutputStream {
                close(): void;
                closeP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                flush(): void;
                flushP(): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                size(): number;
                sizeP(): Promise<number>;
                toByteArray(): object_t[];
                toByteArrayP(): Promise<object_t[]>;
                toString(arg0: string_t): string;
                toStringP(arg0: string_t): Promise<string>;
                toString(arg0: integer_t): string;
                toStringP(arg0: integer_t): Promise<string>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                write(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
                writeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
                write(arg0: object_array_t): void;
                writeP(arg0: object_array_t): Promise<void>;
                write(arg0: integer_t): void;
                writeP(arg0: integer_t): Promise<void>;
                writeTo(arg0: Java.OutputStream): void;
                writeToP(arg0: Java.OutputStream): Promise<void>;
            }
            module ByteArrayOutputStream {
                interface Static {
                    new (arg0: integer_t): java.io.ByteArrayOutputStream;
                    new (): java.io.ByteArrayOutputStream;
                }
            }
        }
        module java.io {
            interface FileInputStream extends Java.java.io.InputStream {
                available(): number;
                availableP(): Promise<number>;
                close(): void;
                closeP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getChannel(): object_t;
                getChannelP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getFD(): object_t;
                getFDP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mark(arg0: integer_t): void;
                markP(arg0: integer_t): Promise<void>;
                markSupported(): boolean;
                markSupportedP(): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                read(arg0: object_array_t, arg1: integer_t, arg2: integer_t): number;
                readP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<number>;
                read(arg0: object_array_t): number;
                readP(arg0: object_array_t): Promise<number>;
                read(): number;
                readP(): Promise<number>;
                reset(): void;
                resetP(): Promise<void>;
                skip(arg0: long_t): longValue_t;
                skipP(arg0: long_t): Promise<longValue_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module FileInputStream {
                interface Static {
                    new (arg0: object_t): java.io.FileInputStream;
                    new (arg0: string_t): java.io.FileInputStream;
                    new (arg0: object_t): java.io.FileInputStream;
                }
            }
        }
        module java.io {
            interface FileOutputStream extends Java.java.io.OutputStream {
                close(): void;
                closeP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                flush(): void;
                flushP(): Promise<void>;
                getChannel(): object_t;
                getChannelP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getFD(): object_t;
                getFDP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                write(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
                writeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
                write(arg0: object_array_t): void;
                writeP(arg0: object_array_t): Promise<void>;
                write(arg0: integer_t): void;
                writeP(arg0: integer_t): Promise<void>;
            }
            module FileOutputStream {
                interface Static {
                    new (arg0: string_t, arg1: boolean_t): java.io.FileOutputStream;
                    new (arg0: object_t, arg1: boolean_t): java.io.FileOutputStream;
                    new (arg0: object_t): java.io.FileOutputStream;
                    new (arg0: string_t): java.io.FileOutputStream;
                    new (arg0: object_t): java.io.FileOutputStream;
                }
            }
        }
        module java.io {
            interface InputStream extends Java.java.lang.Object {
                available(): number;
                availableP(): Promise<number>;
                close(): void;
                closeP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mark(arg0: integer_t): void;
                markP(arg0: integer_t): Promise<void>;
                markSupported(): boolean;
                markSupportedP(): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                read(arg0: object_array_t, arg1: integer_t, arg2: integer_t): number;
                readP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<number>;
                read(arg0: object_array_t): number;
                readP(arg0: object_array_t): Promise<number>;
                read(): number;
                readP(): Promise<number>;
                reset(): void;
                resetP(): Promise<void>;
                skip(arg0: long_t): longValue_t;
                skipP(arg0: long_t): Promise<longValue_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module InputStream {
                interface Static {
                    new (): java.io.InputStream;
                }
            }
        }
        module java.io {
            interface OutputStream extends Java.java.lang.Object {
                close(): void;
                closeP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                flush(): void;
                flushP(): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                write(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
                writeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
                write(arg0: object_array_t): void;
                writeP(arg0: object_array_t): Promise<void>;
                write(arg0: integer_t): void;
                writeP(arg0: integer_t): Promise<void>;
            }
            module OutputStream {
                interface Static {
                    new (): java.io.OutputStream;
                }
            }
        }
        module java.lang {
            interface Boolean extends Java.java.lang.Object {
                booleanValue(): boolean;
                booleanValueP(): Promise<boolean>;
                compareTo(arg0: boolean_t): number;
                compareToP(arg0: boolean_t): Promise<number>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Boolean {
                interface Static {
                    TRUE: boolean;
                    FALSE: boolean;
                    TYPE: Java.Class;
                    new (arg0: string_t): java.lang.Boolean;
                    new (arg0: boolean_t): java.lang.Boolean;
                    compare(arg0: boolean_t, arg1: boolean_t): number;
                    compareP(arg0: boolean_t, arg1: boolean_t): Promise<number>;
                    getBoolean(arg0: string_t): boolean;
                    getBooleanP(arg0: string_t): Promise<boolean>;
                    hashCode(arg0: boolean_t): number;
                    hashCodeP(arg0: boolean_t): Promise<number>;
                    logicalAnd(arg0: boolean_t, arg1: boolean_t): boolean;
                    logicalAndP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
                    logicalOr(arg0: boolean_t, arg1: boolean_t): boolean;
                    logicalOrP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
                    logicalXor(arg0: boolean_t, arg1: boolean_t): boolean;
                    logicalXorP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
                    parseBoolean(arg0: string_t): boolean;
                    parseBooleanP(arg0: string_t): Promise<boolean>;
                    toString(arg0: boolean_t): string;
                    toStringP(arg0: boolean_t): Promise<string>;
                    valueOf(arg0: string_t): boolean;
                    valueOfP(arg0: string_t): Promise<boolean>;
                    valueOf(arg0: boolean_t): boolean;
                    valueOfP(arg0: boolean_t): Promise<boolean>;
                }
            }
        }
        module java.lang {
            interface Class extends Java.java.lang.Object {
                asSubclass(arg0: Java.Class): Java.Class;
                asSubclassP(arg0: Java.Class): Promise<Java.Class>;
                cast(arg0: object_t): object_t;
                castP(arg0: object_t): Promise<object_t>;
                desiredAssertionStatus(): boolean;
                desiredAssertionStatusP(): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getAnnotatedInterfaces(): object_t[];
                getAnnotatedInterfacesP(): Promise<object_t[]>;
                getAnnotatedSuperclass(): object_t;
                getAnnotatedSuperclassP(): Promise<object_t>;
                getAnnotation(arg0: Java.Class): object_t;
                getAnnotationP(arg0: Java.Class): Promise<object_t>;
                getAnnotations(): object_t[];
                getAnnotationsP(): Promise<object_t[]>;
                getAnnotationsByType(arg0: Java.Class): object_t[];
                getAnnotationsByTypeP(arg0: Java.Class): Promise<object_t[]>;
                getCanonicalName(): string;
                getCanonicalNameP(): Promise<string>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getClasses(): Java.Class[];
                getClassesP(): Promise<Java.Class[]>;
                getClassLoader(): Java.ClassLoader;
                getClassLoaderP(): Promise<Java.ClassLoader>;
                getComponentType(): Java.Class;
                getComponentTypeP(): Promise<Java.Class>;
                getConstructor(...arg0: Java.Class[]): object_t;
                getConstructor(arg0: array_t<Java.Class>): object_t;
                getConstructorP(...arg0: Java.Class[]): Promise<object_t>;
                getConstructorP(arg0: array_t<Java.Class>): Promise<object_t>;
                getConstructors(): object_t[];
                getConstructorsP(): Promise<object_t[]>;
                getDeclaredAnnotation(arg0: Java.Class): object_t;
                getDeclaredAnnotationP(arg0: Java.Class): Promise<object_t>;
                getDeclaredAnnotations(): object_t[];
                getDeclaredAnnotationsP(): Promise<object_t[]>;
                getDeclaredAnnotationsByType(arg0: Java.Class): object_t[];
                getDeclaredAnnotationsByTypeP(arg0: Java.Class): Promise<object_t[]>;
                getDeclaredClasses(): Java.Class[];
                getDeclaredClassesP(): Promise<Java.Class[]>;
                getDeclaredConstructor(...arg0: Java.Class[]): object_t;
                getDeclaredConstructor(arg0: array_t<Java.Class>): object_t;
                getDeclaredConstructorP(...arg0: Java.Class[]): Promise<object_t>;
                getDeclaredConstructorP(arg0: array_t<Java.Class>): Promise<object_t>;
                getDeclaredConstructors(): object_t[];
                getDeclaredConstructorsP(): Promise<object_t[]>;
                getDeclaredField(arg0: string_t): object_t;
                getDeclaredFieldP(arg0: string_t): Promise<object_t>;
                getDeclaredFields(): object_t[];
                getDeclaredFieldsP(): Promise<object_t[]>;
                getDeclaredMethod(arg0: string_t, ...arg1: Java.Class[]): object_t;
                getDeclaredMethod(arg0: string_t, arg1: array_t<Java.Class>): object_t;
                getDeclaredMethodP(arg0: string_t, ...arg1: Java.Class[]): Promise<object_t>;
                getDeclaredMethodP(arg0: string_t, arg1: array_t<Java.Class>): Promise<object_t>;
                getDeclaredMethods(): object_t[];
                getDeclaredMethodsP(): Promise<object_t[]>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                getEnclosingClass(): Java.Class;
                getEnclosingClassP(): Promise<Java.Class>;
                getEnclosingConstructor(): object_t;
                getEnclosingConstructorP(): Promise<object_t>;
                getEnclosingMethod(): object_t;
                getEnclosingMethodP(): Promise<object_t>;
                getEnumConstants(): object_t[];
                getEnumConstantsP(): Promise<object_t[]>;
                getField(arg0: string_t): object_t;
                getFieldP(arg0: string_t): Promise<object_t>;
                getFields(): object_t[];
                getFieldsP(): Promise<object_t[]>;
                getGenericInterfaces(): object_t[];
                getGenericInterfacesP(): Promise<object_t[]>;
                getGenericSuperclass(): object_t;
                getGenericSuperclassP(): Promise<object_t>;
                getInterfaces(): Java.Class[];
                getInterfacesP(): Promise<Java.Class[]>;
                getMethod(arg0: string_t, ...arg1: Java.Class[]): object_t;
                getMethod(arg0: string_t, arg1: array_t<Java.Class>): object_t;
                getMethodP(arg0: string_t, ...arg1: Java.Class[]): Promise<object_t>;
                getMethodP(arg0: string_t, arg1: array_t<Java.Class>): Promise<object_t>;
                getMethods(): object_t[];
                getMethodsP(): Promise<object_t[]>;
                getModifiers(): number;
                getModifiersP(): Promise<number>;
                getName(): string;
                getNameP(): Promise<string>;
                getPackage(): object_t;
                getPackageP(): Promise<object_t>;
                getProtectionDomain(): object_t;
                getProtectionDomainP(): Promise<object_t>;
                getResource(arg0: string_t): object_t;
                getResourceP(arg0: string_t): Promise<object_t>;
                getResourceAsStream(arg0: string_t): Java.InputStream;
                getResourceAsStreamP(arg0: string_t): Promise<Java.InputStream>;
                getSigners(): object_t[];
                getSignersP(): Promise<object_t[]>;
                getSimpleName(): string;
                getSimpleNameP(): Promise<string>;
                getSuperclass(): Java.Class;
                getSuperclassP(): Promise<Java.Class>;
                getTypeName(): string;
                getTypeNameP(): Promise<string>;
                getTypeParameters(): object_t[];
                getTypeParametersP(): Promise<object_t[]>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isAnnotation(): boolean;
                isAnnotationP(): Promise<boolean>;
                isAnnotationPresent(arg0: Java.Class): boolean;
                isAnnotationPresentP(arg0: Java.Class): Promise<boolean>;
                isAnonymousClass(): boolean;
                isAnonymousClassP(): Promise<boolean>;
                isArray(): boolean;
                isArrayP(): Promise<boolean>;
                isAssignableFrom(arg0: Java.Class): boolean;
                isAssignableFromP(arg0: Java.Class): Promise<boolean>;
                isEnum(): boolean;
                isEnumP(): Promise<boolean>;
                isInstance(arg0: object_t): boolean;
                isInstanceP(arg0: object_t): Promise<boolean>;
                isInterface(): boolean;
                isInterfaceP(): Promise<boolean>;
                isLocalClass(): boolean;
                isLocalClassP(): Promise<boolean>;
                isMemberClass(): boolean;
                isMemberClassP(): Promise<boolean>;
                isPrimitive(): boolean;
                isPrimitiveP(): Promise<boolean>;
                isSynthetic(): boolean;
                isSyntheticP(): Promise<boolean>;
                newInstance(): object_t;
                newInstanceP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toGenericString(): string;
                toGenericStringP(): Promise<string>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Class {
                interface Static {
                    forName(arg0: string_t, arg1: boolean_t, arg2: Java.ClassLoader): Java.Class;
                    forNameP(arg0: string_t, arg1: boolean_t, arg2: Java.ClassLoader): Promise<Java.Class>;
                    forName(arg0: string_t): Java.Class;
                    forNameP(arg0: string_t): Promise<Java.Class>;
                }
            }
        }
        module java.lang {
            interface ClassLoader extends Java.java.lang.Object {
                clearAssertionStatus(): void;
                clearAssertionStatusP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getParent(): Java.ClassLoader;
                getParentP(): Promise<Java.ClassLoader>;
                getResource(arg0: string_t): object_t;
                getResourceP(arg0: string_t): Promise<object_t>;
                getResourceAsStream(arg0: string_t): Java.InputStream;
                getResourceAsStreamP(arg0: string_t): Promise<Java.InputStream>;
                getResources(arg0: string_t): object_t;
                getResourcesP(arg0: string_t): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                loadClass(arg0: string_t): Java.Class;
                loadClassP(arg0: string_t): Promise<Java.Class>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setClassAssertionStatus(arg0: string_t, arg1: boolean_t): void;
                setClassAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
                setDefaultAssertionStatus(arg0: boolean_t): void;
                setDefaultAssertionStatusP(arg0: boolean_t): Promise<void>;
                setPackageAssertionStatus(arg0: string_t, arg1: boolean_t): void;
                setPackageAssertionStatusP(arg0: string_t, arg1: boolean_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ClassLoader {
                interface Static {
                    getSystemClassLoader(): Java.ClassLoader;
                    getSystemClassLoaderP(): Promise<Java.ClassLoader>;
                    getSystemResource(arg0: string_t): object_t;
                    getSystemResourceP(arg0: string_t): Promise<object_t>;
                    getSystemResourceAsStream(arg0: string_t): Java.InputStream;
                    getSystemResourceAsStreamP(arg0: string_t): Promise<Java.InputStream>;
                    getSystemResources(arg0: string_t): object_t;
                    getSystemResourcesP(arg0: string_t): Promise<object_t>;
                }
            }
        }
        module java.lang {
            interface Double extends Java.java.lang.Number {
                byteValue(): object_t;
                byteValueP(): Promise<object_t>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: double_t): number;
                compareToP(arg0: double_t): Promise<number>;
                doubleValue(): number;
                doubleValueP(): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                floatValue(): number;
                floatValueP(): Promise<number>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                intValue(): number;
                intValueP(): Promise<number>;
                isInfinite(): boolean;
                isInfiniteP(): Promise<boolean>;
                isNaN(): boolean;
                isNaNP(): Promise<boolean>;
                longValue(): longValue_t;
                longValueP(): Promise<longValue_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                shortValue(): number;
                shortValueP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Double {
                interface Static {
                    POSITIVE_INFINITY: number;
                    NEGATIVE_INFINITY: number;
                    NaN: number;
                    MAX_VALUE: number;
                    MIN_NORMAL: number;
                    MIN_VALUE: number;
                    MAX_EXPONENT: number;
                    MIN_EXPONENT: number;
                    SIZE: number;
                    BYTES: number;
                    TYPE: Java.Class;
                    new (arg0: string_t): java.lang.Double;
                    new (arg0: double_t): java.lang.Double;
                    compare(arg0: double_t, arg1: double_t): number;
                    compareP(arg0: double_t, arg1: double_t): Promise<number>;
                    doubleToLongBits(arg0: double_t): longValue_t;
                    doubleToLongBitsP(arg0: double_t): Promise<longValue_t>;
                    doubleToRawLongBits(arg0: double_t): longValue_t;
                    doubleToRawLongBitsP(arg0: double_t): Promise<longValue_t>;
                    hashCode(arg0: double_t): number;
                    hashCodeP(arg0: double_t): Promise<number>;
                    isFinite(arg0: double_t): boolean;
                    isFiniteP(arg0: double_t): Promise<boolean>;
                    isInfinite(arg0: double_t): boolean;
                    isInfiniteP(arg0: double_t): Promise<boolean>;
                    isNaN(arg0: double_t): boolean;
                    isNaNP(arg0: double_t): Promise<boolean>;
                    longBitsToDouble(arg0: long_t): number;
                    longBitsToDoubleP(arg0: long_t): Promise<number>;
                    max(arg0: double_t, arg1: double_t): number;
                    maxP(arg0: double_t, arg1: double_t): Promise<number>;
                    min(arg0: double_t, arg1: double_t): number;
                    minP(arg0: double_t, arg1: double_t): Promise<number>;
                    parseDouble(arg0: string_t): number;
                    parseDoubleP(arg0: string_t): Promise<number>;
                    sum(arg0: double_t, arg1: double_t): number;
                    sumP(arg0: double_t, arg1: double_t): Promise<number>;
                    toHexString(arg0: double_t): string;
                    toHexStringP(arg0: double_t): Promise<string>;
                    toString(arg0: double_t): string;
                    toStringP(arg0: double_t): Promise<string>;
                    valueOf(arg0: string_t): number;
                    valueOfP(arg0: string_t): Promise<number>;
                    valueOf(arg0: double_t): number;
                    valueOfP(arg0: double_t): Promise<number>;
                }
            }
        }
        module java.lang {
            interface Enum extends Java.java.lang.Object {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Enum {
                interface Static {
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                }
            }
        }
        module java.lang {
            interface Float extends Java.java.lang.Number {
                byteValue(): object_t;
                byteValueP(): Promise<object_t>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: float_t): number;
                compareToP(arg0: float_t): Promise<number>;
                doubleValue(): number;
                doubleValueP(): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                floatValue(): number;
                floatValueP(): Promise<number>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                intValue(): number;
                intValueP(): Promise<number>;
                isInfinite(): boolean;
                isInfiniteP(): Promise<boolean>;
                isNaN(): boolean;
                isNaNP(): Promise<boolean>;
                longValue(): longValue_t;
                longValueP(): Promise<longValue_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                shortValue(): number;
                shortValueP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Float {
                interface Static {
                    POSITIVE_INFINITY: number;
                    NEGATIVE_INFINITY: number;
                    NaN: number;
                    MAX_VALUE: number;
                    MIN_NORMAL: number;
                    MIN_VALUE: number;
                    MAX_EXPONENT: number;
                    MIN_EXPONENT: number;
                    SIZE: number;
                    BYTES: number;
                    TYPE: Java.Class;
                    new (arg0: string_t): java.lang.Float;
                    new (arg0: float_t): java.lang.Float;
                    new (arg0: double_t): java.lang.Float;
                    compare(arg0: float_t, arg1: float_t): number;
                    compareP(arg0: float_t, arg1: float_t): Promise<number>;
                    floatToIntBits(arg0: float_t): number;
                    floatToIntBitsP(arg0: float_t): Promise<number>;
                    floatToRawIntBits(arg0: float_t): number;
                    floatToRawIntBitsP(arg0: float_t): Promise<number>;
                    hashCode(arg0: float_t): number;
                    hashCodeP(arg0: float_t): Promise<number>;
                    intBitsToFloat(arg0: integer_t): number;
                    intBitsToFloatP(arg0: integer_t): Promise<number>;
                    isFinite(arg0: float_t): boolean;
                    isFiniteP(arg0: float_t): Promise<boolean>;
                    isInfinite(arg0: float_t): boolean;
                    isInfiniteP(arg0: float_t): Promise<boolean>;
                    isNaN(arg0: float_t): boolean;
                    isNaNP(arg0: float_t): Promise<boolean>;
                    max(arg0: float_t, arg1: float_t): number;
                    maxP(arg0: float_t, arg1: float_t): Promise<number>;
                    min(arg0: float_t, arg1: float_t): number;
                    minP(arg0: float_t, arg1: float_t): Promise<number>;
                    parseFloat(arg0: string_t): number;
                    parseFloatP(arg0: string_t): Promise<number>;
                    sum(arg0: float_t, arg1: float_t): number;
                    sumP(arg0: float_t, arg1: float_t): Promise<number>;
                    toHexString(arg0: float_t): string;
                    toHexStringP(arg0: float_t): Promise<string>;
                    toString(arg0: float_t): string;
                    toStringP(arg0: float_t): Promise<string>;
                    valueOf(arg0: string_t): number;
                    valueOfP(arg0: string_t): Promise<number>;
                    valueOf(arg0: float_t): number;
                    valueOfP(arg0: float_t): Promise<number>;
                }
            }
        }
        module java.lang {
            interface Integer extends Java.java.lang.Number {
                byteValue(): object_t;
                byteValueP(): Promise<object_t>;
                compareTo(arg0: integer_t): number;
                compareToP(arg0: integer_t): Promise<number>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                doubleValue(): number;
                doubleValueP(): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                floatValue(): number;
                floatValueP(): Promise<number>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                intValue(): number;
                intValueP(): Promise<number>;
                longValue(): longValue_t;
                longValueP(): Promise<longValue_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                shortValue(): number;
                shortValueP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Integer {
                interface Static {
                    MIN_VALUE: number;
                    MAX_VALUE: number;
                    TYPE: Java.Class;
                    SIZE: number;
                    BYTES: number;
                    new (arg0: string_t): java.lang.Integer;
                    new (arg0: integer_t): java.lang.Integer;
                    bitCount(arg0: integer_t): number;
                    bitCountP(arg0: integer_t): Promise<number>;
                    compare(arg0: integer_t, arg1: integer_t): number;
                    compareP(arg0: integer_t, arg1: integer_t): Promise<number>;
                    compareUnsigned(arg0: integer_t, arg1: integer_t): number;
                    compareUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
                    decode(arg0: string_t): number;
                    decodeP(arg0: string_t): Promise<number>;
                    divideUnsigned(arg0: integer_t, arg1: integer_t): number;
                    divideUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
                    getInteger(arg0: string_t, arg1: integer_t): number;
                    getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
                    getInteger(arg0: string_t, arg1: integer_t): number;
                    getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
                    getInteger(arg0: string_t): number;
                    getIntegerP(arg0: string_t): Promise<number>;
                    hashCode(arg0: integer_t): number;
                    hashCodeP(arg0: integer_t): Promise<number>;
                    highestOneBit(arg0: integer_t): number;
                    highestOneBitP(arg0: integer_t): Promise<number>;
                    lowestOneBit(arg0: integer_t): number;
                    lowestOneBitP(arg0: integer_t): Promise<number>;
                    max(arg0: integer_t, arg1: integer_t): number;
                    maxP(arg0: integer_t, arg1: integer_t): Promise<number>;
                    min(arg0: integer_t, arg1: integer_t): number;
                    minP(arg0: integer_t, arg1: integer_t): Promise<number>;
                    numberOfLeadingZeros(arg0: integer_t): number;
                    numberOfLeadingZerosP(arg0: integer_t): Promise<number>;
                    numberOfTrailingZeros(arg0: integer_t): number;
                    numberOfTrailingZerosP(arg0: integer_t): Promise<number>;
                    parseInt(arg0: string_t, arg1: integer_t): number;
                    parseIntP(arg0: string_t, arg1: integer_t): Promise<number>;
                    parseInt(arg0: string_t): number;
                    parseIntP(arg0: string_t): Promise<number>;
                    parseUnsignedInt(arg0: string_t, arg1: integer_t): number;
                    parseUnsignedIntP(arg0: string_t, arg1: integer_t): Promise<number>;
                    parseUnsignedInt(arg0: string_t): number;
                    parseUnsignedIntP(arg0: string_t): Promise<number>;
                    remainderUnsigned(arg0: integer_t, arg1: integer_t): number;
                    remainderUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
                    reverse(arg0: integer_t): number;
                    reverseP(arg0: integer_t): Promise<number>;
                    reverseBytes(arg0: integer_t): number;
                    reverseBytesP(arg0: integer_t): Promise<number>;
                    rotateLeft(arg0: integer_t, arg1: integer_t): number;
                    rotateLeftP(arg0: integer_t, arg1: integer_t): Promise<number>;
                    rotateRight(arg0: integer_t, arg1: integer_t): number;
                    rotateRightP(arg0: integer_t, arg1: integer_t): Promise<number>;
                    signum(arg0: integer_t): number;
                    signumP(arg0: integer_t): Promise<number>;
                    sum(arg0: integer_t, arg1: integer_t): number;
                    sumP(arg0: integer_t, arg1: integer_t): Promise<number>;
                    toBinaryString(arg0: integer_t): string;
                    toBinaryStringP(arg0: integer_t): Promise<string>;
                    toHexString(arg0: integer_t): string;
                    toHexStringP(arg0: integer_t): Promise<string>;
                    toOctalString(arg0: integer_t): string;
                    toOctalStringP(arg0: integer_t): Promise<string>;
                    toString(arg0: integer_t, arg1: integer_t): string;
                    toStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
                    toString(arg0: integer_t): string;
                    toStringP(arg0: integer_t): Promise<string>;
                    toUnsignedLong(arg0: integer_t): longValue_t;
                    toUnsignedLongP(arg0: integer_t): Promise<longValue_t>;
                    toUnsignedString(arg0: integer_t, arg1: integer_t): string;
                    toUnsignedStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
                    toUnsignedString(arg0: integer_t): string;
                    toUnsignedStringP(arg0: integer_t): Promise<string>;
                    valueOf(arg0: string_t, arg1: integer_t): number;
                    valueOfP(arg0: string_t, arg1: integer_t): Promise<number>;
                    valueOf(arg0: string_t): number;
                    valueOfP(arg0: string_t): Promise<number>;
                    valueOf(arg0: integer_t): number;
                    valueOfP(arg0: integer_t): Promise<number>;
                }
            }
        }
        module java.lang {
            interface Iterable extends Java.java.lang.Object {
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
            }
            module Iterable {
                interface Static {
                }
            }
        }
        module java.lang {
            interface Long extends Java.java.lang.Number {
                byteValue(): object_t;
                byteValueP(): Promise<object_t>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: long_t): number;
                compareToP(arg0: long_t): Promise<number>;
                doubleValue(): number;
                doubleValueP(): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                floatValue(): number;
                floatValueP(): Promise<number>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                intValue(): number;
                intValueP(): Promise<number>;
                longValue(): longValue_t;
                longValueP(): Promise<longValue_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                shortValue(): number;
                shortValueP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Long {
                interface Static {
                    MIN_VALUE: longValue_t;
                    MAX_VALUE: longValue_t;
                    TYPE: Java.Class;
                    SIZE: number;
                    BYTES: number;
                    new (arg0: string_t): java.lang.Long;
                    new (arg0: long_t): java.lang.Long;
                    bitCount(arg0: long_t): number;
                    bitCountP(arg0: long_t): Promise<number>;
                    compare(arg0: long_t, arg1: long_t): number;
                    compareP(arg0: long_t, arg1: long_t): Promise<number>;
                    compareUnsigned(arg0: long_t, arg1: long_t): number;
                    compareUnsignedP(arg0: long_t, arg1: long_t): Promise<number>;
                    decode(arg0: string_t): longValue_t;
                    decodeP(arg0: string_t): Promise<longValue_t>;
                    divideUnsigned(arg0: long_t, arg1: long_t): longValue_t;
                    divideUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
                    getLong(arg0: string_t, arg1: long_t): longValue_t;
                    getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
                    getLong(arg0: string_t, arg1: long_t): longValue_t;
                    getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
                    getLong(arg0: string_t): longValue_t;
                    getLongP(arg0: string_t): Promise<longValue_t>;
                    hashCode(arg0: long_t): number;
                    hashCodeP(arg0: long_t): Promise<number>;
                    highestOneBit(arg0: long_t): longValue_t;
                    highestOneBitP(arg0: long_t): Promise<longValue_t>;
                    lowestOneBit(arg0: long_t): longValue_t;
                    lowestOneBitP(arg0: long_t): Promise<longValue_t>;
                    max(arg0: long_t, arg1: long_t): longValue_t;
                    maxP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
                    min(arg0: long_t, arg1: long_t): longValue_t;
                    minP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
                    numberOfLeadingZeros(arg0: long_t): number;
                    numberOfLeadingZerosP(arg0: long_t): Promise<number>;
                    numberOfTrailingZeros(arg0: long_t): number;
                    numberOfTrailingZerosP(arg0: long_t): Promise<number>;
                    parseLong(arg0: string_t, arg1: integer_t): longValue_t;
                    parseLongP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
                    parseLong(arg0: string_t): longValue_t;
                    parseLongP(arg0: string_t): Promise<longValue_t>;
                    parseUnsignedLong(arg0: string_t, arg1: integer_t): longValue_t;
                    parseUnsignedLongP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
                    parseUnsignedLong(arg0: string_t): longValue_t;
                    parseUnsignedLongP(arg0: string_t): Promise<longValue_t>;
                    remainderUnsigned(arg0: long_t, arg1: long_t): longValue_t;
                    remainderUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
                    reverse(arg0: long_t): longValue_t;
                    reverseP(arg0: long_t): Promise<longValue_t>;
                    reverseBytes(arg0: long_t): longValue_t;
                    reverseBytesP(arg0: long_t): Promise<longValue_t>;
                    rotateLeft(arg0: long_t, arg1: integer_t): longValue_t;
                    rotateLeftP(arg0: long_t, arg1: integer_t): Promise<longValue_t>;
                    rotateRight(arg0: long_t, arg1: integer_t): longValue_t;
                    rotateRightP(arg0: long_t, arg1: integer_t): Promise<longValue_t>;
                    signum(arg0: long_t): number;
                    signumP(arg0: long_t): Promise<number>;
                    sum(arg0: long_t, arg1: long_t): longValue_t;
                    sumP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
                    toBinaryString(arg0: long_t): string;
                    toBinaryStringP(arg0: long_t): Promise<string>;
                    toHexString(arg0: long_t): string;
                    toHexStringP(arg0: long_t): Promise<string>;
                    toOctalString(arg0: long_t): string;
                    toOctalStringP(arg0: long_t): Promise<string>;
                    toString(arg0: long_t, arg1: integer_t): string;
                    toStringP(arg0: long_t, arg1: integer_t): Promise<string>;
                    toString(arg0: long_t): string;
                    toStringP(arg0: long_t): Promise<string>;
                    toUnsignedString(arg0: long_t, arg1: integer_t): string;
                    toUnsignedStringP(arg0: long_t, arg1: integer_t): Promise<string>;
                    toUnsignedString(arg0: long_t): string;
                    toUnsignedStringP(arg0: long_t): Promise<string>;
                    valueOf(arg0: string_t, arg1: integer_t): longValue_t;
                    valueOfP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
                    valueOf(arg0: string_t): longValue_t;
                    valueOfP(arg0: string_t): Promise<longValue_t>;
                    valueOf(arg0: long_t): longValue_t;
                    valueOfP(arg0: long_t): Promise<longValue_t>;
                }
            }
        }
        module java.lang {
            interface Number extends Java.java.lang.Object {
                byteValue(): object_t;
                byteValueP(): Promise<object_t>;
                doubleValue(): number;
                doubleValueP(): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                floatValue(): number;
                floatValueP(): Promise<number>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                intValue(): number;
                intValueP(): Promise<number>;
                longValue(): longValue_t;
                longValueP(): Promise<longValue_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                shortValue(): number;
                shortValueP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Number {
                interface Static {
                    new (): java.lang.Number;
                }
            }
        }
        module java.lang {
            interface Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Object {
                interface Static {
                    new (): java.lang.Object;
                }
            }
        }
        module java.lang.reflect {
            interface Array extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Array {
                interface Static {
                    get(arg0: object_t, arg1: integer_t): object_t;
                    getP(arg0: object_t, arg1: integer_t): Promise<object_t>;
                    getBoolean(arg0: object_t, arg1: integer_t): boolean;
                    getBooleanP(arg0: object_t, arg1: integer_t): Promise<boolean>;
                    getByte(arg0: object_t, arg1: integer_t): object_t;
                    getByteP(arg0: object_t, arg1: integer_t): Promise<object_t>;
                    getChar(arg0: object_t, arg1: integer_t): object_t;
                    getCharP(arg0: object_t, arg1: integer_t): Promise<object_t>;
                    getDouble(arg0: object_t, arg1: integer_t): number;
                    getDoubleP(arg0: object_t, arg1: integer_t): Promise<number>;
                    getFloat(arg0: object_t, arg1: integer_t): number;
                    getFloatP(arg0: object_t, arg1: integer_t): Promise<number>;
                    getInt(arg0: object_t, arg1: integer_t): number;
                    getIntP(arg0: object_t, arg1: integer_t): Promise<number>;
                    getLength(arg0: object_t): number;
                    getLengthP(arg0: object_t): Promise<number>;
                    getLong(arg0: object_t, arg1: integer_t): longValue_t;
                    getLongP(arg0: object_t, arg1: integer_t): Promise<longValue_t>;
                    getShort(arg0: object_t, arg1: integer_t): number;
                    getShortP(arg0: object_t, arg1: integer_t): Promise<number>;
                    newInstance(arg0: Java.Class, ...arg1: integer_t[]): object_t;
                    newInstance(arg0: Java.Class, arg1: array_t<integer_t>): object_t;
                    newInstanceP(arg0: Java.Class, ...arg1: integer_t[]): Promise<object_t>;
                    newInstanceP(arg0: Java.Class, arg1: array_t<integer_t>): Promise<object_t>;
                    newInstance(arg0: Java.Class, arg1: integer_t): object_t;
                    newInstanceP(arg0: Java.Class, arg1: integer_t): Promise<object_t>;
                    set(arg0: object_t, arg1: integer_t, arg2: object_t): void;
                    setP(arg0: object_t, arg1: integer_t, arg2: object_t): Promise<void>;
                    setBoolean(arg0: object_t, arg1: integer_t, arg2: boolean_t): void;
                    setBooleanP(arg0: object_t, arg1: integer_t, arg2: boolean_t): Promise<void>;
                    setByte(arg0: object_t, arg1: integer_t, arg2: object_t): void;
                    setByteP(arg0: object_t, arg1: integer_t, arg2: object_t): Promise<void>;
                    setChar(arg0: object_t, arg1: integer_t, arg2: object_t): void;
                    setCharP(arg0: object_t, arg1: integer_t, arg2: object_t): Promise<void>;
                    setDouble(arg0: object_t, arg1: integer_t, arg2: double_t): void;
                    setDoubleP(arg0: object_t, arg1: integer_t, arg2: double_t): Promise<void>;
                    setFloat(arg0: object_t, arg1: integer_t, arg2: float_t): void;
                    setFloatP(arg0: object_t, arg1: integer_t, arg2: float_t): Promise<void>;
                    setInt(arg0: object_t, arg1: integer_t, arg2: integer_t): void;
                    setIntP(arg0: object_t, arg1: integer_t, arg2: integer_t): Promise<void>;
                    setLong(arg0: object_t, arg1: integer_t, arg2: long_t): void;
                    setLongP(arg0: object_t, arg1: integer_t, arg2: long_t): Promise<void>;
                    setShort(arg0: object_t, arg1: integer_t, arg2: short_t): void;
                    setShortP(arg0: object_t, arg1: integer_t, arg2: short_t): Promise<void>;
                }
            }
        }
        module java.lang {
            interface Short extends Java.java.lang.Number {
                byteValue(): object_t;
                byteValueP(): Promise<object_t>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: short_t): number;
                compareToP(arg0: short_t): Promise<number>;
                doubleValue(): number;
                doubleValueP(): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                floatValue(): number;
                floatValueP(): Promise<number>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                intValue(): number;
                intValueP(): Promise<number>;
                longValue(): longValue_t;
                longValueP(): Promise<longValue_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                shortValue(): number;
                shortValueP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Short {
                interface Static {
                    MIN_VALUE: number;
                    MAX_VALUE: number;
                    TYPE: Java.Class;
                    SIZE: number;
                    BYTES: number;
                    new (arg0: string_t): java.lang.Short;
                    new (arg0: short_t): java.lang.Short;
                    compare(arg0: short_t, arg1: short_t): number;
                    compareP(arg0: short_t, arg1: short_t): Promise<number>;
                    decode(arg0: string_t): number;
                    decodeP(arg0: string_t): Promise<number>;
                    hashCode(arg0: short_t): number;
                    hashCodeP(arg0: short_t): Promise<number>;
                    parseShort(arg0: string_t, arg1: integer_t): number;
                    parseShortP(arg0: string_t, arg1: integer_t): Promise<number>;
                    parseShort(arg0: string_t): number;
                    parseShortP(arg0: string_t): Promise<number>;
                    reverseBytes(arg0: short_t): number;
                    reverseBytesP(arg0: short_t): Promise<number>;
                    toString(arg0: short_t): string;
                    toStringP(arg0: short_t): Promise<string>;
                    toUnsignedInt(arg0: short_t): number;
                    toUnsignedIntP(arg0: short_t): Promise<number>;
                    toUnsignedLong(arg0: short_t): longValue_t;
                    toUnsignedLongP(arg0: short_t): Promise<longValue_t>;
                    valueOf(arg0: string_t, arg1: integer_t): number;
                    valueOfP(arg0: string_t, arg1: integer_t): Promise<number>;
                    valueOf(arg0: string_t): number;
                    valueOfP(arg0: string_t): Promise<number>;
                    valueOf(arg0: short_t): number;
                    valueOfP(arg0: short_t): Promise<number>;
                }
            }
        }
        module java.lang {
            interface String extends Java.java.lang.Object {
                charAt(arg0: integer_t): object_t;
                charAtP(arg0: integer_t): Promise<object_t>;
                chars(): object_t;
                charsP(): Promise<object_t>;
                codePointAt(arg0: integer_t): number;
                codePointAtP(arg0: integer_t): Promise<number>;
                codePointBefore(arg0: integer_t): number;
                codePointBeforeP(arg0: integer_t): Promise<number>;
                codePointCount(arg0: integer_t, arg1: integer_t): number;
                codePointCountP(arg0: integer_t, arg1: integer_t): Promise<number>;
                codePoints(): object_t;
                codePointsP(): Promise<object_t>;
                compareTo(arg0: string_t): number;
                compareToP(arg0: string_t): Promise<number>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareToIgnoreCase(arg0: string_t): number;
                compareToIgnoreCaseP(arg0: string_t): Promise<number>;
                concat(arg0: string_t): string;
                concatP(arg0: string_t): Promise<string>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                contentEquals(arg0: object_t): boolean;
                contentEqualsP(arg0: object_t): Promise<boolean>;
                contentEquals(arg0: object_t): boolean;
                contentEqualsP(arg0: object_t): Promise<boolean>;
                endsWith(arg0: string_t): boolean;
                endsWithP(arg0: string_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                equalsIgnoreCase(arg0: string_t): boolean;
                equalsIgnoreCaseP(arg0: string_t): Promise<boolean>;
                getBytes(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
                getBytesP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
                getBytes(arg0: Java.Charset): object_t[];
                getBytesP(arg0: Java.Charset): Promise<object_t[]>;
                getBytes(arg0: string_t): object_t[];
                getBytesP(arg0: string_t): Promise<object_t[]>;
                getBytes(): object_t[];
                getBytesP(): Promise<object_t[]>;
                getChars(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
                getCharsP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                indexOf(arg0: string_t, arg1: integer_t): number;
                indexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
                indexOf(arg0: integer_t, arg1: integer_t): number;
                indexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
                indexOf(arg0: string_t): number;
                indexOfP(arg0: string_t): Promise<number>;
                indexOf(arg0: integer_t): number;
                indexOfP(arg0: integer_t): Promise<number>;
                intern(): string;
                internP(): Promise<string>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                lastIndexOf(arg0: string_t, arg1: integer_t): number;
                lastIndexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
                lastIndexOf(arg0: integer_t, arg1: integer_t): number;
                lastIndexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
                lastIndexOf(arg0: string_t): number;
                lastIndexOfP(arg0: string_t): Promise<number>;
                lastIndexOf(arg0: integer_t): number;
                lastIndexOfP(arg0: integer_t): Promise<number>;
                length(): number;
                lengthP(): Promise<number>;
                matches(arg0: string_t): boolean;
                matchesP(arg0: string_t): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                offsetByCodePoints(arg0: integer_t, arg1: integer_t): number;
                offsetByCodePointsP(arg0: integer_t, arg1: integer_t): Promise<number>;
                regionMatches(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): boolean;
                regionMatchesP(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): Promise<boolean>;
                regionMatches(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): boolean;
                regionMatchesP(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): Promise<boolean>;
                replace(arg0: object_t, arg1: object_t): string;
                replaceP(arg0: object_t, arg1: object_t): Promise<string>;
                replace(arg0: object_t, arg1: object_t): string;
                replaceP(arg0: object_t, arg1: object_t): Promise<string>;
                replaceAll(arg0: string_t, arg1: string_t): string;
                replaceAllP(arg0: string_t, arg1: string_t): Promise<string>;
                replaceFirst(arg0: string_t, arg1: string_t): string;
                replaceFirstP(arg0: string_t, arg1: string_t): Promise<string>;
                split(arg0: string_t, arg1: integer_t): string[];
                splitP(arg0: string_t, arg1: integer_t): Promise<string[]>;
                split(arg0: string_t): string[];
                splitP(arg0: string_t): Promise<string[]>;
                startsWith(arg0: string_t, arg1: integer_t): boolean;
                startsWithP(arg0: string_t, arg1: integer_t): Promise<boolean>;
                startsWith(arg0: string_t): boolean;
                startsWithP(arg0: string_t): Promise<boolean>;
                subSequence(arg0: integer_t, arg1: integer_t): object_t;
                subSequenceP(arg0: integer_t, arg1: integer_t): Promise<object_t>;
                substring(arg0: integer_t, arg1: integer_t): string;
                substringP(arg0: integer_t, arg1: integer_t): Promise<string>;
                substring(arg0: integer_t): string;
                substringP(arg0: integer_t): Promise<string>;
                toCharArray(): object_t[];
                toCharArrayP(): Promise<object_t[]>;
                toLowerCase(arg0: object_t): string;
                toLowerCaseP(arg0: object_t): Promise<string>;
                toLowerCase(): string;
                toLowerCaseP(): Promise<string>;
                toString(): string;
                toStringP(): Promise<string>;
                toUpperCase(arg0: object_t): string;
                toUpperCaseP(arg0: object_t): Promise<string>;
                toUpperCase(): string;
                toUpperCaseP(): Promise<string>;
                trim(): string;
                trimP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module String {
                interface Static {
                    CASE_INSENSITIVE_ORDER: Java.Comparator;
                    new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Charset): java.lang.String;
                    new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): java.lang.String;
                    new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): java.lang.String;
                    new (arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): java.lang.String;
                    new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
                    new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
                    new (arg0: object_array_t, arg1: Java.Charset): java.lang.String;
                    new (arg0: object_array_t, arg1: string_t): java.lang.String;
                    new (arg0: object_array_t, arg1: integer_t): java.lang.String;
                    new (arg0: object_t): java.lang.String;
                    new (arg0: object_t): java.lang.String;
                    new (arg0: string_t): java.lang.String;
                    new (arg0: object_array_t): java.lang.String;
                    new (arg0: object_array_t): java.lang.String;
                    new (): java.lang.String;
                    copyValueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
                    copyValueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
                    copyValueOf(arg0: object_array_t): string;
                    copyValueOfP(arg0: object_array_t): Promise<string>;
                    format(arg0: object_t, arg1: string_t, ...arg2: object_t[]): string;
                    format(arg0: object_t, arg1: string_t, arg2: object_array_t): string;
                    formatP(arg0: object_t, arg1: string_t, ...arg2: object_t[]): Promise<string>;
                    formatP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<string>;
                    format(arg0: string_t, ...arg1: object_t[]): string;
                    format(arg0: string_t, arg1: object_array_t): string;
                    formatP(arg0: string_t, ...arg1: object_t[]): Promise<string>;
                    formatP(arg0: string_t, arg1: object_array_t): Promise<string>;
                    join(arg0: object_t, ...arg1: object_t[]): string;
                    join(arg0: object_t, arg1: object_array_t): string;
                    joinP(arg0: object_t, ...arg1: object_t[]): Promise<string>;
                    joinP(arg0: object_t, arg1: object_array_t): Promise<string>;
                    join(arg0: object_t, arg1: Java.Iterable): string;
                    joinP(arg0: object_t, arg1: Java.Iterable): Promise<string>;
                    valueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
                    valueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
                    valueOf(arg0: object_t): string;
                    valueOfP(arg0: object_t): Promise<string>;
                    valueOf(arg0: object_array_t): string;
                    valueOfP(arg0: object_array_t): Promise<string>;
                    valueOf(arg0: boolean_t): string;
                    valueOfP(arg0: boolean_t): Promise<string>;
                    valueOf(arg0: long_t): string;
                    valueOfP(arg0: long_t): Promise<string>;
                    valueOf(arg0: integer_t): string;
                    valueOfP(arg0: integer_t): Promise<string>;
                    valueOf(arg0: float_t): string;
                    valueOfP(arg0: float_t): Promise<string>;
                    valueOf(arg0: double_t): string;
                    valueOfP(arg0: double_t): Promise<string>;
                    valueOf(arg0: object_t): string;
                    valueOfP(arg0: object_t): Promise<string>;
                }
            }
        }
        module java.nio.charset {
            interface Charset extends Java.java.lang.Object {
                aliases(): Java.Set;
                aliasesP(): Promise<Java.Set>;
                canEncode(): boolean;
                canEncodeP(): Promise<boolean>;
                compareTo(arg0: Java.Charset): number;
                compareToP(arg0: Java.Charset): Promise<number>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                contains(arg0: Java.Charset): boolean;
                containsP(arg0: Java.Charset): Promise<boolean>;
                decode(arg0: object_t): object_t;
                decodeP(arg0: object_t): Promise<object_t>;
                displayName(arg0: object_t): string;
                displayNameP(arg0: object_t): Promise<string>;
                displayName(): string;
                displayNameP(): Promise<string>;
                encode(arg0: object_t): object_t;
                encodeP(arg0: object_t): Promise<object_t>;
                encode(arg0: string_t): object_t;
                encodeP(arg0: string_t): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isRegistered(): boolean;
                isRegisteredP(): Promise<boolean>;
                name(): string;
                nameP(): Promise<string>;
                newDecoder(): object_t;
                newDecoderP(): Promise<object_t>;
                newEncoder(): object_t;
                newEncoderP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Charset {
                interface Static {
                    availableCharsets(): object_t;
                    availableCharsetsP(): Promise<object_t>;
                    defaultCharset(): Java.Charset;
                    defaultCharsetP(): Promise<Java.Charset>;
                    forName(arg0: string_t): Java.Charset;
                    forNameP(arg0: string_t): Promise<Java.Charset>;
                    isSupported(arg0: string_t): boolean;
                    isSupportedP(arg0: string_t): Promise<boolean>;
                }
            }
        }
        module java.nio.charset {
            interface StandardCharsets extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module StandardCharsets {
                interface Static {
                    US_ASCII: Java.Charset;
                    ISO_8859_1: Java.Charset;
                    UTF_8: Java.Charset;
                    UTF_16BE: Java.Charset;
                    UTF_16LE: Java.Charset;
                    UTF_16: Java.Charset;
                }
            }
        }
        module java.util {
            interface AbstractCollection extends Java.java.lang.Object, Java.java.util.Collection {
                add(arg0: object_t): boolean;
                addP(arg0: object_t): Promise<boolean>;
                addAll(arg0: Java.Collection): boolean;
                addAllP(arg0: Java.Collection): Promise<boolean>;
                clear(): void;
                clearP(): Promise<void>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                containsAll(arg0: Java.Collection): boolean;
                containsAllP(arg0: Java.Collection): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                parallelStream(): object_t;
                parallelStreamP(): Promise<object_t>;
                remove(arg0: object_t): boolean;
                removeP(arg0: object_t): Promise<boolean>;
                removeAll(arg0: Java.Collection): boolean;
                removeAllP(arg0: Java.Collection): Promise<boolean>;
                removeIf(arg0: Java.Predicate): boolean;
                removeIfP(arg0: Java.Predicate): Promise<boolean>;
                retainAll(arg0: Java.Collection): boolean;
                retainAllP(arg0: Java.Collection): Promise<boolean>;
                size(): number;
                sizeP(): Promise<number>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                toArray(arg0: object_array_t): object_t[];
                toArrayP(arg0: object_array_t): Promise<object_t[]>;
                toArray(): object_t[];
                toArrayP(): Promise<object_t[]>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module AbstractCollection {
                interface Static {
                }
            }
        }
        module java.util {
            interface AbstractList extends Java.java.util.AbstractCollection, Java.java.util.List {
                add(arg0: integer_t, arg1: object_t): void;
                addP(arg0: integer_t, arg1: object_t): Promise<void>;
                add(arg0: object_t): boolean;
                addP(arg0: object_t): Promise<boolean>;
                addAll(arg0: integer_t, arg1: Java.Collection): boolean;
                addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
                addAll(arg0: Java.Collection): boolean;
                addAllP(arg0: Java.Collection): Promise<boolean>;
                clear(): void;
                clearP(): Promise<void>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                containsAll(arg0: Java.Collection): boolean;
                containsAllP(arg0: Java.Collection): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                get(arg0: integer_t): object_t;
                getP(arg0: integer_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                indexOf(arg0: object_t): number;
                indexOfP(arg0: object_t): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                lastIndexOf(arg0: object_t): number;
                lastIndexOfP(arg0: object_t): Promise<number>;
                listIterator(arg0: integer_t): Java.ListIterator;
                listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
                listIterator(): Java.ListIterator;
                listIteratorP(): Promise<Java.ListIterator>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                parallelStream(): object_t;
                parallelStreamP(): Promise<object_t>;
                remove(arg0: object_t): boolean;
                removeP(arg0: object_t): Promise<boolean>;
                remove(arg0: integer_t): object_t;
                removeP(arg0: integer_t): Promise<object_t>;
                removeAll(arg0: Java.Collection): boolean;
                removeAllP(arg0: Java.Collection): Promise<boolean>;
                removeIf(arg0: Java.Predicate): boolean;
                removeIfP(arg0: Java.Predicate): Promise<boolean>;
                replaceAll(arg0: Java.UnaryOperator): void;
                replaceAllP(arg0: Java.UnaryOperator): Promise<void>;
                retainAll(arg0: Java.Collection): boolean;
                retainAllP(arg0: Java.Collection): Promise<boolean>;
                set(arg0: integer_t, arg1: object_t): object_t;
                setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
                size(): number;
                sizeP(): Promise<number>;
                sort(arg0: Java.Comparator): void;
                sortP(arg0: Java.Comparator): Promise<void>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                subList(arg0: integer_t, arg1: integer_t): Java.List;
                subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
                toArray(arg0: object_array_t): object_t[];
                toArrayP(arg0: object_array_t): Promise<object_t[]>;
                toArray(): object_t[];
                toArrayP(): Promise<object_t[]>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module AbstractList {
                interface Static {
                }
            }
        }
        module java.util {
            interface AbstractMap extends Java.java.lang.Object, Java.java.util.Map {
                clear(): void;
                clearP(): Promise<void>;
                compute(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
                computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
                computeIfPresent(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeIfPresentP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                containsKey(arg0: object_t): boolean;
                containsKeyP(arg0: object_t): Promise<boolean>;
                containsValue(arg0: object_t): boolean;
                containsValueP(arg0: object_t): Promise<boolean>;
                entrySet(): Java.Set;
                entrySetP(): Promise<Java.Set>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                get(arg0: object_t): object_t;
                getP(arg0: object_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getOrDefault(arg0: object_t, arg1: object_t): object_t;
                getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                keySet(): Java.Set;
                keySetP(): Promise<Java.Set>;
                merge(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): object_t;
                mergeP(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                put(arg0: object_t, arg1: object_t): object_t;
                putP(arg0: object_t, arg1: object_t): Promise<object_t>;
                putAll(arg0: Java.Map): void;
                putAllP(arg0: Java.Map): Promise<void>;
                putIfAbsent(arg0: object_t, arg1: object_t): object_t;
                putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
                remove(arg0: object_t, arg1: object_t): boolean;
                removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
                remove(arg0: object_t): object_t;
                removeP(arg0: object_t): Promise<object_t>;
                replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
                replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
                replace(arg0: object_t, arg1: object_t): object_t;
                replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
                replaceAll(arg0: Java.BiFunction): void;
                replaceAllP(arg0: Java.BiFunction): Promise<void>;
                size(): number;
                sizeP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                values(): Java.Collection;
                valuesP(): Promise<Java.Collection>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module AbstractMap {
                interface Static {
                }
            }
        }
        module java.util {
            interface AbstractSet extends Java.java.util.AbstractCollection, Java.java.util.Set {
                add(arg0: object_t): boolean;
                addP(arg0: object_t): Promise<boolean>;
                addAll(arg0: Java.Collection): boolean;
                addAllP(arg0: Java.Collection): Promise<boolean>;
                clear(): void;
                clearP(): Promise<void>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                containsAll(arg0: Java.Collection): boolean;
                containsAllP(arg0: Java.Collection): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                parallelStream(): object_t;
                parallelStreamP(): Promise<object_t>;
                remove(arg0: object_t): boolean;
                removeP(arg0: object_t): Promise<boolean>;
                removeAll(arg0: Java.Collection): boolean;
                removeAllP(arg0: Java.Collection): Promise<boolean>;
                removeIf(arg0: Java.Predicate): boolean;
                removeIfP(arg0: Java.Predicate): Promise<boolean>;
                retainAll(arg0: Java.Collection): boolean;
                retainAllP(arg0: Java.Collection): Promise<boolean>;
                size(): number;
                sizeP(): Promise<number>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                toArray(arg0: object_array_t): object_t[];
                toArrayP(arg0: object_array_t): Promise<object_t[]>;
                toArray(): object_t[];
                toArrayP(): Promise<object_t[]>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module AbstractSet {
                interface Static {
                }
            }
        }
        module java.util {
            interface ArrayList extends Java.java.util.AbstractList, Java.java.util.List {
                add(arg0: integer_t, arg1: object_t): void;
                addP(arg0: integer_t, arg1: object_t): Promise<void>;
                add(arg0: object_t): boolean;
                addP(arg0: object_t): Promise<boolean>;
                addAll(arg0: integer_t, arg1: Java.Collection): boolean;
                addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
                addAll(arg0: Java.Collection): boolean;
                addAllP(arg0: Java.Collection): Promise<boolean>;
                clear(): void;
                clearP(): Promise<void>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                containsAll(arg0: Java.Collection): boolean;
                containsAllP(arg0: Java.Collection): Promise<boolean>;
                ensureCapacity(arg0: integer_t): void;
                ensureCapacityP(arg0: integer_t): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                get(arg0: integer_t): object_t;
                getP(arg0: integer_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                indexOf(arg0: object_t): number;
                indexOfP(arg0: object_t): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                lastIndexOf(arg0: object_t): number;
                lastIndexOfP(arg0: object_t): Promise<number>;
                listIterator(arg0: integer_t): Java.ListIterator;
                listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
                listIterator(): Java.ListIterator;
                listIteratorP(): Promise<Java.ListIterator>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                parallelStream(): object_t;
                parallelStreamP(): Promise<object_t>;
                remove(arg0: object_t): boolean;
                removeP(arg0: object_t): Promise<boolean>;
                remove(arg0: integer_t): object_t;
                removeP(arg0: integer_t): Promise<object_t>;
                removeAll(arg0: Java.Collection): boolean;
                removeAllP(arg0: Java.Collection): Promise<boolean>;
                removeIf(arg0: Java.Predicate): boolean;
                removeIfP(arg0: Java.Predicate): Promise<boolean>;
                replaceAll(arg0: Java.UnaryOperator): void;
                replaceAllP(arg0: Java.UnaryOperator): Promise<void>;
                retainAll(arg0: Java.Collection): boolean;
                retainAllP(arg0: Java.Collection): Promise<boolean>;
                set(arg0: integer_t, arg1: object_t): object_t;
                setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
                size(): number;
                sizeP(): Promise<number>;
                sort(arg0: Java.Comparator): void;
                sortP(arg0: Java.Comparator): Promise<void>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                subList(arg0: integer_t, arg1: integer_t): Java.List;
                subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
                toArray(arg0: object_array_t): object_t[];
                toArrayP(arg0: object_array_t): Promise<object_t[]>;
                toArray(): object_t[];
                toArrayP(): Promise<object_t[]>;
                toString(): string;
                toStringP(): Promise<string>;
                trimToSize(): void;
                trimToSizeP(): Promise<void>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ArrayList {
                interface Static {
                    new (arg0: Java.Collection): java.util.ArrayList;
                    new (arg0: integer_t): java.util.ArrayList;
                    new (): java.util.ArrayList;
                }
            }
        }
        module java.util {
            interface Collection extends Java.java.lang.Iterable {
                add(arg0: object_t): boolean;
                addP(arg0: object_t): Promise<boolean>;
                addAll(arg0: Java.Collection): boolean;
                addAllP(arg0: Java.Collection): Promise<boolean>;
                clear(): void;
                clearP(): Promise<void>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                containsAll(arg0: Java.Collection): boolean;
                containsAllP(arg0: Java.Collection): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                parallelStream(): object_t;
                parallelStreamP(): Promise<object_t>;
                remove(arg0: object_t): boolean;
                removeP(arg0: object_t): Promise<boolean>;
                removeAll(arg0: Java.Collection): boolean;
                removeAllP(arg0: Java.Collection): Promise<boolean>;
                removeIf(arg0: Java.Predicate): boolean;
                removeIfP(arg0: Java.Predicate): Promise<boolean>;
                retainAll(arg0: Java.Collection): boolean;
                retainAllP(arg0: Java.Collection): Promise<boolean>;
                size(): number;
                sizeP(): Promise<number>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                toArray(arg0: object_array_t): object_t[];
                toArrayP(arg0: object_array_t): Promise<object_t[]>;
                toArray(): object_t[];
                toArrayP(): Promise<object_t[]>;
            }
            module Collection {
                interface Static {
                }
            }
        }
        module java.util {
            interface Comparator extends Java.java.lang.Object {
                compare(arg0: object_t, arg1: object_t): number;
                compareP(arg0: object_t, arg1: object_t): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                reversed(): Java.Comparator;
                reversedP(): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function, arg1: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function): Java.Comparator;
                thenComparingP(arg0: Java.Function): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Comparator): Promise<Java.Comparator>;
                thenComparingDouble(arg0: object_t): Java.Comparator;
                thenComparingDoubleP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingInt(arg0: object_t): Java.Comparator;
                thenComparingIntP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingLong(arg0: object_t): Java.Comparator;
                thenComparingLongP(arg0: object_t): Promise<Java.Comparator>;
            }
            module Comparator {
                interface Static {
                    comparing(arg0: Java.Function, arg1: Java.Comparator): Java.Comparator;
                    comparingP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.Comparator>;
                    comparing(arg0: Java.Function): Java.Comparator;
                    comparingP(arg0: Java.Function): Promise<Java.Comparator>;
                    comparingDouble(arg0: object_t): Java.Comparator;
                    comparingDoubleP(arg0: object_t): Promise<Java.Comparator>;
                    comparingInt(arg0: object_t): Java.Comparator;
                    comparingIntP(arg0: object_t): Promise<Java.Comparator>;
                    comparingLong(arg0: object_t): Java.Comparator;
                    comparingLongP(arg0: object_t): Promise<Java.Comparator>;
                    naturalOrder(): Java.Comparator;
                    naturalOrderP(): Promise<Java.Comparator>;
                    nullsFirst(arg0: Java.Comparator): Java.Comparator;
                    nullsFirstP(arg0: Java.Comparator): Promise<Java.Comparator>;
                    nullsLast(arg0: Java.Comparator): Java.Comparator;
                    nullsLastP(arg0: Java.Comparator): Promise<Java.Comparator>;
                    reverseOrder(): Java.Comparator;
                    reverseOrderP(): Promise<Java.Comparator>;
                }
            }
        }
        module java.util.function_ {
            interface BiConsumer extends Java.java.lang.Object {
                accept(arg0: object_t, arg1: object_t): void;
                acceptP(arg0: object_t, arg1: object_t): Promise<void>;
                andThen(arg0: Java.BiConsumer): Java.BiConsumer;
                andThenP(arg0: Java.BiConsumer): Promise<Java.BiConsumer>;
            }
            module BiConsumer {
                interface Static {
                }
            }
        }
        module java.util.function_ {
            interface BiFunction extends Java.java.lang.Object {
                andThen(arg0: Java.Function): Java.BiFunction;
                andThenP(arg0: Java.Function): Promise<Java.BiFunction>;
                apply(arg0: object_t, arg1: object_t): object_t;
                applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
            }
            module BiFunction {
                interface Static {
                }
            }
        }
        module java.util.function_ {
            interface BinaryOperator extends Java.java.util.function_.BiFunction {
                andThen(arg0: Java.Function): Java.BiFunction;
                andThenP(arg0: Java.Function): Promise<Java.BiFunction>;
                apply(arg0: object_t, arg1: object_t): object_t;
                applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
            }
            module BinaryOperator {
                interface Static {
                    maxBy(arg0: Java.Comparator): Java.BinaryOperator;
                    maxByP(arg0: Java.Comparator): Promise<Java.BinaryOperator>;
                    minBy(arg0: Java.Comparator): Java.BinaryOperator;
                    minByP(arg0: Java.Comparator): Promise<Java.BinaryOperator>;
                }
            }
        }
        module java.util.function_ {
            interface BiPredicate extends Java.java.lang.Object {
                and(arg0: Java.BiPredicate): Java.BiPredicate;
                andP(arg0: Java.BiPredicate): Promise<Java.BiPredicate>;
                negate(): Java.BiPredicate;
                negateP(): Promise<Java.BiPredicate>;
                or(arg0: Java.BiPredicate): Java.BiPredicate;
                orP(arg0: Java.BiPredicate): Promise<Java.BiPredicate>;
                test(arg0: object_t, arg1: object_t): boolean;
                testP(arg0: object_t, arg1: object_t): Promise<boolean>;
            }
            module BiPredicate {
                interface Static {
                }
            }
        }
        module java.util.function_ {
            interface Consumer extends Java.java.lang.Object {
                accept(arg0: object_t): void;
                acceptP(arg0: object_t): Promise<void>;
                andThen(arg0: Java.Consumer): Java.Consumer;
                andThenP(arg0: Java.Consumer): Promise<Java.Consumer>;
            }
            module Consumer {
                interface Static {
                }
            }
        }
        module java.util.function_ {
            interface Function extends Java.java.lang.Object {
                andThen(arg0: Java.Function): Java.Function;
                andThenP(arg0: Java.Function): Promise<Java.Function>;
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
                compose(arg0: Java.Function): Java.Function;
                composeP(arg0: Java.Function): Promise<Java.Function>;
            }
            module Function {
                interface Static {
                    identity(): Java.Function;
                    identityP(): Promise<Java.Function>;
                }
            }
        }
        module java.util.function_ {
            interface Predicate extends Java.java.lang.Object {
                and(arg0: Java.Predicate): Java.Predicate;
                andP(arg0: Java.Predicate): Promise<Java.Predicate>;
                negate(): Java.Predicate;
                negateP(): Promise<Java.Predicate>;
                or(arg0: Java.Predicate): Java.Predicate;
                orP(arg0: Java.Predicate): Promise<Java.Predicate>;
                test(arg0: object_t): boolean;
                testP(arg0: object_t): Promise<boolean>;
            }
            module Predicate {
                interface Static {
                    isEqual(arg0: object_t): Java.Predicate;
                    isEqualP(arg0: object_t): Promise<Java.Predicate>;
                }
            }
        }
        module java.util.function_ {
            interface Supplier extends Java.java.lang.Object {
                get(): object_t;
                getP(): Promise<object_t>;
            }
            module Supplier {
                interface Static {
                }
            }
        }
        module java.util.function_ {
            interface UnaryOperator extends Java.java.util.function_.Function {
                andThen(arg0: Java.Function): Java.Function;
                andThenP(arg0: Java.Function): Promise<Java.Function>;
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
                compose(arg0: Java.Function): Java.Function;
                composeP(arg0: Java.Function): Promise<Java.Function>;
            }
            module UnaryOperator {
                interface Static {
                    identity(): Java.UnaryOperator;
                    identityP(): Promise<Java.UnaryOperator>;
                    identity(): Java.Function;
                    identityP(): Promise<Java.Function>;
                }
            }
        }
        module java.util {
            interface HashMap extends Java.java.util.AbstractMap, Java.java.util.Map {
                clear(): void;
                clearP(): Promise<void>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                compute(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
                computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
                computeIfPresent(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeIfPresentP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                containsKey(arg0: object_t): boolean;
                containsKeyP(arg0: object_t): Promise<boolean>;
                containsValue(arg0: object_t): boolean;
                containsValueP(arg0: object_t): Promise<boolean>;
                entrySet(): Java.Set;
                entrySetP(): Promise<Java.Set>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                get(arg0: object_t): object_t;
                getP(arg0: object_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getOrDefault(arg0: object_t, arg1: object_t): object_t;
                getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                keySet(): Java.Set;
                keySetP(): Promise<Java.Set>;
                merge(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): object_t;
                mergeP(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                put(arg0: object_t, arg1: object_t): object_t;
                putP(arg0: object_t, arg1: object_t): Promise<object_t>;
                putAll(arg0: Java.Map): void;
                putAllP(arg0: Java.Map): Promise<void>;
                putIfAbsent(arg0: object_t, arg1: object_t): object_t;
                putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
                remove(arg0: object_t, arg1: object_t): boolean;
                removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
                remove(arg0: object_t): object_t;
                removeP(arg0: object_t): Promise<object_t>;
                replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
                replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
                replace(arg0: object_t, arg1: object_t): object_t;
                replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
                replaceAll(arg0: Java.BiFunction): void;
                replaceAllP(arg0: Java.BiFunction): Promise<void>;
                size(): number;
                sizeP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                values(): Java.Collection;
                valuesP(): Promise<Java.Collection>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module HashMap {
                interface Static {
                    new (arg0: integer_t, arg1: float_t): java.util.HashMap;
                    new (arg0: Java.Map): java.util.HashMap;
                    new (arg0: integer_t): java.util.HashMap;
                    new (): java.util.HashMap;
                }
            }
        }
        module java.util {
            interface HashSet extends Java.java.util.AbstractSet, Java.java.util.Set {
                add(arg0: object_t): boolean;
                addP(arg0: object_t): Promise<boolean>;
                addAll(arg0: Java.Collection): boolean;
                addAllP(arg0: Java.Collection): Promise<boolean>;
                clear(): void;
                clearP(): Promise<void>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                containsAll(arg0: Java.Collection): boolean;
                containsAllP(arg0: Java.Collection): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                parallelStream(): object_t;
                parallelStreamP(): Promise<object_t>;
                remove(arg0: object_t): boolean;
                removeP(arg0: object_t): Promise<boolean>;
                removeAll(arg0: Java.Collection): boolean;
                removeAllP(arg0: Java.Collection): Promise<boolean>;
                removeIf(arg0: Java.Predicate): boolean;
                removeIfP(arg0: Java.Predicate): Promise<boolean>;
                retainAll(arg0: Java.Collection): boolean;
                retainAllP(arg0: Java.Collection): Promise<boolean>;
                size(): number;
                sizeP(): Promise<number>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                toArray(arg0: object_array_t): object_t[];
                toArrayP(arg0: object_array_t): Promise<object_t[]>;
                toArray(): object_t[];
                toArrayP(): Promise<object_t[]>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module HashSet {
                interface Static {
                    new (arg0: integer_t, arg1: float_t): java.util.HashSet;
                    new (arg0: Java.Collection): java.util.HashSet;
                    new (arg0: integer_t): java.util.HashSet;
                    new (): java.util.HashSet;
                }
            }
        }
        module java.util {
            interface Iterator extends Java.java.lang.Object {
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                next(): object_t;
                nextP(): Promise<object_t>;
                remove(): void;
                removeP(): Promise<void>;
            }
            module Iterator {
                interface Static {
                }
            }
        }
        module java.util {
            interface LinkedHashMap extends Java.java.util.HashMap, Java.java.util.Map {
                clear(): void;
                clearP(): Promise<void>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                compute(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
                computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
                computeIfPresent(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeIfPresentP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                containsKey(arg0: object_t): boolean;
                containsKeyP(arg0: object_t): Promise<boolean>;
                containsValue(arg0: object_t): boolean;
                containsValueP(arg0: object_t): Promise<boolean>;
                entrySet(): Java.Set;
                entrySetP(): Promise<Java.Set>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                get(arg0: object_t): object_t;
                getP(arg0: object_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getOrDefault(arg0: object_t, arg1: object_t): object_t;
                getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                keySet(): Java.Set;
                keySetP(): Promise<Java.Set>;
                merge(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): object_t;
                mergeP(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                put(arg0: object_t, arg1: object_t): object_t;
                putP(arg0: object_t, arg1: object_t): Promise<object_t>;
                putAll(arg0: Java.Map): void;
                putAllP(arg0: Java.Map): Promise<void>;
                putIfAbsent(arg0: object_t, arg1: object_t): object_t;
                putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
                remove(arg0: object_t, arg1: object_t): boolean;
                removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
                remove(arg0: object_t): object_t;
                removeP(arg0: object_t): Promise<object_t>;
                replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
                replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
                replace(arg0: object_t, arg1: object_t): object_t;
                replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
                replaceAll(arg0: Java.BiFunction): void;
                replaceAllP(arg0: Java.BiFunction): Promise<void>;
                size(): number;
                sizeP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                values(): Java.Collection;
                valuesP(): Promise<Java.Collection>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module LinkedHashMap {
                interface Static {
                    new (arg0: integer_t, arg1: float_t, arg2: boolean_t): java.util.LinkedHashMap;
                    new (arg0: integer_t, arg1: float_t): java.util.LinkedHashMap;
                    new (arg0: Java.Map): java.util.LinkedHashMap;
                    new (arg0: integer_t): java.util.LinkedHashMap;
                    new (): java.util.LinkedHashMap;
                }
            }
        }
        module java.util {
            interface List extends Java.java.util.Collection {
                add(arg0: integer_t, arg1: object_t): void;
                addP(arg0: integer_t, arg1: object_t): Promise<void>;
                add(arg0: object_t): boolean;
                addP(arg0: object_t): Promise<boolean>;
                addAll(arg0: integer_t, arg1: Java.Collection): boolean;
                addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
                addAll(arg0: Java.Collection): boolean;
                addAllP(arg0: Java.Collection): Promise<boolean>;
                clear(): void;
                clearP(): Promise<void>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                containsAll(arg0: Java.Collection): boolean;
                containsAllP(arg0: Java.Collection): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                get(arg0: integer_t): object_t;
                getP(arg0: integer_t): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                indexOf(arg0: object_t): number;
                indexOfP(arg0: object_t): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                lastIndexOf(arg0: object_t): number;
                lastIndexOfP(arg0: object_t): Promise<number>;
                listIterator(arg0: integer_t): Java.ListIterator;
                listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
                listIterator(): Java.ListIterator;
                listIteratorP(): Promise<Java.ListIterator>;
                parallelStream(): object_t;
                parallelStreamP(): Promise<object_t>;
                remove(arg0: object_t): boolean;
                removeP(arg0: object_t): Promise<boolean>;
                remove(arg0: integer_t): object_t;
                removeP(arg0: integer_t): Promise<object_t>;
                removeAll(arg0: Java.Collection): boolean;
                removeAllP(arg0: Java.Collection): Promise<boolean>;
                removeIf(arg0: Java.Predicate): boolean;
                removeIfP(arg0: Java.Predicate): Promise<boolean>;
                replaceAll(arg0: Java.UnaryOperator): void;
                replaceAllP(arg0: Java.UnaryOperator): Promise<void>;
                retainAll(arg0: Java.Collection): boolean;
                retainAllP(arg0: Java.Collection): Promise<boolean>;
                set(arg0: integer_t, arg1: object_t): object_t;
                setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
                size(): number;
                sizeP(): Promise<number>;
                sort(arg0: Java.Comparator): void;
                sortP(arg0: Java.Comparator): Promise<void>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                subList(arg0: integer_t, arg1: integer_t): Java.List;
                subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
                toArray(arg0: object_array_t): object_t[];
                toArrayP(arg0: object_array_t): Promise<object_t[]>;
                toArray(): object_t[];
                toArrayP(): Promise<object_t[]>;
            }
            module List {
                interface Static {
                }
            }
        }
        module java.util {
            interface ListIterator extends Java.java.util.Iterator {
                add(arg0: object_t): void;
                addP(arg0: object_t): Promise<void>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                hasPrevious(): boolean;
                hasPreviousP(): Promise<boolean>;
                next(): object_t;
                nextP(): Promise<object_t>;
                nextIndex(): number;
                nextIndexP(): Promise<number>;
                previous(): object_t;
                previousP(): Promise<object_t>;
                previousIndex(): number;
                previousIndexP(): Promise<number>;
                remove(): void;
                removeP(): Promise<void>;
                set(arg0: object_t): void;
                setP(arg0: object_t): Promise<void>;
            }
            module ListIterator {
                interface Static {
                }
            }
        }
        module java.util {
            interface Map extends Java.java.lang.Object {
                clear(): void;
                clearP(): Promise<void>;
                compute(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
                computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
                computeIfPresent(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeIfPresentP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                containsKey(arg0: object_t): boolean;
                containsKeyP(arg0: object_t): Promise<boolean>;
                containsValue(arg0: object_t): boolean;
                containsValueP(arg0: object_t): Promise<boolean>;
                entrySet(): Java.Set;
                entrySetP(): Promise<Java.Set>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                get(arg0: object_t): object_t;
                getP(arg0: object_t): Promise<object_t>;
                getOrDefault(arg0: object_t, arg1: object_t): object_t;
                getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                keySet(): Java.Set;
                keySetP(): Promise<Java.Set>;
                merge(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): object_t;
                mergeP(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): Promise<object_t>;
                put(arg0: object_t, arg1: object_t): object_t;
                putP(arg0: object_t, arg1: object_t): Promise<object_t>;
                putAll(arg0: Java.Map): void;
                putAllP(arg0: Java.Map): Promise<void>;
                putIfAbsent(arg0: object_t, arg1: object_t): object_t;
                putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
                remove(arg0: object_t, arg1: object_t): boolean;
                removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
                remove(arg0: object_t): object_t;
                removeP(arg0: object_t): Promise<object_t>;
                replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
                replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
                replace(arg0: object_t, arg1: object_t): object_t;
                replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
                replaceAll(arg0: Java.BiFunction): void;
                replaceAllP(arg0: Java.BiFunction): Promise<void>;
                size(): number;
                sizeP(): Promise<number>;
                values(): Java.Collection;
                valuesP(): Promise<Java.Collection>;
            }
            module Map {
                interface Static {
                }
            }
        }
        module java.util {
            interface Map$Entry extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getKey(): object_t;
                getKeyP(): Promise<object_t>;
                getValue(): object_t;
                getValueP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                setValue(arg0: object_t): object_t;
                setValueP(arg0: object_t): Promise<object_t>;
            }
            module Map$Entry {
                interface Static {
                    comparingByKey(arg0: Java.Comparator): Java.Comparator;
                    comparingByKeyP(arg0: Java.Comparator): Promise<Java.Comparator>;
                    comparingByKey(): Java.Comparator;
                    comparingByKeyP(): Promise<Java.Comparator>;
                    comparingByValue(arg0: Java.Comparator): Java.Comparator;
                    comparingByValueP(arg0: Java.Comparator): Promise<Java.Comparator>;
                    comparingByValue(): Java.Comparator;
                    comparingByValueP(): Promise<Java.Comparator>;
                }
            }
        }
        module java.util {
            interface NoSuchElementException extends Java.java.lang.Object {
                addSuppressed(arg0: object_t): void;
                addSuppressedP(arg0: object_t): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                fillInStackTrace(): object_t;
                fillInStackTraceP(): Promise<object_t>;
                getCause(): object_t;
                getCauseP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getLocalizedMessage(): string;
                getLocalizedMessageP(): Promise<string>;
                getMessage(): string;
                getMessageP(): Promise<string>;
                getStackTrace(): object_t[];
                getStackTraceP(): Promise<object_t[]>;
                getSuppressed(): object_t[];
                getSuppressedP(): Promise<object_t[]>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                initCause(arg0: object_t): object_t;
                initCauseP(arg0: object_t): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                printStackTrace(arg0: object_t): void;
                printStackTraceP(arg0: object_t): Promise<void>;
                printStackTrace(arg0: object_t): void;
                printStackTraceP(arg0: object_t): Promise<void>;
                printStackTrace(): void;
                printStackTraceP(): Promise<void>;
                setStackTrace(arg0: object_array_t): void;
                setStackTraceP(arg0: object_array_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module NoSuchElementException {
                interface Static {
                    new (arg0: string_t): java.util.NoSuchElementException;
                    new (): java.util.NoSuchElementException;
                }
            }
        }
        module java.util {
            interface Set extends Java.java.util.Collection {
                add(arg0: object_t): boolean;
                addP(arg0: object_t): Promise<boolean>;
                addAll(arg0: Java.Collection): boolean;
                addAllP(arg0: Java.Collection): Promise<boolean>;
                clear(): void;
                clearP(): Promise<void>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                containsAll(arg0: Java.Collection): boolean;
                containsAllP(arg0: Java.Collection): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                parallelStream(): object_t;
                parallelStreamP(): Promise<object_t>;
                remove(arg0: object_t): boolean;
                removeP(arg0: object_t): Promise<boolean>;
                removeAll(arg0: Java.Collection): boolean;
                removeAllP(arg0: Java.Collection): Promise<boolean>;
                removeIf(arg0: Java.Predicate): boolean;
                removeIfP(arg0: Java.Predicate): Promise<boolean>;
                retainAll(arg0: Java.Collection): boolean;
                retainAllP(arg0: Java.Collection): Promise<boolean>;
                size(): number;
                sizeP(): Promise<number>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                toArray(arg0: object_array_t): object_t[];
                toArrayP(arg0: object_array_t): Promise<object_t[]>;
                toArray(): object_t[];
                toArrayP(): Promise<object_t[]>;
            }
            module Set {
                interface Static {
                }
            }
        }
        module javax.script {
            interface AbstractScriptEngine extends Java.java.lang.Object, Java.javax.script.ScriptEngine {
                createBindings(): Java.Bindings;
                createBindingsP(): Promise<Java.Bindings>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                eval(arg0: string_t, arg1: Java.ScriptContext): object_t;
                evalP(arg0: string_t, arg1: Java.ScriptContext): Promise<object_t>;
                eval(arg0: object_t, arg1: Java.ScriptContext): object_t;
                evalP(arg0: object_t, arg1: Java.ScriptContext): Promise<object_t>;
                eval(arg0: string_t, arg1: Java.Bindings): object_t;
                evalP(arg0: string_t, arg1: Java.Bindings): Promise<object_t>;
                eval(arg0: object_t, arg1: Java.Bindings): object_t;
                evalP(arg0: object_t, arg1: Java.Bindings): Promise<object_t>;
                eval(arg0: string_t): object_t;
                evalP(arg0: string_t): Promise<object_t>;
                eval(arg0: object_t): object_t;
                evalP(arg0: object_t): Promise<object_t>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                getBindings(arg0: integer_t): Java.Bindings;
                getBindingsP(arg0: integer_t): Promise<Java.Bindings>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getContext(): Java.ScriptContext;
                getContextP(): Promise<Java.ScriptContext>;
                getFactory(): Java.ScriptEngineFactory;
                getFactoryP(): Promise<Java.ScriptEngineFactory>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                put(arg0: string_t, arg1: object_t): void;
                putP(arg0: string_t, arg1: object_t): Promise<void>;
                setBindings(arg0: Java.Bindings, arg1: integer_t): void;
                setBindingsP(arg0: Java.Bindings, arg1: integer_t): Promise<void>;
                setContext(arg0: Java.ScriptContext): void;
                setContextP(arg0: Java.ScriptContext): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module AbstractScriptEngine {
                interface Static {
                    ARGV: string;
                    FILENAME: string;
                    ENGINE: string;
                    ENGINE_VERSION: string;
                    NAME: string;
                    LANGUAGE: string;
                    LANGUAGE_VERSION: string;
                    new (arg0: Java.Bindings): javax.script.AbstractScriptEngine;
                    new (): javax.script.AbstractScriptEngine;
                }
            }
        }
        module javax.script {
            interface Bindings extends Java.java.util.Map {
                clear(): void;
                clearP(): Promise<void>;
                compute(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
                computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
                computeIfPresent(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeIfPresentP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                containsKey(arg0: object_t): boolean;
                containsKeyP(arg0: object_t): Promise<boolean>;
                containsValue(arg0: object_t): boolean;
                containsValueP(arg0: object_t): Promise<boolean>;
                entrySet(): Java.Set;
                entrySetP(): Promise<Java.Set>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                get(arg0: object_t): object_t;
                getP(arg0: object_t): Promise<object_t>;
                getOrDefault(arg0: object_t, arg1: object_t): object_t;
                getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                keySet(): Java.Set;
                keySetP(): Promise<Java.Set>;
                merge(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): object_t;
                mergeP(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): Promise<object_t>;
                put(arg0: string_t, arg1: object_t): object_t;
                putP(arg0: string_t, arg1: object_t): Promise<object_t>;
                put(arg0: object_t, arg1: object_t): object_t;
                putP(arg0: object_t, arg1: object_t): Promise<object_t>;
                putAll(arg0: Java.Map): void;
                putAllP(arg0: Java.Map): Promise<void>;
                putIfAbsent(arg0: object_t, arg1: object_t): object_t;
                putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
                remove(arg0: object_t, arg1: object_t): boolean;
                removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
                remove(arg0: object_t): object_t;
                removeP(arg0: object_t): Promise<object_t>;
                replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
                replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
                replace(arg0: object_t, arg1: object_t): object_t;
                replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
                replaceAll(arg0: Java.BiFunction): void;
                replaceAllP(arg0: Java.BiFunction): Promise<void>;
                size(): number;
                sizeP(): Promise<number>;
                values(): Java.Collection;
                valuesP(): Promise<Java.Collection>;
            }
            module Bindings {
                interface Static {
                }
            }
        }
        module javax.script {
            interface CompiledScript extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                eval(arg0: Java.ScriptContext): object_t;
                evalP(arg0: Java.ScriptContext): Promise<object_t>;
                eval(arg0: Java.Bindings): object_t;
                evalP(arg0: Java.Bindings): Promise<object_t>;
                eval(): object_t;
                evalP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getEngine(): Java.ScriptEngine;
                getEngineP(): Promise<Java.ScriptEngine>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module CompiledScript {
                interface Static {
                    new (): javax.script.CompiledScript;
                }
            }
        }
        module javax.script {
            interface ScriptContext extends Java.java.lang.Object {
                getAttribute(arg0: string_t, arg1: integer_t): object_t;
                getAttributeP(arg0: string_t, arg1: integer_t): Promise<object_t>;
                getAttribute(arg0: string_t): object_t;
                getAttributeP(arg0: string_t): Promise<object_t>;
                getAttributesScope(arg0: string_t): number;
                getAttributesScopeP(arg0: string_t): Promise<number>;
                getBindings(arg0: integer_t): Java.Bindings;
                getBindingsP(arg0: integer_t): Promise<Java.Bindings>;
                getErrorWriter(): object_t;
                getErrorWriterP(): Promise<object_t>;
                getReader(): object_t;
                getReaderP(): Promise<object_t>;
                getScopes(): Java.List;
                getScopesP(): Promise<Java.List>;
                getWriter(): object_t;
                getWriterP(): Promise<object_t>;
                removeAttribute(arg0: string_t, arg1: integer_t): object_t;
                removeAttributeP(arg0: string_t, arg1: integer_t): Promise<object_t>;
                setAttribute(arg0: string_t, arg1: object_t, arg2: integer_t): void;
                setAttributeP(arg0: string_t, arg1: object_t, arg2: integer_t): Promise<void>;
                setBindings(arg0: Java.Bindings, arg1: integer_t): void;
                setBindingsP(arg0: Java.Bindings, arg1: integer_t): Promise<void>;
                setErrorWriter(arg0: object_t): void;
                setErrorWriterP(arg0: object_t): Promise<void>;
                setReader(arg0: object_t): void;
                setReaderP(arg0: object_t): Promise<void>;
                setWriter(arg0: object_t): void;
                setWriterP(arg0: object_t): Promise<void>;
            }
            module ScriptContext {
                interface Static {
                    ENGINE_SCOPE: number;
                    GLOBAL_SCOPE: number;
                }
            }
        }
        module javax.script {
            interface ScriptEngine extends Java.java.lang.Object {
                createBindings(): Java.Bindings;
                createBindingsP(): Promise<Java.Bindings>;
                eval(arg0: string_t, arg1: Java.ScriptContext): object_t;
                evalP(arg0: string_t, arg1: Java.ScriptContext): Promise<object_t>;
                eval(arg0: object_t, arg1: Java.ScriptContext): object_t;
                evalP(arg0: object_t, arg1: Java.ScriptContext): Promise<object_t>;
                eval(arg0: string_t, arg1: Java.Bindings): object_t;
                evalP(arg0: string_t, arg1: Java.Bindings): Promise<object_t>;
                eval(arg0: object_t, arg1: Java.Bindings): object_t;
                evalP(arg0: object_t, arg1: Java.Bindings): Promise<object_t>;
                eval(arg0: string_t): object_t;
                evalP(arg0: string_t): Promise<object_t>;
                eval(arg0: object_t): object_t;
                evalP(arg0: object_t): Promise<object_t>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                getBindings(arg0: integer_t): Java.Bindings;
                getBindingsP(arg0: integer_t): Promise<Java.Bindings>;
                getContext(): Java.ScriptContext;
                getContextP(): Promise<Java.ScriptContext>;
                getFactory(): Java.ScriptEngineFactory;
                getFactoryP(): Promise<Java.ScriptEngineFactory>;
                put(arg0: string_t, arg1: object_t): void;
                putP(arg0: string_t, arg1: object_t): Promise<void>;
                setBindings(arg0: Java.Bindings, arg1: integer_t): void;
                setBindingsP(arg0: Java.Bindings, arg1: integer_t): Promise<void>;
                setContext(arg0: Java.ScriptContext): void;
                setContextP(arg0: Java.ScriptContext): Promise<void>;
            }
            module ScriptEngine {
                interface Static {
                    ARGV: string;
                    FILENAME: string;
                    ENGINE: string;
                    ENGINE_VERSION: string;
                    NAME: string;
                    LANGUAGE: string;
                    LANGUAGE_VERSION: string;
                }
            }
        }
        module javax.script {
            interface ScriptEngineFactory extends Java.java.lang.Object {
                getEngineName(): string;
                getEngineNameP(): Promise<string>;
                getEngineVersion(): string;
                getEngineVersionP(): Promise<string>;
                getExtensions(): Java.List;
                getExtensionsP(): Promise<Java.List>;
                getLanguageName(): string;
                getLanguageNameP(): Promise<string>;
                getLanguageVersion(): string;
                getLanguageVersionP(): Promise<string>;
                getMethodCallSyntax(arg0: string_t, arg1: string_t, ...arg2: string_t[]): string;
                getMethodCallSyntax(arg0: string_t, arg1: string_t, arg2: array_t<string_t>): string;
                getMethodCallSyntaxP(arg0: string_t, arg1: string_t, ...arg2: string_t[]): Promise<string>;
                getMethodCallSyntaxP(arg0: string_t, arg1: string_t, arg2: array_t<string_t>): Promise<string>;
                getMimeTypes(): Java.List;
                getMimeTypesP(): Promise<Java.List>;
                getNames(): Java.List;
                getNamesP(): Promise<Java.List>;
                getOutputStatement(arg0: string_t): string;
                getOutputStatementP(arg0: string_t): Promise<string>;
                getParameter(arg0: string_t): object_t;
                getParameterP(arg0: string_t): Promise<object_t>;
                getProgram(...arg0: string_t[]): string;
                getProgram(arg0: array_t<string_t>): string;
                getProgramP(...arg0: string_t[]): Promise<string>;
                getProgramP(arg0: array_t<string_t>): Promise<string>;
                getScriptEngine(): Java.ScriptEngine;
                getScriptEngineP(): Promise<Java.ScriptEngine>;
            }
            module ScriptEngineFactory {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.groovy.function_ {
            interface GComparator extends Java.java.lang.Object, Java.java.util.Comparator {
                compare(arg0: object_t, arg1: object_t): number;
                compareP(arg0: object_t, arg1: object_t): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reversed(): Java.Comparator;
                reversedP(): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function, arg1: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function): Java.Comparator;
                thenComparingP(arg0: Java.Function): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Comparator): Promise<Java.Comparator>;
                thenComparingDouble(arg0: object_t): Java.Comparator;
                thenComparingDoubleP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingInt(arg0: object_t): Java.Comparator;
                thenComparingIntP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingLong(arg0: object_t): Java.Comparator;
                thenComparingLongP(arg0: object_t): Promise<Java.Comparator>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GComparator {
                interface Static {
                    new (arg0: Java.Closure): org.apache.tinkerpop.gremlin.groovy.function_.GComparator;
                    make(...arg0: Java.Closure[]): Java.GComparator[];
                    make(arg0: array_t<Java.Closure>): Java.GComparator[];
                    makeP(...arg0: Java.Closure[]): Promise<Java.GComparator[]>;
                    makeP(arg0: array_t<Java.Closure>): Promise<Java.GComparator[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.groovy.function_ {
            interface GFunction extends Java.java.lang.Object, Java.java.util.function_.Function {
                andThen(arg0: Java.Function): Java.Function;
                andThenP(arg0: Java.Function): Promise<Java.Function>;
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
                compose(arg0: Java.Function): Java.Function;
                composeP(arg0: Java.Function): Promise<Java.Function>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GFunction {
                interface Static {
                    new (arg0: Java.Closure): org.apache.tinkerpop.gremlin.groovy.function_.GFunction;
                    make(...arg0: Java.Closure[]): Java.GFunction[];
                    make(arg0: array_t<Java.Closure>): Java.GFunction[];
                    makeP(...arg0: Java.Closure[]): Promise<Java.GFunction[]>;
                    makeP(arg0: array_t<Java.Closure>): Promise<Java.GFunction[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.groovy.function_ {
            interface GSupplier extends Java.java.lang.Object, Java.java.util.function_.Supplier {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GSupplier {
                interface Static {
                    new (arg0: Java.Closure): org.apache.tinkerpop.gremlin.groovy.function_.GSupplier;
                    make(...arg0: Java.Closure[]): Java.GSupplier[];
                    make(arg0: array_t<Java.Closure>): Java.GSupplier[];
                    makeP(...arg0: Java.Closure[]): Promise<Java.GSupplier[]>;
                    makeP(arg0: array_t<Java.Closure>): Promise<Java.GSupplier[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.groovy.function_ {
            interface GUnaryOperator extends Java.java.lang.Object, Java.java.util.function_.UnaryOperator {
                andThen(arg0: Java.Function): Java.Function;
                andThenP(arg0: Java.Function): Promise<Java.Function>;
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
                compose(arg0: Java.Function): Java.Function;
                composeP(arg0: Java.Function): Promise<Java.Function>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GUnaryOperator {
                interface Static {
                    new (arg0: Java.Closure): org.apache.tinkerpop.gremlin.groovy.function_.GUnaryOperator;
                    make(...arg0: Java.Closure[]): Java.GUnaryOperator[];
                    make(arg0: array_t<Java.Closure>): Java.GUnaryOperator[];
                    makeP(...arg0: Java.Closure[]): Promise<Java.GUnaryOperator[]>;
                    makeP(arg0: array_t<Java.Closure>): Promise<Java.GUnaryOperator[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.groovy.jsr223 {
            interface GremlinGroovyScriptEngine extends Java.javax.script.AbstractScriptEngine {
                addImports(arg0: Java.Set): void;
                addImportsP(arg0: Java.Set): Promise<void>;
                close(): void;
                closeP(): Promise<void>;
                compile(arg0: string_t): Java.CompiledScript;
                compileP(arg0: string_t): Promise<Java.CompiledScript>;
                compile(arg0: object_t): Java.CompiledScript;
                compileP(arg0: object_t): Promise<Java.CompiledScript>;
                createBindings(): Java.Bindings;
                createBindingsP(): Promise<Java.Bindings>;
                dependencies(): Java.Map[];
                dependenciesP(): Promise<Java.Map[]>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                eval(arg0: string_t, arg1: Java.ScriptContext): object_t;
                evalP(arg0: string_t, arg1: Java.ScriptContext): Promise<object_t>;
                eval(arg0: object_t, arg1: Java.ScriptContext): object_t;
                evalP(arg0: object_t, arg1: Java.ScriptContext): Promise<object_t>;
                eval(arg0: string_t, arg1: Java.Bindings): object_t;
                evalP(arg0: string_t, arg1: Java.Bindings): Promise<object_t>;
                eval(arg0: object_t, arg1: Java.Bindings): object_t;
                evalP(arg0: object_t, arg1: Java.Bindings): Promise<object_t>;
                eval(arg0: string_t): object_t;
                evalP(arg0: string_t): Promise<object_t>;
                eval(arg0: object_t): object_t;
                evalP(arg0: object_t): Promise<object_t>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                getBindings(arg0: integer_t): Java.Bindings;
                getBindingsP(arg0: integer_t): Promise<Java.Bindings>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getClassLoader(): Java.GroovyClassLoader;
                getClassLoaderP(): Promise<Java.GroovyClassLoader>;
                getContext(): Java.ScriptContext;
                getContextP(): Promise<Java.ScriptContext>;
                getFactory(): Java.ScriptEngineFactory;
                getFactoryP(): Promise<Java.ScriptEngineFactory>;
                getInterface(arg0: object_t, arg1: Java.Class): object_t;
                getInterfaceP(arg0: object_t, arg1: Java.Class): Promise<object_t>;
                getInterface(arg0: Java.Class): object_t;
                getInterfaceP(arg0: Java.Class): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                imports(): Java.Map;
                importsP(): Promise<Java.Map>;
                invokeFunction(arg0: string_t, ...arg1: object_t[]): object_t;
                invokeFunction(arg0: string_t, arg1: object_array_t): object_t;
                invokeFunctionP(arg0: string_t, ...arg1: object_t[]): Promise<object_t>;
                invokeFunctionP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
                invokeMethod(arg0: object_t, arg1: string_t, ...arg2: object_t[]): object_t;
                invokeMethod(arg0: object_t, arg1: string_t, arg2: object_array_t): object_t;
                invokeMethodP(arg0: object_t, arg1: string_t, ...arg2: object_t[]): Promise<object_t>;
                invokeMethodP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<object_t>;
                loadPlugins(arg0: Java.List): void;
                loadPluginsP(arg0: Java.List): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                plugins(): Java.Set;
                pluginsP(): Promise<Java.Set>;
                put(arg0: string_t, arg1: object_t): void;
                putP(arg0: string_t, arg1: object_t): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                setBindings(arg0: Java.Bindings, arg1: integer_t): void;
                setBindingsP(arg0: Java.Bindings, arg1: integer_t): Promise<void>;
                setClassLoader(arg0: Java.GroovyClassLoader): void;
                setClassLoaderP(arg0: Java.GroovyClassLoader): Promise<void>;
                setContext(arg0: Java.ScriptContext): void;
                setContextP(arg0: Java.ScriptContext): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                use(arg0: string_t, arg1: string_t, arg2: string_t): Java.List;
                useP(arg0: string_t, arg1: string_t, arg2: string_t): Promise<Java.List>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GremlinGroovyScriptEngine {
                interface Static {
                    DEFAULT_SCRIPT_EVALUATION_TIMEOUT: longValue_t;
                    KEY_REFERENCE_TYPE: string;
                    REFERENCE_TYPE_PHANTOM: string;
                    REFERENCE_TYPE_WEAK: string;
                    REFERENCE_TYPE_SOFT: string;
                    REFERENCE_TYPE_HARD: string;
                    ARGV: string;
                    FILENAME: string;
                    ENGINE: string;
                    ENGINE_VERSION: string;
                    NAME: string;
                    LANGUAGE: string;
                    LANGUAGE_VERSION: string;
                    new (arg0: object_t, arg1: object_t, arg2: long_t): org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
                    new (arg0: object_t, arg1: object_t): org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
                    new (arg0: object_t): org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
                    new (): org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
            interface ClusterCountMapReduce extends Java.java.lang.Object {
                addResultToMemory(arg0: Java.Memory$Admin, arg1: Java.Iterator): void;
                addResultToMemoryP(arg0: Java.Memory$Admin, arg1: Java.Iterator): Promise<void>;
                clone(): Java.MapReduce;
                cloneP(): Promise<Java.MapReduce>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                combine(arg0: Java.MapReduce$NullObject, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                combineP(arg0: Java.MapReduce$NullObject, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                combine(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                combineP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                doStage(arg0: Java.MapReduce$Stage): boolean;
                doStageP(arg0: Java.MapReduce$Stage): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                generateFinalResult(arg0: Java.Iterator): number;
                generateFinalResultP(arg0: Java.Iterator): Promise<number>;
                generateFinalResult(arg0: Java.Iterator): object_t;
                generateFinalResultP(arg0: Java.Iterator): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getMapKeySort(): object_t;
                getMapKeySortP(): Promise<object_t>;
                getMemoryKey(): string;
                getMemoryKeyP(): Promise<string>;
                getReduceKeySort(): object_t;
                getReduceKeySortP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                loadState(arg0: Java.Graph, arg1: object_t): void;
                loadStateP(arg0: Java.Graph, arg1: object_t): Promise<void>;
                map(arg0: Java.Vertex, arg1: Java.MapReduce$MapEmitter): void;
                mapP(arg0: Java.Vertex, arg1: Java.MapReduce$MapEmitter): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reduce(arg0: Java.MapReduce$NullObject, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                reduceP(arg0: Java.MapReduce$NullObject, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                reduce(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                reduceP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                storeState(arg0: object_t): void;
                storeStateP(arg0: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                workerEnd(arg0: Java.MapReduce$Stage): void;
                workerEndP(arg0: Java.MapReduce$Stage): Promise<void>;
                workerStart(arg0: Java.MapReduce$Stage): void;
                workerStartP(arg0: Java.MapReduce$Stage): Promise<void>;
            }
            module ClusterCountMapReduce {
                interface Static {
                    CLUSTER_COUNT_MEMORY_KEY: string;
                    DEFAULT_MEMORY_KEY: string;
                    MAP_REDUCE: string;
                    build(): Java.ClusterCountMapReduce$Builder;
                    buildP(): Promise<Java.ClusterCountMapReduce$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
            interface ClusterCountMapReduce$Builder extends Java.java.lang.Object {
                create(): Java.ClusterCountMapReduce;
                createP(): Promise<Java.ClusterCountMapReduce>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                memoryKey(arg0: string_t): Java.ClusterCountMapReduce$Builder;
                memoryKeyP(arg0: string_t): Promise<Java.ClusterCountMapReduce$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ClusterCountMapReduce$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
            interface ClusterPopulationMapReduce extends Java.java.lang.Object {
                addResultToMemory(arg0: Java.Memory$Admin, arg1: Java.Iterator): void;
                addResultToMemoryP(arg0: Java.Memory$Admin, arg1: Java.Iterator): Promise<void>;
                clone(): Java.MapReduce;
                cloneP(): Promise<Java.MapReduce>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                combine(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                combineP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                combine(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                combineP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                doStage(arg0: Java.MapReduce$Stage): boolean;
                doStageP(arg0: Java.MapReduce$Stage): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                generateFinalResult(arg0: Java.Iterator): object_t;
                generateFinalResultP(arg0: Java.Iterator): Promise<object_t>;
                generateFinalResult(arg0: Java.Iterator): Java.Map;
                generateFinalResultP(arg0: Java.Iterator): Promise<Java.Map>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getMapKeySort(): object_t;
                getMapKeySortP(): Promise<object_t>;
                getMemoryKey(): string;
                getMemoryKeyP(): Promise<string>;
                getReduceKeySort(): object_t;
                getReduceKeySortP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                loadState(arg0: Java.Graph, arg1: object_t): void;
                loadStateP(arg0: Java.Graph, arg1: object_t): Promise<void>;
                map(arg0: Java.Vertex, arg1: Java.MapReduce$MapEmitter): void;
                mapP(arg0: Java.Vertex, arg1: Java.MapReduce$MapEmitter): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reduce(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                reduceP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                reduce(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                reduceP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                storeState(arg0: object_t): void;
                storeStateP(arg0: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                workerEnd(arg0: Java.MapReduce$Stage): void;
                workerEndP(arg0: Java.MapReduce$Stage): Promise<void>;
                workerStart(arg0: Java.MapReduce$Stage): void;
                workerStartP(arg0: Java.MapReduce$Stage): Promise<void>;
            }
            module ClusterPopulationMapReduce {
                interface Static {
                    CLUSTER_POPULATION_MEMORY_KEY: string;
                    DEFAULT_MEMORY_KEY: string;
                    MAP_REDUCE: string;
                    build(): Java.ClusterPopulationMapReduce$Builder;
                    buildP(): Promise<Java.ClusterPopulationMapReduce$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
            interface ClusterPopulationMapReduce$Builder extends Java.java.lang.Object {
                create(): Java.ClusterPopulationMapReduce;
                createP(): Promise<Java.ClusterPopulationMapReduce>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                memoryKey(arg0: string_t): Java.ClusterPopulationMapReduce$Builder;
                memoryKeyP(arg0: string_t): Promise<Java.ClusterPopulationMapReduce$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ClusterPopulationMapReduce$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
            interface PeerPressureVertexProgram extends Java.java.lang.Object {
                clone(): object_t;
                cloneP(): Promise<object_t>;
                clone(): Java.VertexProgram;
                cloneP(): Promise<Java.VertexProgram>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                execute(arg0: Java.Vertex, arg1: Java.Messenger, arg2: Java.Memory): void;
                executeP(arg0: Java.Vertex, arg1: Java.Messenger, arg2: Java.Memory): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getElementComputeKeys(): Java.Set;
                getElementComputeKeysP(): Promise<Java.Set>;
                getFeatures(): Java.VertexProgram$Features;
                getFeaturesP(): Promise<Java.VertexProgram$Features>;
                getMapReducers(): Java.Set;
                getMapReducersP(): Promise<Java.Set>;
                getMemoryComputeKeys(): Java.Set;
                getMemoryComputeKeysP(): Promise<Java.Set>;
                getMessageCombiner(): object_t;
                getMessageCombinerP(): Promise<object_t>;
                getMessageScopes(arg0: Java.Memory): Java.Set;
                getMessageScopesP(arg0: Java.Memory): Promise<Java.Set>;
                getPreferredPersist(): Java.GraphComputer$Persist;
                getPreferredPersistP(): Promise<Java.GraphComputer$Persist>;
                getPreferredResultGraph(): Java.GraphComputer$ResultGraph;
                getPreferredResultGraphP(): Promise<Java.GraphComputer$ResultGraph>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                loadState(arg0: Java.Graph, arg1: object_t): void;
                loadStateP(arg0: Java.Graph, arg1: object_t): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setup(arg0: Java.Memory): void;
                setupP(arg0: Java.Memory): Promise<void>;
                storeState(arg0: object_t): void;
                storeStateP(arg0: object_t): Promise<void>;
                terminate(arg0: Java.Memory): boolean;
                terminateP(arg0: Java.Memory): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                workerIterationEnd(arg0: Java.Memory): void;
                workerIterationEndP(arg0: Java.Memory): Promise<void>;
                workerIterationStart(arg0: Java.Memory): void;
                workerIterationStartP(arg0: Java.Memory): Promise<void>;
            }
            module PeerPressureVertexProgram {
                interface Static {
                    CLUSTER: string;
                    VOTE_STRENGTH: string;
                    VERTEX_PROGRAM: string;
                    build(): Java.PeerPressureVertexProgram$Builder;
                    buildP(): Promise<Java.PeerPressureVertexProgram$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.clustering.peerpressure {
            interface PeerPressureVertexProgram$Builder extends Java.java.lang.Object {
                configure(...arg0: object_t[]): Java.VertexProgram$Builder;
                configure(arg0: object_array_t): Java.VertexProgram$Builder;
                configureP(...arg0: object_t[]): Promise<Java.VertexProgram$Builder>;
                configureP(arg0: object_array_t): Promise<Java.VertexProgram$Builder>;
                create(arg0: Java.Graph): Java.VertexProgram;
                createP(arg0: Java.Graph): Promise<Java.VertexProgram>;
                distributeVote(arg0: boolean_t): Java.PeerPressureVertexProgram$Builder;
                distributeVoteP(arg0: boolean_t): Promise<Java.PeerPressureVertexProgram$Builder>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                maxIterations(arg0: integer_t): Java.PeerPressureVertexProgram$Builder;
                maxIterationsP(arg0: integer_t): Promise<Java.PeerPressureVertexProgram$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                traversal(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Java.PeerPressureVertexProgram$Builder;
                traversal(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): Java.PeerPressureVertexProgram$Builder;
                traversalP(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<Java.PeerPressureVertexProgram$Builder>;
                traversalP(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<Java.PeerPressureVertexProgram$Builder>;
                traversal(arg0: Java.Traversal$Admin): Java.PeerPressureVertexProgram$Builder;
                traversalP(arg0: Java.Traversal$Admin): Promise<Java.PeerPressureVertexProgram$Builder>;
                traversal(arg0: Java.Class): Java.PeerPressureVertexProgram$Builder;
                traversalP(arg0: Java.Class): Promise<Java.PeerPressureVertexProgram$Builder>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module PeerPressureVertexProgram$Builder {
                interface Static {
                    GREMLIN_GROOVY: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface ComputerResult extends Java.java.lang.Object {
                close(): void;
                closeP(): Promise<void>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                memory(): Java.Memory;
                memoryP(): Promise<Java.Memory>;
            }
            module ComputerResult {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface GraphComputer extends Java.java.lang.Object {
                features(): Java.GraphComputer$Features;
                featuresP(): Promise<Java.GraphComputer$Features>;
                mapReduce(arg0: Java.MapReduce): Java.GraphComputer;
                mapReduceP(arg0: Java.MapReduce): Promise<Java.GraphComputer>;
                persist(arg0: Java.GraphComputer$Persist): Java.GraphComputer;
                persistP(arg0: Java.GraphComputer$Persist): Promise<Java.GraphComputer>;
                program(arg0: Java.VertexProgram): Java.GraphComputer;
                programP(arg0: Java.VertexProgram): Promise<Java.GraphComputer>;
                result(arg0: Java.GraphComputer$ResultGraph): Java.GraphComputer;
                resultP(arg0: Java.GraphComputer$ResultGraph): Promise<Java.GraphComputer>;
                submit(): object_t;
                submitP(): Promise<object_t>;
            }
            module GraphComputer {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface GraphComputer$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphComputer$Exceptions {
                interface Static {
                    adjacentVertexEdgesAndVerticesCanNotBeReadOrUpdated(): object_t;
                    adjacentVertexEdgesAndVerticesCanNotBeReadOrUpdatedP(): Promise<object_t>;
                    adjacentVertexLabelsCanNotBeRead(): object_t;
                    adjacentVertexLabelsCanNotBeReadP(): Promise<object_t>;
                    adjacentVertexPropertiesCanNotBeReadOrUpdated(): object_t;
                    adjacentVertexPropertiesCanNotBeReadOrUpdatedP(): Promise<object_t>;
                    computerHasAlreadyBeenSubmittedAVertexProgram(): object_t;
                    computerHasAlreadyBeenSubmittedAVertexProgramP(): Promise<object_t>;
                    computerHasNoVertexProgramNorMapReducers(): object_t;
                    computerHasNoVertexProgramNorMapReducersP(): Promise<object_t>;
                    incidentAndAdjacentElementsCanNotBeAccessedInMapReduce(): object_t;
                    incidentAndAdjacentElementsCanNotBeAccessedInMapReduceP(): Promise<object_t>;
                    providedKeyIsNotAMemoryComputeKey(arg0: string_t): object_t;
                    providedKeyIsNotAMemoryComputeKeyP(arg0: string_t): Promise<object_t>;
                    providedKeyIsNotAnElementComputeKey(arg0: string_t): object_t;
                    providedKeyIsNotAnElementComputeKeyP(arg0: string_t): Promise<object_t>;
                    resultGraphPersistCombinationNotSupported(arg0: Java.GraphComputer$ResultGraph, arg1: Java.GraphComputer$Persist): object_t;
                    resultGraphPersistCombinationNotSupportedP(arg0: Java.GraphComputer$ResultGraph, arg1: Java.GraphComputer$Persist): Promise<object_t>;
                    vertexPropertiesCanNotBeUpdatedInMapReduce(): object_t;
                    vertexPropertiesCanNotBeUpdatedInMapReduceP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface GraphComputer$Features extends Java.java.lang.Object {
                supportsDirectObjects(): boolean;
                supportsDirectObjectsP(): Promise<boolean>;
                supportsEdgeAddition(): boolean;
                supportsEdgeAdditionP(): Promise<boolean>;
                supportsEdgePropertyAddition(): boolean;
                supportsEdgePropertyAdditionP(): Promise<boolean>;
                supportsEdgePropertyRemoval(): boolean;
                supportsEdgePropertyRemovalP(): Promise<boolean>;
                supportsEdgeRemoval(): boolean;
                supportsEdgeRemovalP(): Promise<boolean>;
                supportsGlobalMessageScopes(): boolean;
                supportsGlobalMessageScopesP(): Promise<boolean>;
                supportsLocalMessageScopes(): boolean;
                supportsLocalMessageScopesP(): Promise<boolean>;
                supportsResultGraphPersistCombination(arg0: Java.GraphComputer$ResultGraph, arg1: Java.GraphComputer$Persist): boolean;
                supportsResultGraphPersistCombinationP(arg0: Java.GraphComputer$ResultGraph, arg1: Java.GraphComputer$Persist): Promise<boolean>;
                supportsVertexAddition(): boolean;
                supportsVertexAdditionP(): Promise<boolean>;
                supportsVertexPropertyAddition(): boolean;
                supportsVertexPropertyAdditionP(): Promise<boolean>;
                supportsVertexPropertyRemoval(): boolean;
                supportsVertexPropertyRemovalP(): Promise<boolean>;
                supportsVertexRemoval(): boolean;
                supportsVertexRemovalP(): Promise<boolean>;
            }
            module GraphComputer$Features {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface GraphComputer$Persist extends Java.java.lang.Enum {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphComputer$Persist {
                interface Static {
                    NOTHING: Java.GraphComputer$Persist;
                    VERTEX_PROPERTIES: Java.GraphComputer$Persist;
                    EDGES: Java.GraphComputer$Persist;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.GraphComputer$Persist;
                    valueOfP(arg0: string_t): Promise<Java.GraphComputer$Persist>;
                    values(): Java.GraphComputer$Persist[];
                    valuesP(): Promise<Java.GraphComputer$Persist[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface GraphComputer$ResultGraph extends Java.java.lang.Enum {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphComputer$ResultGraph {
                interface Static {
                    ORIGINAL: Java.GraphComputer$ResultGraph;
                    NEW: Java.GraphComputer$ResultGraph;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.GraphComputer$ResultGraph;
                    valueOfP(arg0: string_t): Promise<Java.GraphComputer$ResultGraph>;
                    values(): Java.GraphComputer$ResultGraph[];
                    valuesP(): Promise<Java.GraphComputer$ResultGraph[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface KeyValue extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getKey(): object_t;
                getKeyP(): Promise<object_t>;
                getValue(): object_t;
                getValueP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module KeyValue {
                interface Static {
                    new (arg0: object_t, arg1: object_t): org.apache.tinkerpop.gremlin.process.computer.KeyValue;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface MapReduce extends Java.java.lang.Object {
                addResultToMemory(arg0: Java.Memory$Admin, arg1: Java.Iterator): void;
                addResultToMemoryP(arg0: Java.Memory$Admin, arg1: Java.Iterator): Promise<void>;
                clone(): Java.MapReduce;
                cloneP(): Promise<Java.MapReduce>;
                combine(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                combineP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                doStage(arg0: Java.MapReduce$Stage): boolean;
                doStageP(arg0: Java.MapReduce$Stage): Promise<boolean>;
                generateFinalResult(arg0: Java.Iterator): object_t;
                generateFinalResultP(arg0: Java.Iterator): Promise<object_t>;
                getMapKeySort(): object_t;
                getMapKeySortP(): Promise<object_t>;
                getMemoryKey(): string;
                getMemoryKeyP(): Promise<string>;
                getReduceKeySort(): object_t;
                getReduceKeySortP(): Promise<object_t>;
                loadState(arg0: Java.Graph, arg1: object_t): void;
                loadStateP(arg0: Java.Graph, arg1: object_t): Promise<void>;
                map(arg0: Java.Vertex, arg1: Java.MapReduce$MapEmitter): void;
                mapP(arg0: Java.Vertex, arg1: Java.MapReduce$MapEmitter): Promise<void>;
                reduce(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                reduceP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                storeState(arg0: object_t): void;
                storeStateP(arg0: object_t): Promise<void>;
                workerEnd(arg0: Java.MapReduce$Stage): void;
                workerEndP(arg0: Java.MapReduce$Stage): Promise<void>;
                workerStart(arg0: Java.MapReduce$Stage): void;
                workerStartP(arg0: Java.MapReduce$Stage): Promise<void>;
            }
            module MapReduce {
                interface Static {
                    MAP_REDUCE: string;
                    createMapReduce(arg0: Java.Graph, arg1: object_t): Java.MapReduce;
                    createMapReduceP(arg0: Java.Graph, arg1: object_t): Promise<Java.MapReduce>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface MapReduce$MapEmitter extends Java.java.lang.Object {
                emit(arg0: object_t, arg1: object_t): void;
                emitP(arg0: object_t, arg1: object_t): Promise<void>;
                emit(arg0: object_t): void;
                emitP(arg0: object_t): Promise<void>;
            }
            module MapReduce$MapEmitter {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface MapReduce$NullObject extends Java.java.lang.Object {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MapReduce$NullObject {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.process.computer.MapReduce$NullObject;
                    instance(): Java.MapReduce$NullObject;
                    instanceP(): Promise<Java.MapReduce$NullObject>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface MapReduce$ReduceEmitter extends Java.java.lang.Object {
                emit(arg0: object_t, arg1: object_t): void;
                emitP(arg0: object_t, arg1: object_t): Promise<void>;
                emit(arg0: object_t): void;
                emitP(arg0: object_t): Promise<void>;
            }
            module MapReduce$ReduceEmitter {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface MapReduce$Stage extends Java.java.lang.Enum {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MapReduce$Stage {
                interface Static {
                    MAP: Java.MapReduce$Stage;
                    COMBINE: Java.MapReduce$Stage;
                    REDUCE: Java.MapReduce$Stage;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.MapReduce$Stage;
                    valueOfP(arg0: string_t): Promise<Java.MapReduce$Stage>;
                    values(): Java.MapReduce$Stage[];
                    valuesP(): Promise<Java.MapReduce$Stage[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface Memory extends Java.java.lang.Object {
                and(arg0: string_t, arg1: boolean_t): void;
                andP(arg0: string_t, arg1: boolean_t): Promise<void>;
                asMap(): Java.Map;
                asMapP(): Promise<Java.Map>;
                exists(arg0: string_t): boolean;
                existsP(arg0: string_t): Promise<boolean>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                getIteration(): number;
                getIterationP(): Promise<number>;
                getRuntime(): longValue_t;
                getRuntimeP(): Promise<longValue_t>;
                incr(arg0: string_t, arg1: long_t): void;
                incrP(arg0: string_t, arg1: long_t): Promise<void>;
                isInitialIteration(): boolean;
                isInitialIterationP(): Promise<boolean>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                or(arg0: string_t, arg1: boolean_t): void;
                orP(arg0: string_t, arg1: boolean_t): Promise<void>;
                set(arg0: string_t, arg1: object_t): void;
                setP(arg0: string_t, arg1: object_t): Promise<void>;
            }
            module Memory {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface Memory$Admin extends Java.org.apache.tinkerpop.gremlin.process.computer.Memory {
                and(arg0: string_t, arg1: boolean_t): void;
                andP(arg0: string_t, arg1: boolean_t): Promise<void>;
                asImmutable(): Java.Memory;
                asImmutableP(): Promise<Java.Memory>;
                asMap(): Java.Map;
                asMapP(): Promise<Java.Map>;
                exists(arg0: string_t): boolean;
                existsP(arg0: string_t): Promise<boolean>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                getIteration(): number;
                getIterationP(): Promise<number>;
                getRuntime(): longValue_t;
                getRuntimeP(): Promise<longValue_t>;
                incr(arg0: string_t, arg1: long_t): void;
                incrP(arg0: string_t, arg1: long_t): Promise<void>;
                incrIteration(): void;
                incrIterationP(): Promise<void>;
                isInitialIteration(): boolean;
                isInitialIterationP(): Promise<boolean>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                or(arg0: string_t, arg1: boolean_t): void;
                orP(arg0: string_t, arg1: boolean_t): Promise<void>;
                set(arg0: string_t, arg1: object_t): void;
                setP(arg0: string_t, arg1: object_t): Promise<void>;
                setIteration(arg0: integer_t): void;
                setIterationP(arg0: integer_t): Promise<void>;
                setRuntime(arg0: long_t): void;
                setRuntimeP(arg0: long_t): Promise<void>;
            }
            module Memory$Admin {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface Memory$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Memory$Exceptions {
                interface Static {
                    dataTypeOfMemoryValueNotSupported(arg0: object_t): object_t;
                    dataTypeOfMemoryValueNotSupportedP(arg0: object_t): Promise<object_t>;
                    memoryDoesNotExist(arg0: string_t): object_t;
                    memoryDoesNotExistP(arg0: string_t): Promise<object_t>;
                    memoryIsCurrentlyImmutable(): object_t;
                    memoryIsCurrentlyImmutableP(): Promise<object_t>;
                    memoryKeyCanNotBeEmpty(): object_t;
                    memoryKeyCanNotBeEmptyP(): Promise<object_t>;
                    memoryKeyCanNotBeNull(): object_t;
                    memoryKeyCanNotBeNullP(): Promise<object_t>;
                    memoryValueCanNotBeNull(): object_t;
                    memoryValueCanNotBeNullP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface MessageCombiner extends Java.java.lang.Object {
                combine(arg0: object_t, arg1: object_t): object_t;
                combineP(arg0: object_t, arg1: object_t): Promise<object_t>;
            }
            module MessageCombiner {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface MessageScope extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MessageScope {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.process.computer.MessageScope;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface MessageScope$Global extends Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                vertices(): Java.Iterable;
                verticesP(): Promise<Java.Iterable>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MessageScope$Global {
                interface Static {
                    instance(): Java.MessageScope$Global;
                    instanceP(): Promise<Java.MessageScope$Global>;
                    of(...arg0: Java.Vertex[]): Java.MessageScope$Global;
                    of(arg0: array_t<Java.Vertex>): Java.MessageScope$Global;
                    ofP(...arg0: Java.Vertex[]): Promise<Java.MessageScope$Global>;
                    ofP(arg0: array_t<Java.Vertex>): Promise<Java.MessageScope$Global>;
                    of(arg0: Java.Iterable): Java.MessageScope$Global;
                    ofP(arg0: Java.Iterable): Promise<Java.MessageScope$Global>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface MessageScope$Local extends Java.org.apache.tinkerpop.gremlin.process.computer.MessageScope {
                incidentTraversal: Java.Supplier;
                edgeFunction: Java.BiFunction;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getEdgeFunction(): Java.BiFunction;
                getEdgeFunctionP(): Promise<Java.BiFunction>;
                getIncidentTraversal(): Java.Supplier;
                getIncidentTraversalP(): Promise<Java.Supplier>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MessageScope$Local {
                interface Static {
                    of(arg0: Java.Supplier, arg1: Java.BiFunction): Java.MessageScope$Local;
                    ofP(arg0: Java.Supplier, arg1: Java.BiFunction): Promise<Java.MessageScope$Local>;
                    of(arg0: Java.Supplier): Java.MessageScope$Local;
                    ofP(arg0: Java.Supplier): Promise<Java.MessageScope$Local>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface MessageScope$Local$ReverseTraversalSupplier extends Java.java.lang.Object, Java.java.util.function_.Supplier {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): Java.Traversal;
                getP(): Promise<Java.Traversal>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MessageScope$Local$ReverseTraversalSupplier {
                interface Static {
                    new (arg0: Java.MessageScope$Local): org.apache.tinkerpop.gremlin.process.computer.MessageScope$Local$ReverseTraversalSupplier;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface Messenger extends Java.java.lang.Object {
                receiveMessages(): Java.Iterator;
                receiveMessagesP(): Promise<Java.Iterator>;
                sendMessage(arg0: Java.MessageScope, arg1: object_t): void;
                sendMessageP(arg0: Java.MessageScope, arg1: object_t): Promise<void>;
            }
            module Messenger {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank {
            interface PageRankMapReduce extends Java.java.lang.Object {
                addResultToMemory(arg0: Java.Memory$Admin, arg1: Java.Iterator): void;
                addResultToMemoryP(arg0: Java.Memory$Admin, arg1: Java.Iterator): Promise<void>;
                clone(): Java.MapReduce;
                cloneP(): Promise<Java.MapReduce>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                combine(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                combineP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                doStage(arg0: Java.MapReduce$Stage): boolean;
                doStageP(arg0: Java.MapReduce$Stage): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                generateFinalResult(arg0: Java.Iterator): Java.Iterator;
                generateFinalResultP(arg0: Java.Iterator): Promise<Java.Iterator>;
                generateFinalResult(arg0: Java.Iterator): object_t;
                generateFinalResultP(arg0: Java.Iterator): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getMapKeySort(): object_t;
                getMapKeySortP(): Promise<object_t>;
                getMemoryKey(): string;
                getMemoryKeyP(): Promise<string>;
                getReduceKeySort(): object_t;
                getReduceKeySortP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                loadState(arg0: Java.Graph, arg1: object_t): void;
                loadStateP(arg0: Java.Graph, arg1: object_t): Promise<void>;
                map(arg0: Java.Vertex, arg1: Java.MapReduce$MapEmitter): void;
                mapP(arg0: Java.Vertex, arg1: Java.MapReduce$MapEmitter): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reduce(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                reduceP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                storeState(arg0: object_t): void;
                storeStateP(arg0: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                workerEnd(arg0: Java.MapReduce$Stage): void;
                workerEndP(arg0: Java.MapReduce$Stage): Promise<void>;
                workerStart(arg0: Java.MapReduce$Stage): void;
                workerStartP(arg0: Java.MapReduce$Stage): Promise<void>;
            }
            module PageRankMapReduce {
                interface Static {
                    PAGE_RANK_MEMORY_KEY: string;
                    DEFAULT_MEMORY_KEY: string;
                    MAP_REDUCE: string;
                    build(): Java.PageRankMapReduce$Builder;
                    buildP(): Promise<Java.PageRankMapReduce$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank {
            interface PageRankMapReduce$Builder extends Java.java.lang.Object {
                create(): Java.PageRankMapReduce;
                createP(): Promise<Java.PageRankMapReduce>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                memoryKey(arg0: string_t): Java.PageRankMapReduce$Builder;
                memoryKeyP(arg0: string_t): Promise<Java.PageRankMapReduce$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module PageRankMapReduce$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank {
            interface PageRankMessageCombiner extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.computer.MessageCombiner {
                combine(arg0: object_t, arg1: object_t): object_t;
                combineP(arg0: object_t, arg1: object_t): Promise<object_t>;
                combine(arg0: double_t, arg1: double_t): number;
                combineP(arg0: double_t, arg1: double_t): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module PageRankMessageCombiner {
                interface Static {
                    instance(): object_t;
                    instanceP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank {
            interface PageRankVertexProgram extends Java.java.lang.Object {
                clone(): object_t;
                cloneP(): Promise<object_t>;
                clone(): Java.VertexProgram;
                cloneP(): Promise<Java.VertexProgram>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                execute(arg0: Java.Vertex, arg1: Java.Messenger, arg2: Java.Memory): void;
                executeP(arg0: Java.Vertex, arg1: Java.Messenger, arg2: Java.Memory): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getElementComputeKeys(): Java.Set;
                getElementComputeKeysP(): Promise<Java.Set>;
                getFeatures(): Java.VertexProgram$Features;
                getFeaturesP(): Promise<Java.VertexProgram$Features>;
                getMapReducers(): Java.Set;
                getMapReducersP(): Promise<Java.Set>;
                getMemoryComputeKeys(): Java.Set;
                getMemoryComputeKeysP(): Promise<Java.Set>;
                getMessageCombiner(): object_t;
                getMessageCombinerP(): Promise<object_t>;
                getMessageScopes(arg0: Java.Memory): Java.Set;
                getMessageScopesP(arg0: Java.Memory): Promise<Java.Set>;
                getPreferredPersist(): Java.GraphComputer$Persist;
                getPreferredPersistP(): Promise<Java.GraphComputer$Persist>;
                getPreferredResultGraph(): Java.GraphComputer$ResultGraph;
                getPreferredResultGraphP(): Promise<Java.GraphComputer$ResultGraph>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                loadState(arg0: Java.Graph, arg1: object_t): void;
                loadStateP(arg0: Java.Graph, arg1: object_t): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setup(arg0: Java.Memory): void;
                setupP(arg0: Java.Memory): Promise<void>;
                storeState(arg0: object_t): void;
                storeStateP(arg0: object_t): Promise<void>;
                terminate(arg0: Java.Memory): boolean;
                terminateP(arg0: Java.Memory): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                workerIterationEnd(arg0: Java.Memory): void;
                workerIterationEndP(arg0: Java.Memory): Promise<void>;
                workerIterationStart(arg0: Java.Memory): void;
                workerIterationStartP(arg0: Java.Memory): Promise<void>;
            }
            module PageRankVertexProgram {
                interface Static {
                    PAGE_RANK: string;
                    EDGE_COUNT: string;
                    VERTEX_PROGRAM: string;
                    build(): Java.PageRankVertexProgram$Builder;
                    buildP(): Promise<Java.PageRankVertexProgram$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.ranking.pagerank {
            interface PageRankVertexProgram$Builder extends Java.java.lang.Object {
                alpha(arg0: double_t): Java.PageRankVertexProgram$Builder;
                alphaP(arg0: double_t): Promise<Java.PageRankVertexProgram$Builder>;
                configure(...arg0: object_t[]): Java.VertexProgram$Builder;
                configure(arg0: object_array_t): Java.VertexProgram$Builder;
                configureP(...arg0: object_t[]): Promise<Java.VertexProgram$Builder>;
                configureP(arg0: object_array_t): Promise<Java.VertexProgram$Builder>;
                create(arg0: Java.Graph): Java.VertexProgram;
                createP(arg0: Java.Graph): Promise<Java.VertexProgram>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                iterations(arg0: integer_t): Java.PageRankVertexProgram$Builder;
                iterationsP(arg0: integer_t): Promise<Java.PageRankVertexProgram$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                traversal(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Java.PageRankVertexProgram$Builder;
                traversal(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): Java.PageRankVertexProgram$Builder;
                traversalP(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<Java.PageRankVertexProgram$Builder>;
                traversalP(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<Java.PageRankVertexProgram$Builder>;
                traversal(arg0: Java.Traversal$Admin): Java.PageRankVertexProgram$Builder;
                traversalP(arg0: Java.Traversal$Admin): Promise<Java.PageRankVertexProgram$Builder>;
                traversal(arg0: Java.Class): Java.PageRankVertexProgram$Builder;
                traversalP(arg0: Java.Class): Promise<Java.PageRankVertexProgram$Builder>;
                vertexCount(arg0: long_t): Java.PageRankVertexProgram$Builder;
                vertexCountP(arg0: long_t): Promise<Java.PageRankVertexProgram$Builder>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module PageRankVertexProgram$Builder {
                interface Static {
                    GREMLIN_GROOVY: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.traversal {
            interface SingleMessenger extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.computer.Messenger {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                receiveMessages(): Java.Iterator;
                receiveMessagesP(): Promise<Java.Iterator>;
                sendMessage(arg0: Java.MessageScope, arg1: object_t): void;
                sendMessageP(arg0: Java.MessageScope, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module SingleMessenger {
                interface Static {
                    new (arg0: Java.Messenger, arg1: object_t): org.apache.tinkerpop.gremlin.process.computer.traversal.SingleMessenger;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.traversal {
            interface TraversalVertexProgram extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.computer.VertexProgram {
                clone(): Java.TraversalVertexProgram;
                cloneP(): Promise<Java.TraversalVertexProgram>;
                clone(): Java.VertexProgram;
                cloneP(): Promise<Java.VertexProgram>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                computerResultTraversal(arg0: Java.ComputerResult): Java.Traversal$Admin;
                computerResultTraversalP(arg0: Java.ComputerResult): Promise<Java.Traversal$Admin>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                execute(arg0: Java.Vertex, arg1: Java.Messenger, arg2: Java.Memory): void;
                executeP(arg0: Java.Vertex, arg1: Java.Messenger, arg2: Java.Memory): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getElementComputeKeys(): Java.Set;
                getElementComputeKeysP(): Promise<Java.Set>;
                getFeatures(): Java.VertexProgram$Features;
                getFeaturesP(): Promise<Java.VertexProgram$Features>;
                getMapReducers(): Java.Set;
                getMapReducersP(): Promise<Java.Set>;
                getMemoryComputeKeys(): Java.Set;
                getMemoryComputeKeysP(): Promise<Java.Set>;
                getMessageCombiner(): object_t;
                getMessageCombinerP(): Promise<object_t>;
                getMessageScopes(arg0: Java.Memory): Java.Set;
                getMessageScopesP(arg0: Java.Memory): Promise<Java.Set>;
                getPreferredPersist(): Java.GraphComputer$Persist;
                getPreferredPersistP(): Promise<Java.GraphComputer$Persist>;
                getPreferredResultGraph(): Java.GraphComputer$ResultGraph;
                getPreferredResultGraphP(): Promise<Java.GraphComputer$ResultGraph>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                loadState(arg0: Java.Graph, arg1: object_t): void;
                loadStateP(arg0: Java.Graph, arg1: object_t): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setup(arg0: Java.Memory): void;
                setupP(arg0: Java.Memory): Promise<void>;
                storeState(arg0: object_t): void;
                storeStateP(arg0: object_t): Promise<void>;
                terminate(arg0: Java.Memory): boolean;
                terminateP(arg0: Java.Memory): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                workerIterationEnd(arg0: Java.Memory): void;
                workerIterationEndP(arg0: Java.Memory): Promise<void>;
                workerIterationStart(arg0: Java.Memory): void;
                workerIterationStartP(arg0: Java.Memory): Promise<void>;
            }
            module TraversalVertexProgram {
                interface Static {
                    HALTED_TRAVERSERS: string;
                    TRAVERSAL_SUPPLIER: string;
                    VERTEX_PROGRAM: string;
                    build(): Java.TraversalVertexProgram$Builder;
                    buildP(): Promise<Java.TraversalVertexProgram$Builder>;
                    getTraversal(arg0: Java.Graph, arg1: object_t): Java.Traversal$Admin;
                    getTraversalP(arg0: Java.Graph, arg1: object_t): Promise<Java.Traversal$Admin>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.traversal {
            interface TraversalVertexProgram$Builder extends Java.java.lang.Object {
                configure(...arg0: object_t[]): Java.VertexProgram$Builder;
                configure(arg0: object_array_t): Java.VertexProgram$Builder;
                configureP(...arg0: object_t[]): Promise<Java.VertexProgram$Builder>;
                configureP(arg0: object_array_t): Promise<Java.VertexProgram$Builder>;
                create(arg0: Java.Graph): Java.VertexProgram;
                createP(arg0: Java.Graph): Promise<Java.VertexProgram>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                traversal(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Java.TraversalVertexProgram$Builder;
                traversal(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): Java.TraversalVertexProgram$Builder;
                traversalP(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<Java.TraversalVertexProgram$Builder>;
                traversalP(arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<Java.TraversalVertexProgram$Builder>;
                traversal(arg0: Java.Traversal$Admin): Java.TraversalVertexProgram$Builder;
                traversalP(arg0: Java.Traversal$Admin): Promise<Java.TraversalVertexProgram$Builder>;
                traversal(arg0: Java.Class): Java.TraversalVertexProgram$Builder;
                traversalP(arg0: Java.Class): Promise<Java.TraversalVertexProgram$Builder>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalVertexProgram$Builder {
                interface Static {
                    GREMLIN_GROOVY: string;
                    new (): org.apache.tinkerpop.gremlin.process.computer.traversal.TraversalVertexProgram$Builder;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.traversal {
            interface TraversalVertexProgramMessageCombiner extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.computer.MessageCombiner {
                combine(arg0: object_t, arg1: object_t): object_t;
                combineP(arg0: object_t, arg1: object_t): Promise<object_t>;
                combine(arg0: object_t, arg1: object_t): object_t;
                combineP(arg0: object_t, arg1: object_t): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalVertexProgramMessageCombiner {
                interface Static {
                    instance(): object_t;
                    instanceP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.traversal {
            interface TraverserExecutor extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraverserExecutor {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.process.computer.traversal.TraverserExecutor;
                    execute(arg0: Java.Vertex, arg1: Java.Messenger, arg2: Java.TraversalMatrix): boolean;
                    executeP(arg0: Java.Vertex, arg1: Java.Messenger, arg2: Java.TraversalMatrix): Promise<boolean>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer.traversal {
            interface VertexTraversalSideEffects extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects {
                clone(): Java.VertexTraversalSideEffects;
                cloneP(): Promise<Java.VertexTraversalSideEffects>;
                clone(): Java.TraversalSideEffects;
                cloneP(): Promise<Java.TraversalSideEffects>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getOrCreate(arg0: string_t, arg1: Java.Supplier): object_t;
                getOrCreateP(arg0: string_t, arg1: Java.Supplier): Promise<object_t>;
                getRegisteredSupplier(arg0: string_t): object_t;
                getRegisteredSupplierP(arg0: string_t): Promise<object_t>;
                getSackInitialValue(): object_t;
                getSackInitialValueP(): Promise<object_t>;
                getSackSplitOperator(): object_t;
                getSackSplitOperatorP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                mergeInto(arg0: Java.TraversalSideEffects): void;
                mergeIntoP(arg0: Java.TraversalSideEffects): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                registerSupplier(arg0: string_t, arg1: Java.Supplier): void;
                registerSupplierP(arg0: string_t, arg1: Java.Supplier): Promise<void>;
                registerSupplierIfAbsent(arg0: string_t, arg1: Java.Supplier): void;
                registerSupplierIfAbsentP(arg0: string_t, arg1: Java.Supplier): Promise<void>;
                remove(arg0: string_t): void;
                removeP(arg0: string_t): Promise<void>;
                set(arg0: string_t, arg1: object_t): void;
                setP(arg0: string_t, arg1: object_t): Promise<void>;
                setLocalVertex(arg0: Java.Vertex): void;
                setLocalVertexP(arg0: Java.Vertex): Promise<void>;
                setSack(arg0: Java.Supplier, arg1: object_t): void;
                setSackP(arg0: Java.Supplier, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module VertexTraversalSideEffects {
                interface Static {
                    SIDE_EFFECTS: string;
                    of(arg0: Java.Vertex): Java.TraversalSideEffects;
                    ofP(arg0: Java.Vertex): Promise<Java.TraversalSideEffects>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface VertexProgram extends Java.java.lang.Object {
                clone(): Java.VertexProgram;
                cloneP(): Promise<Java.VertexProgram>;
                execute(arg0: Java.Vertex, arg1: Java.Messenger, arg2: Java.Memory): void;
                executeP(arg0: Java.Vertex, arg1: Java.Messenger, arg2: Java.Memory): Promise<void>;
                getElementComputeKeys(): Java.Set;
                getElementComputeKeysP(): Promise<Java.Set>;
                getFeatures(): Java.VertexProgram$Features;
                getFeaturesP(): Promise<Java.VertexProgram$Features>;
                getMapReducers(): Java.Set;
                getMapReducersP(): Promise<Java.Set>;
                getMemoryComputeKeys(): Java.Set;
                getMemoryComputeKeysP(): Promise<Java.Set>;
                getMessageCombiner(): object_t;
                getMessageCombinerP(): Promise<object_t>;
                getMessageScopes(arg0: Java.Memory): Java.Set;
                getMessageScopesP(arg0: Java.Memory): Promise<Java.Set>;
                getPreferredPersist(): Java.GraphComputer$Persist;
                getPreferredPersistP(): Promise<Java.GraphComputer$Persist>;
                getPreferredResultGraph(): Java.GraphComputer$ResultGraph;
                getPreferredResultGraphP(): Promise<Java.GraphComputer$ResultGraph>;
                loadState(arg0: Java.Graph, arg1: object_t): void;
                loadStateP(arg0: Java.Graph, arg1: object_t): Promise<void>;
                setup(arg0: Java.Memory): void;
                setupP(arg0: Java.Memory): Promise<void>;
                storeState(arg0: object_t): void;
                storeStateP(arg0: object_t): Promise<void>;
                terminate(arg0: Java.Memory): boolean;
                terminateP(arg0: Java.Memory): Promise<boolean>;
                workerIterationEnd(arg0: Java.Memory): void;
                workerIterationEndP(arg0: Java.Memory): Promise<void>;
                workerIterationStart(arg0: Java.Memory): void;
                workerIterationStartP(arg0: Java.Memory): Promise<void>;
            }
            module VertexProgram {
                interface Static {
                    VERTEX_PROGRAM: string;
                    createVertexProgram(arg0: Java.Graph, arg1: object_t): Java.VertexProgram;
                    createVertexProgramP(arg0: Java.Graph, arg1: object_t): Promise<Java.VertexProgram>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface VertexProgram$Builder extends Java.java.lang.Object {
                configure(...arg0: object_t[]): Java.VertexProgram$Builder;
                configure(arg0: object_array_t): Java.VertexProgram$Builder;
                configureP(...arg0: object_t[]): Promise<Java.VertexProgram$Builder>;
                configureP(arg0: object_array_t): Promise<Java.VertexProgram$Builder>;
                create(arg0: Java.Graph): Java.VertexProgram;
                createP(arg0: Java.Graph): Promise<Java.VertexProgram>;
            }
            module VertexProgram$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.computer {
            interface VertexProgram$Features extends Java.java.lang.Object {
                requiresEdgeAddition(): boolean;
                requiresEdgeAdditionP(): Promise<boolean>;
                requiresEdgePropertyAddition(): boolean;
                requiresEdgePropertyAdditionP(): Promise<boolean>;
                requiresEdgePropertyRemoval(): boolean;
                requiresEdgePropertyRemovalP(): Promise<boolean>;
                requiresEdgeRemoval(): boolean;
                requiresEdgeRemovalP(): Promise<boolean>;
                requiresGlobalMessageScopes(): boolean;
                requiresGlobalMessageScopesP(): Promise<boolean>;
                requiresLocalMessageScopes(): boolean;
                requiresLocalMessageScopesP(): Promise<boolean>;
                requiresVertexAddition(): boolean;
                requiresVertexAdditionP(): Promise<boolean>;
                requiresVertexPropertyAddition(): boolean;
                requiresVertexPropertyAdditionP(): Promise<boolean>;
                requiresVertexPropertyRemoval(): boolean;
                requiresVertexPropertyRemovalP(): Promise<boolean>;
                requiresVertexRemoval(): boolean;
                requiresVertexRemovalP(): Promise<boolean>;
            }
            module VertexProgram$Features {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Compare extends Java.java.lang.Enum, Java.java.util.function_.BiPredicate {
                and(arg0: Java.BiPredicate): Java.BiPredicate;
                andP(arg0: Java.BiPredicate): Promise<Java.BiPredicate>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                negate(): Java.Compare;
                negateP(): Promise<Java.Compare>;
                negate(): Java.BiPredicate;
                negateP(): Promise<Java.BiPredicate>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                or(arg0: Java.BiPredicate): Java.BiPredicate;
                orP(arg0: Java.BiPredicate): Promise<Java.BiPredicate>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                test(arg0: object_t, arg1: object_t): boolean;
                testP(arg0: object_t, arg1: object_t): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Compare {
                interface Static {
                    eq: Java.Compare;
                    neq: Java.Compare;
                    gt: Java.Compare;
                    gte: Java.Compare;
                    lt: Java.Compare;
                    lte: Java.Compare;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.Compare;
                    valueOfP(arg0: string_t): Promise<Java.Compare>;
                    values(): Java.Compare[];
                    valuesP(): Promise<Java.Compare[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Contains extends Java.java.lang.Enum, Java.java.util.function_.BiPredicate {
                and(arg0: Java.BiPredicate): Java.BiPredicate;
                andP(arg0: Java.BiPredicate): Promise<Java.BiPredicate>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                negate(): Java.Contains;
                negateP(): Promise<Java.Contains>;
                negate(): Java.BiPredicate;
                negateP(): Promise<Java.BiPredicate>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                or(arg0: Java.BiPredicate): Java.BiPredicate;
                orP(arg0: Java.BiPredicate): Promise<Java.BiPredicate>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                test(arg0: object_t, arg1: Java.Collection): boolean;
                testP(arg0: object_t, arg1: Java.Collection): Promise<boolean>;
                test(arg0: object_t, arg1: object_t): boolean;
                testP(arg0: object_t, arg1: object_t): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Contains {
                interface Static {
                    within: Java.Contains;
                    without: Java.Contains;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.Contains;
                    valueOfP(arg0: string_t): Promise<Java.Contains>;
                    values(): Java.Contains[];
                    valuesP(): Promise<Java.Contains[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
            interface __ extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module __ {
                interface Static {
                    __(...arg0: object_t[]): Java.GraphTraversal;
                    __(arg0: object_array_t): Java.GraphTraversal;
                    __P(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                    __P(arg0: object_array_t): Promise<Java.GraphTraversal>;
                    addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, ...arg3: object_t[]): Java.GraphTraversal;
                    addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, arg3: object_array_t): Java.GraphTraversal;
                    addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                    addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, arg3: object_array_t): Promise<Java.GraphTraversal>;
                    addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, ...arg3: object_t[]): Java.GraphTraversal;
                    addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, arg3: object_array_t): Java.GraphTraversal;
                    addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                    addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, arg3: object_array_t): Promise<Java.GraphTraversal>;
                    addE(arg0: Java.Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Java.GraphTraversal;
                    addE(arg0: Java.Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Java.GraphTraversal;
                    addEP(arg0: Java.Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                    addEP(arg0: Java.Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<Java.GraphTraversal>;
                    addInE(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.GraphTraversal;
                    addInE(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.GraphTraversal;
                    addInEP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                    addInEP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.GraphTraversal>;
                    addInE(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Java.GraphTraversal;
                    addInE(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Java.GraphTraversal;
                    addInEP(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                    addInEP(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Promise<Java.GraphTraversal>;
                    addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Java.GraphTraversal;
                    addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): Java.GraphTraversal;
                    addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                    addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                    addOutE(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.GraphTraversal;
                    addOutE(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.GraphTraversal;
                    addOutEP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                    addOutEP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.GraphTraversal>;
                    addOutE(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Java.GraphTraversal;
                    addOutE(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Java.GraphTraversal;
                    addOutEP(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                    addOutEP(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Promise<Java.GraphTraversal>;
                    addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Java.GraphTraversal;
                    addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): Java.GraphTraversal;
                    addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                    addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                    addV(...arg0: object_t[]): Java.GraphTraversal;
                    addV(arg0: object_array_t): Java.GraphTraversal;
                    addVP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                    addVP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                    aggregate(arg0: string_t): Java.GraphTraversal;
                    aggregateP(arg0: string_t): Promise<Java.GraphTraversal>;
                    and(...arg0: Java.Traversal[]): Java.GraphTraversal;
                    and(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                    andP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                    andP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                    as(arg0: string_t, ...arg1: string_t[]): Java.GraphTraversal;
                    as(arg0: string_t, arg1: array_t<string_t>): Java.GraphTraversal;
                    asP(arg0: string_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                    asP(arg0: string_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                    barrier(): Java.GraphTraversal;
                    barrierP(): Promise<Java.GraphTraversal>;
                    both(...arg0: string_t[]): Java.GraphTraversal;
                    both(arg0: array_t<string_t>): Java.GraphTraversal;
                    bothP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    bothP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    bothE(...arg0: string_t[]): Java.GraphTraversal;
                    bothE(arg0: array_t<string_t>): Java.GraphTraversal;
                    bothEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    bothEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    bothV(): Java.GraphTraversal;
                    bothVP(): Promise<Java.GraphTraversal>;
                    branch(arg0: Java.Traversal): Java.GraphTraversal;
                    branchP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                    branch(arg0: Java.Function): Java.GraphTraversal;
                    branchP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                    cap(arg0: string_t, ...arg1: string_t[]): Java.GraphTraversal;
                    cap(arg0: string_t, arg1: array_t<string_t>): Java.GraphTraversal;
                    capP(arg0: string_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                    capP(arg0: string_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                    choose(arg0: Java.Traversal, arg1: Java.Traversal, arg2: Java.Traversal): Java.GraphTraversal;
                    chooseP(arg0: Java.Traversal, arg1: Java.Traversal, arg2: Java.Traversal): Promise<Java.GraphTraversal>;
                    choose(arg0: Java.Predicate, arg1: Java.Traversal, arg2: Java.Traversal): Java.GraphTraversal;
                    chooseP(arg0: Java.Predicate, arg1: Java.Traversal, arg2: Java.Traversal): Promise<Java.GraphTraversal>;
                    choose(arg0: Java.Traversal): Java.GraphTraversal;
                    chooseP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                    choose(arg0: Java.Function): Java.GraphTraversal;
                    chooseP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                    coalesce(...arg0: Java.Traversal[]): Java.GraphTraversal;
                    coalesce(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                    coalesceP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                    coalesceP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                    coin(arg0: double_t): Java.GraphTraversal;
                    coinP(arg0: double_t): Promise<Java.GraphTraversal>;
                    count(arg0: Java.Scope): Java.GraphTraversal;
                    countP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                    count(): Java.GraphTraversal;
                    countP(): Promise<Java.GraphTraversal>;
                    cyclicPath(): Java.GraphTraversal;
                    cyclicPathP(): Promise<Java.GraphTraversal>;
                    dedup(arg0: Java.Scope): Java.GraphTraversal;
                    dedupP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                    dedup(): Java.GraphTraversal;
                    dedupP(): Promise<Java.GraphTraversal>;
                    drop(): Java.GraphTraversal;
                    dropP(): Promise<Java.GraphTraversal>;
                    emit(arg0: Java.Traversal): Java.GraphTraversal;
                    emitP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                    emit(arg0: Java.Predicate): Java.GraphTraversal;
                    emitP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                    emit(): Java.GraphTraversal;
                    emitP(): Promise<Java.GraphTraversal>;
                    filter(arg0: Java.Predicate): Java.GraphTraversal;
                    filterP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                    flatMap(arg0: Java.Function): Java.GraphTraversal;
                    flatMapP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                    fold(arg0: object_t, arg1: Java.BiFunction): Java.GraphTraversal;
                    foldP(arg0: object_t, arg1: Java.BiFunction): Promise<Java.GraphTraversal>;
                    fold(): Java.GraphTraversal;
                    foldP(): Promise<Java.GraphTraversal>;
                    group(arg0: string_t): Java.GraphTraversal;
                    groupP(arg0: string_t): Promise<Java.GraphTraversal>;
                    group(): Java.GraphTraversal;
                    groupP(): Promise<Java.GraphTraversal>;
                    groupCount(arg0: string_t): Java.GraphTraversal;
                    groupCountP(arg0: string_t): Promise<Java.GraphTraversal>;
                    groupCount(): Java.GraphTraversal;
                    groupCountP(): Promise<Java.GraphTraversal>;
                    has(arg0: string_t, arg1: string_t, arg2: Java.P): Java.GraphTraversal;
                    hasP(arg0: string_t, arg1: string_t, arg2: Java.P): Promise<Java.GraphTraversal>;
                    has(arg0: string_t, arg1: string_t, arg2: object_t): Java.GraphTraversal;
                    hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<Java.GraphTraversal>;
                    has(arg0: Java.T, arg1: Java.P): Java.GraphTraversal;
                    hasP(arg0: Java.T, arg1: Java.P): Promise<Java.GraphTraversal>;
                    has(arg0: string_t, arg1: Java.Traversal): Java.GraphTraversal;
                    hasP(arg0: string_t, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                    has(arg0: string_t, arg1: Java.P): Java.GraphTraversal;
                    hasP(arg0: string_t, arg1: Java.P): Promise<Java.GraphTraversal>;
                    has(arg0: Java.T, arg1: object_t): Java.GraphTraversal;
                    hasP(arg0: Java.T, arg1: object_t): Promise<Java.GraphTraversal>;
                    has(arg0: string_t, arg1: object_t): Java.GraphTraversal;
                    hasP(arg0: string_t, arg1: object_t): Promise<Java.GraphTraversal>;
                    has(arg0: string_t): Java.GraphTraversal;
                    hasP(arg0: string_t): Promise<Java.GraphTraversal>;
                    hasId(...arg0: object_t[]): Java.GraphTraversal;
                    hasId(arg0: object_array_t): Java.GraphTraversal;
                    hasIdP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                    hasIdP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                    hasKey(...arg0: string_t[]): Java.GraphTraversal;
                    hasKey(arg0: array_t<string_t>): Java.GraphTraversal;
                    hasKeyP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    hasKeyP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    hasLabel(...arg0: string_t[]): Java.GraphTraversal;
                    hasLabel(arg0: array_t<string_t>): Java.GraphTraversal;
                    hasLabelP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    hasLabelP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    hasNot(arg0: string_t): Java.GraphTraversal;
                    hasNotP(arg0: string_t): Promise<Java.GraphTraversal>;
                    hasValue(...arg0: object_t[]): Java.GraphTraversal;
                    hasValue(arg0: object_array_t): Java.GraphTraversal;
                    hasValueP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                    hasValueP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                    id(): Java.GraphTraversal;
                    idP(): Promise<Java.GraphTraversal>;
                    identity(): Java.GraphTraversal;
                    identityP(): Promise<Java.GraphTraversal>;
                    in(...arg0: string_t[]): Java.GraphTraversal;
                    in(arg0: array_t<string_t>): Java.GraphTraversal;
                    inP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    inP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    inE(...arg0: string_t[]): Java.GraphTraversal;
                    inE(arg0: array_t<string_t>): Java.GraphTraversal;
                    inEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    inEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    inject(...arg0: object_t[]): Java.GraphTraversal;
                    inject(arg0: object_array_t): Java.GraphTraversal;
                    injectP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                    injectP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                    inV(): Java.GraphTraversal;
                    inVP(): Promise<Java.GraphTraversal>;
                    is(arg0: Java.P): Java.GraphTraversal;
                    isP(arg0: Java.P): Promise<Java.GraphTraversal>;
                    is(arg0: object_t): Java.GraphTraversal;
                    isP(arg0: object_t): Promise<Java.GraphTraversal>;
                    key(): Java.GraphTraversal;
                    keyP(): Promise<Java.GraphTraversal>;
                    label(): Java.GraphTraversal;
                    labelP(): Promise<Java.GraphTraversal>;
                    limit(arg0: Java.Scope, arg1: long_t): Java.GraphTraversal;
                    limitP(arg0: Java.Scope, arg1: long_t): Promise<Java.GraphTraversal>;
                    limit(arg0: long_t): Java.GraphTraversal;
                    limitP(arg0: long_t): Promise<Java.GraphTraversal>;
                    local(arg0: Java.Traversal): Java.GraphTraversal;
                    localP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                    map(arg0: Java.Function): Java.GraphTraversal;
                    mapP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                    match(arg0: string_t, ...arg1: Java.Traversal[]): Java.GraphTraversal;
                    match(arg0: string_t, arg1: array_t<Java.Traversal>): Java.GraphTraversal;
                    matchP(arg0: string_t, ...arg1: Java.Traversal[]): Promise<Java.GraphTraversal>;
                    matchP(arg0: string_t, arg1: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                    max(arg0: Java.Scope): Java.GraphTraversal;
                    maxP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                    max(): Java.GraphTraversal;
                    maxP(): Promise<Java.GraphTraversal>;
                    mean(arg0: Java.Scope): Java.GraphTraversal;
                    meanP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                    mean(): Java.GraphTraversal;
                    meanP(): Promise<Java.GraphTraversal>;
                    min(arg0: Java.Scope): Java.GraphTraversal;
                    minP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                    min(): Java.GraphTraversal;
                    minP(): Promise<Java.GraphTraversal>;
                    or(...arg0: Java.Traversal[]): Java.GraphTraversal;
                    or(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                    orP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                    orP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                    order(arg0: Java.Scope): Java.GraphTraversal;
                    orderP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                    order(): Java.GraphTraversal;
                    orderP(): Promise<Java.GraphTraversal>;
                    otherV(): Java.GraphTraversal;
                    otherVP(): Promise<Java.GraphTraversal>;
                    out(...arg0: string_t[]): Java.GraphTraversal;
                    out(arg0: array_t<string_t>): Java.GraphTraversal;
                    outP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    outP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    outE(...arg0: string_t[]): Java.GraphTraversal;
                    outE(arg0: array_t<string_t>): Java.GraphTraversal;
                    outEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    outEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    outV(): Java.GraphTraversal;
                    outVP(): Promise<Java.GraphTraversal>;
                    path(): Java.GraphTraversal;
                    pathP(): Promise<Java.GraphTraversal>;
                    profile(): Java.GraphTraversal;
                    profileP(): Promise<Java.GraphTraversal>;
                    properties(...arg0: string_t[]): Java.GraphTraversal;
                    properties(arg0: array_t<string_t>): Java.GraphTraversal;
                    propertiesP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    propertiesP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Java.GraphTraversal;
                    property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Java.GraphTraversal;
                    propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                    propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<Java.GraphTraversal>;
                    property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Java.GraphTraversal;
                    property(arg0: string_t, arg1: object_t, arg2: object_array_t): Java.GraphTraversal;
                    propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                    propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                    propertyMap(...arg0: string_t[]): Java.GraphTraversal;
                    propertyMap(arg0: array_t<string_t>): Java.GraphTraversal;
                    propertyMapP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    propertyMapP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    range(arg0: Java.Scope, arg1: long_t, arg2: long_t): Java.GraphTraversal;
                    rangeP(arg0: Java.Scope, arg1: long_t, arg2: long_t): Promise<Java.GraphTraversal>;
                    range(arg0: long_t, arg1: long_t): Java.GraphTraversal;
                    rangeP(arg0: long_t, arg1: long_t): Promise<Java.GraphTraversal>;
                    repeat(arg0: Java.Traversal): Java.GraphTraversal;
                    repeatP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                    sack(arg0: Java.BinaryOperator, arg1: string_t): Java.GraphTraversal;
                    sackP(arg0: Java.BinaryOperator, arg1: string_t): Promise<Java.GraphTraversal>;
                    sack(arg0: Java.BiFunction): Java.GraphTraversal;
                    sackP(arg0: Java.BiFunction): Promise<Java.GraphTraversal>;
                    sack(): Java.GraphTraversal;
                    sackP(): Promise<Java.GraphTraversal>;
                    sample(arg0: Java.Scope, arg1: integer_t): Java.GraphTraversal;
                    sampleP(arg0: Java.Scope, arg1: integer_t): Promise<Java.GraphTraversal>;
                    sample(arg0: integer_t): Java.GraphTraversal;
                    sampleP(arg0: integer_t): Promise<Java.GraphTraversal>;
                    select(arg0: Java.Scope, ...arg1: string_t[]): Java.GraphTraversal;
                    select(arg0: Java.Scope, arg1: array_t<string_t>): Java.GraphTraversal;
                    selectP(arg0: Java.Scope, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                    selectP(arg0: Java.Scope, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                    select(arg0: Java.Scope, arg1: string_t): Java.GraphTraversal;
                    selectP(arg0: Java.Scope, arg1: string_t): Promise<Java.GraphTraversal>;
                    select(...arg0: string_t[]): Java.GraphTraversal;
                    select(arg0: array_t<string_t>): Java.GraphTraversal;
                    selectP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    selectP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    select(arg0: string_t): Java.GraphTraversal;
                    selectP(arg0: string_t): Promise<Java.GraphTraversal>;
                    sideEffect(arg0: Java.Consumer): Java.GraphTraversal;
                    sideEffectP(arg0: Java.Consumer): Promise<Java.GraphTraversal>;
                    simplePath(): Java.GraphTraversal;
                    simplePathP(): Promise<Java.GraphTraversal>;
                    start(): Java.GraphTraversal;
                    startP(): Promise<Java.GraphTraversal>;
                    store(arg0: string_t): Java.GraphTraversal;
                    storeP(arg0: string_t): Promise<Java.GraphTraversal>;
                    subgraph(arg0: string_t): Java.GraphTraversal;
                    subgraphP(arg0: string_t): Promise<Java.GraphTraversal>;
                    sum(arg0: Java.Scope): Java.GraphTraversal;
                    sumP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                    sum(): Java.GraphTraversal;
                    sumP(): Promise<Java.GraphTraversal>;
                    tail(arg0: Java.Scope, arg1: long_t): Java.GraphTraversal;
                    tailP(arg0: Java.Scope, arg1: long_t): Promise<Java.GraphTraversal>;
                    tail(arg0: Java.Scope): Java.GraphTraversal;
                    tailP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                    tail(arg0: long_t): Java.GraphTraversal;
                    tailP(arg0: long_t): Promise<Java.GraphTraversal>;
                    tail(): Java.GraphTraversal;
                    tailP(): Promise<Java.GraphTraversal>;
                    timeLimit(arg0: long_t): Java.GraphTraversal;
                    timeLimitP(arg0: long_t): Promise<Java.GraphTraversal>;
                    times(arg0: integer_t): Java.GraphTraversal;
                    timesP(arg0: integer_t): Promise<Java.GraphTraversal>;
                    to(arg0: Java.Direction, ...arg1: string_t[]): Java.GraphTraversal;
                    to(arg0: Java.Direction, arg1: array_t<string_t>): Java.GraphTraversal;
                    toP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                    toP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                    toE(arg0: Java.Direction, ...arg1: string_t[]): Java.GraphTraversal;
                    toE(arg0: Java.Direction, arg1: array_t<string_t>): Java.GraphTraversal;
                    toEP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                    toEP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                    toV(arg0: Java.Direction): Java.GraphTraversal;
                    toVP(arg0: Java.Direction): Promise<Java.GraphTraversal>;
                    tree(arg0: string_t): Java.GraphTraversal;
                    treeP(arg0: string_t): Promise<Java.GraphTraversal>;
                    tree(): Java.GraphTraversal;
                    treeP(): Promise<Java.GraphTraversal>;
                    unfold(): Java.GraphTraversal;
                    unfoldP(): Promise<Java.GraphTraversal>;
                    union(...arg0: Java.Traversal[]): Java.GraphTraversal;
                    union(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                    unionP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                    unionP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                    until(arg0: Java.Traversal): Java.GraphTraversal;
                    untilP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                    until(arg0: Java.Predicate): Java.GraphTraversal;
                    untilP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                    value(): Java.GraphTraversal;
                    valueP(): Promise<Java.GraphTraversal>;
                    valueMap(arg0: boolean_t, ...arg1: string_t[]): Java.GraphTraversal;
                    valueMap(arg0: boolean_t, arg1: array_t<string_t>): Java.GraphTraversal;
                    valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                    valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                    valueMap(...arg0: string_t[]): Java.GraphTraversal;
                    valueMap(arg0: array_t<string_t>): Java.GraphTraversal;
                    valueMapP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    valueMapP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    values(...arg0: string_t[]): Java.GraphTraversal;
                    values(arg0: array_t<string_t>): Java.GraphTraversal;
                    valuesP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                    valuesP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                    where(arg0: Java.Scope, arg1: string_t, arg2: Java.P): Java.GraphTraversal;
                    whereP(arg0: Java.Scope, arg1: string_t, arg2: Java.P): Promise<Java.GraphTraversal>;
                    where(arg0: Java.Scope, arg1: Java.Traversal): Java.GraphTraversal;
                    whereP(arg0: Java.Scope, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                    where(arg0: Java.Scope, arg1: Java.P): Java.GraphTraversal;
                    whereP(arg0: Java.Scope, arg1: Java.P): Promise<Java.GraphTraversal>;
                    where(arg0: string_t, arg1: Java.P): Java.GraphTraversal;
                    whereP(arg0: string_t, arg1: Java.P): Promise<Java.GraphTraversal>;
                    where(arg0: Java.Traversal): Java.GraphTraversal;
                    whereP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                    where(arg0: Java.P): Java.GraphTraversal;
                    whereP(arg0: Java.P): Promise<Java.GraphTraversal>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
            interface DefaultGraphTraversal extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal, Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin {
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addE(arg0: Java.Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                addStep(arg0: integer_t, arg1: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: integer_t, arg1: Java.Step): Promise<Java.Traversal$Admin>;
                addStep(arg0: Java.Step): Java.GraphTraversal$Admin;
                addStepP(arg0: Java.Step): Promise<Java.GraphTraversal$Admin>;
                addStep(arg0: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                addV(...arg0: object_t[]): Java.GraphTraversal;
                addV(arg0: object_array_t): Java.GraphTraversal;
                addVP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                addVP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                aggregate(arg0: string_t): Java.GraphTraversal;
                aggregateP(arg0: string_t): Promise<Java.GraphTraversal>;
                and(...arg0: Java.Traversal[]): Java.GraphTraversal;
                and(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                andP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                andP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                applyStrategies(): void;
                applyStrategiesP(): Promise<void>;
                as(arg0: string_t, ...arg1: string_t[]): Java.GraphTraversal;
                as(arg0: string_t, arg1: array_t<string_t>): Java.GraphTraversal;
                asP(arg0: string_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                asP(arg0: string_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                asAdmin(): Java.GraphTraversal$Admin;
                asAdminP(): Promise<Java.GraphTraversal$Admin>;
                asAdmin(): Java.Traversal$Admin;
                asAdminP(): Promise<Java.Traversal$Admin>;
                barrier(): Java.GraphTraversal;
                barrierP(): Promise<Java.GraphTraversal>;
                both(...arg0: string_t[]): Java.GraphTraversal;
                both(arg0: array_t<string_t>): Java.GraphTraversal;
                bothP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                bothP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                bothE(...arg0: string_t[]): Java.GraphTraversal;
                bothE(arg0: array_t<string_t>): Java.GraphTraversal;
                bothEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                bothEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                bothV(): Java.GraphTraversal;
                bothVP(): Promise<Java.GraphTraversal>;
                branch(arg0: Java.Traversal): Java.GraphTraversal;
                branchP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                branch(arg0: Java.Function): Java.GraphTraversal;
                branchP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                by(arg0: Java.Traversal, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Traversal, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: Java.Function, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: string_t, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: string_t, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: Java.Traversal): Java.GraphTraversal;
                byP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                by(arg0: Java.Order): Java.GraphTraversal;
                byP(arg0: Java.Order): Promise<Java.GraphTraversal>;
                by(arg0: Java.T): Java.GraphTraversal;
                byP(arg0: Java.T): Promise<Java.GraphTraversal>;
                by(arg0: Java.Function): Java.GraphTraversal;
                byP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                by(arg0: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: string_t): Java.GraphTraversal;
                byP(arg0: string_t): Promise<Java.GraphTraversal>;
                by(): Java.GraphTraversal;
                byP(): Promise<Java.GraphTraversal>;
                cap(arg0: string_t, ...arg1: string_t[]): Java.GraphTraversal;
                cap(arg0: string_t, arg1: array_t<string_t>): Java.GraphTraversal;
                capP(arg0: string_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                capP(arg0: string_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Traversal, arg1: Java.Traversal, arg2: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Traversal, arg1: Java.Traversal, arg2: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Predicate, arg1: Java.Traversal, arg2: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Predicate, arg1: Java.Traversal, arg2: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Function): Java.GraphTraversal;
                chooseP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                clone(): Java.DefaultGraphTraversal;
                cloneP(): Promise<Java.DefaultGraphTraversal>;
                clone(): Java.GraphTraversal$Admin;
                cloneP(): Promise<Java.GraphTraversal$Admin>;
                clone(): Java.DefaultTraversal;
                cloneP(): Promise<Java.DefaultTraversal>;
                clone(): Java.Traversal$Admin;
                cloneP(): Promise<Java.Traversal$Admin>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                coalesce(...arg0: Java.Traversal[]): Java.GraphTraversal;
                coalesce(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                coalesceP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                coalesceP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                coin(arg0: double_t): Java.GraphTraversal;
                coinP(arg0: double_t): Promise<Java.GraphTraversal>;
                count(arg0: Java.Scope): Java.GraphTraversal;
                countP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                count(): Java.GraphTraversal;
                countP(): Promise<Java.GraphTraversal>;
                cyclicPath(): Java.GraphTraversal;
                cyclicPathP(): Promise<Java.GraphTraversal>;
                dedup(arg0: Java.Scope): Java.GraphTraversal;
                dedupP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                dedup(): Java.GraphTraversal;
                dedupP(): Promise<Java.GraphTraversal>;
                drop(): Java.GraphTraversal;
                dropP(): Promise<Java.GraphTraversal>;
                emit(arg0: Java.Traversal): Java.GraphTraversal;
                emitP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                emit(arg0: Java.Predicate): Java.GraphTraversal;
                emitP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                emit(): Java.GraphTraversal;
                emitP(): Promise<Java.GraphTraversal>;
                equals(arg0: Java.Traversal$Admin): boolean;
                equalsP(arg0: Java.Traversal$Admin): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                fill(arg0: Java.Collection): Java.Collection;
                fillP(arg0: Java.Collection): Promise<Java.Collection>;
                filter(arg0: Java.Predicate): Java.GraphTraversal;
                filterP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                flatMap(arg0: Java.Function): Java.GraphTraversal;
                flatMapP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                fold(arg0: object_t, arg1: Java.BiFunction): Java.GraphTraversal;
                foldP(arg0: object_t, arg1: Java.BiFunction): Promise<Java.GraphTraversal>;
                fold(): Java.GraphTraversal;
                foldP(): Promise<Java.GraphTraversal>;
                forEachRemaining(arg0: Java.Class, arg1: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Class, arg1: Java.Consumer): Promise<void>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getEndStep(): Java.Step;
                getEndStepP(): Promise<Java.Step>;
                getEngine(): Java.TraversalEngine;
                getEngineP(): Promise<Java.TraversalEngine>;
                getGraph(): object_t;
                getGraphP(): Promise<object_t>;
                getParent(): object_t;
                getParentP(): Promise<object_t>;
                getSideEffects(): Java.TraversalSideEffects;
                getSideEffectsP(): Promise<Java.TraversalSideEffects>;
                getStartStep(): Java.Step;
                getStartStepP(): Promise<Java.Step>;
                getSteps(): Java.List;
                getStepsP(): Promise<Java.List>;
                getStrategies(): Java.TraversalStrategies;
                getStrategiesP(): Promise<Java.TraversalStrategies>;
                getTraverserGenerator(): Java.TraverserGenerator;
                getTraverserGeneratorP(): Promise<Java.TraverserGenerator>;
                getTraverserRequirements(): Java.Set;
                getTraverserRequirementsP(): Promise<Java.Set>;
                group(arg0: string_t): Java.GraphTraversal;
                groupP(arg0: string_t): Promise<Java.GraphTraversal>;
                group(): Java.GraphTraversal;
                groupP(): Promise<Java.GraphTraversal>;
                groupCount(arg0: string_t): Java.GraphTraversal;
                groupCountP(arg0: string_t): Promise<Java.GraphTraversal>;
                groupCount(): Java.GraphTraversal;
                groupCountP(): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: string_t, arg2: Java.P): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: string_t, arg2: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: string_t, arg2: object_t): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<Java.GraphTraversal>;
                has(arg0: Java.T, arg1: Java.P): Java.GraphTraversal;
                hasP(arg0: Java.T, arg1: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: Java.Traversal): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: Java.P): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: Java.T, arg1: object_t): Java.GraphTraversal;
                hasP(arg0: Java.T, arg1: object_t): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: object_t): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: object_t): Promise<Java.GraphTraversal>;
                has(arg0: string_t): Java.GraphTraversal;
                hasP(arg0: string_t): Promise<Java.GraphTraversal>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasId(...arg0: object_t[]): Java.GraphTraversal;
                hasId(arg0: object_array_t): Java.GraphTraversal;
                hasIdP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                hasIdP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                hasKey(...arg0: string_t[]): Java.GraphTraversal;
                hasKey(arg0: array_t<string_t>): Java.GraphTraversal;
                hasKeyP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                hasKeyP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                hasLabel(...arg0: string_t[]): Java.GraphTraversal;
                hasLabel(arg0: array_t<string_t>): Java.GraphTraversal;
                hasLabelP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                hasLabelP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                hasNot(arg0: string_t): Java.GraphTraversal;
                hasNotP(arg0: string_t): Promise<Java.GraphTraversal>;
                hasValue(...arg0: object_t[]): Java.GraphTraversal;
                hasValue(arg0: object_array_t): Java.GraphTraversal;
                hasValueP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                hasValueP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                id(): Java.GraphTraversal;
                idP(): Promise<Java.GraphTraversal>;
                identity(): Java.GraphTraversal;
                identityP(): Promise<Java.GraphTraversal>;
                in(...arg0: string_t[]): Java.GraphTraversal;
                in(arg0: array_t<string_t>): Java.GraphTraversal;
                inP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                inP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                inE(...arg0: string_t[]): Java.GraphTraversal;
                inE(arg0: array_t<string_t>): Java.GraphTraversal;
                inEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                inEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                inject(...arg0: object_t[]): Java.GraphTraversal;
                inject(arg0: object_array_t): Java.GraphTraversal;
                injectP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                injectP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                inV(): Java.GraphTraversal;
                inVP(): Promise<Java.GraphTraversal>;
                is(arg0: Java.P): Java.GraphTraversal;
                isP(arg0: Java.P): Promise<Java.GraphTraversal>;
                is(arg0: object_t): Java.GraphTraversal;
                isP(arg0: object_t): Promise<Java.GraphTraversal>;
                isLocked(): boolean;
                isLockedP(): Promise<boolean>;
                iterate(): Java.GraphTraversal;
                iterateP(): Promise<Java.GraphTraversal>;
                iterate(): Java.Traversal;
                iterateP(): Promise<Java.Traversal>;
                key(): Java.GraphTraversal;
                keyP(): Promise<Java.GraphTraversal>;
                label(): Java.GraphTraversal;
                labelP(): Promise<Java.GraphTraversal>;
                limit(arg0: Java.Scope, arg1: long_t): Java.GraphTraversal;
                limitP(arg0: Java.Scope, arg1: long_t): Promise<Java.GraphTraversal>;
                limit(arg0: long_t): Java.GraphTraversal;
                limitP(arg0: long_t): Promise<Java.GraphTraversal>;
                local(arg0: Java.Traversal): Java.GraphTraversal;
                localP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                map(arg0: Java.Function): Java.GraphTraversal;
                mapP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                match(arg0: string_t, ...arg1: Java.Traversal[]): Java.GraphTraversal;
                match(arg0: string_t, arg1: array_t<Java.Traversal>): Java.GraphTraversal;
                matchP(arg0: string_t, ...arg1: Java.Traversal[]): Promise<Java.GraphTraversal>;
                matchP(arg0: string_t, arg1: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                max(arg0: Java.Scope): Java.GraphTraversal;
                maxP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                max(): Java.GraphTraversal;
                maxP(): Promise<Java.GraphTraversal>;
                mean(arg0: Java.Scope): Java.GraphTraversal;
                meanP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                mean(): Java.GraphTraversal;
                meanP(): Promise<Java.GraphTraversal>;
                min(arg0: Java.Scope): Java.GraphTraversal;
                minP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                min(): Java.GraphTraversal;
                minP(): Promise<Java.GraphTraversal>;
                next(arg0: integer_t): Java.List;
                nextP(arg0: integer_t): Promise<Java.List>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                option(arg0: object_t, arg1: Java.Traversal): Java.GraphTraversal;
                optionP(arg0: object_t, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                option(arg0: Java.Traversal): Java.GraphTraversal;
                optionP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                or(...arg0: Java.Traversal[]): Java.GraphTraversal;
                or(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                orP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                orP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                order(arg0: Java.Scope): Java.GraphTraversal;
                orderP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                order(): Java.GraphTraversal;
                orderP(): Promise<Java.GraphTraversal>;
                otherV(): Java.GraphTraversal;
                otherVP(): Promise<Java.GraphTraversal>;
                out(...arg0: string_t[]): Java.GraphTraversal;
                out(arg0: array_t<string_t>): Java.GraphTraversal;
                outP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                outP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                outE(...arg0: string_t[]): Java.GraphTraversal;
                outE(arg0: array_t<string_t>): Java.GraphTraversal;
                outEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                outEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                outV(): Java.GraphTraversal;
                outVP(): Promise<Java.GraphTraversal>;
                path(): Java.GraphTraversal;
                pathP(): Promise<Java.GraphTraversal>;
                profile(): Java.GraphTraversal;
                profileP(): Promise<Java.GraphTraversal>;
                properties(...arg0: string_t[]): Java.GraphTraversal;
                properties(arg0: array_t<string_t>): Java.GraphTraversal;
                propertiesP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Java.GraphTraversal;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Java.GraphTraversal;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<Java.GraphTraversal>;
                property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Java.GraphTraversal;
                property(arg0: string_t, arg1: object_t, arg2: object_array_t): Java.GraphTraversal;
                propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                propertyMap(...arg0: string_t[]): Java.GraphTraversal;
                propertyMap(arg0: array_t<string_t>): Java.GraphTraversal;
                propertyMapP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                propertyMapP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                range(arg0: Java.Scope, arg1: long_t, arg2: long_t): Java.GraphTraversal;
                rangeP(arg0: Java.Scope, arg1: long_t, arg2: long_t): Promise<Java.GraphTraversal>;
                range(arg0: long_t, arg1: long_t): Java.GraphTraversal;
                rangeP(arg0: long_t, arg1: long_t): Promise<Java.GraphTraversal>;
                remove(): void;
                removeP(): Promise<void>;
                removeStep(arg0: Java.Step): Java.Traversal$Admin;
                removeStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                removeStep(arg0: integer_t): Java.Traversal$Admin;
                removeStepP(arg0: integer_t): Promise<Java.Traversal$Admin>;
                repeat(arg0: Java.Traversal): Java.GraphTraversal;
                repeatP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                reset(): void;
                resetP(): Promise<void>;
                sack(arg0: Java.BinaryOperator, arg1: string_t): Java.GraphTraversal;
                sackP(arg0: Java.BinaryOperator, arg1: string_t): Promise<Java.GraphTraversal>;
                sack(arg0: Java.BiFunction): Java.GraphTraversal;
                sackP(arg0: Java.BiFunction): Promise<Java.GraphTraversal>;
                sack(): Java.GraphTraversal;
                sackP(): Promise<Java.GraphTraversal>;
                sample(arg0: Java.Scope, arg1: integer_t): Java.GraphTraversal;
                sampleP(arg0: Java.Scope, arg1: integer_t): Promise<Java.GraphTraversal>;
                sample(arg0: integer_t): Java.GraphTraversal;
                sampleP(arg0: integer_t): Promise<Java.GraphTraversal>;
                select(arg0: Java.Scope, ...arg1: string_t[]): Java.GraphTraversal;
                select(arg0: Java.Scope, arg1: array_t<string_t>): Java.GraphTraversal;
                selectP(arg0: Java.Scope, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                selectP(arg0: Java.Scope, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                select(arg0: Java.Scope, arg1: string_t): Java.GraphTraversal;
                selectP(arg0: Java.Scope, arg1: string_t): Promise<Java.GraphTraversal>;
                select(...arg0: string_t[]): Java.GraphTraversal;
                select(arg0: array_t<string_t>): Java.GraphTraversal;
                selectP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                selectP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                select(arg0: string_t): Java.GraphTraversal;
                selectP(arg0: string_t): Promise<Java.GraphTraversal>;
                setEngine(arg0: Java.TraversalEngine): void;
                setEngineP(arg0: Java.TraversalEngine): Promise<void>;
                setGraph(arg0: Java.Graph): void;
                setGraphP(arg0: Java.Graph): Promise<void>;
                setParent(arg0: object_t): void;
                setParentP(arg0: object_t): Promise<void>;
                setSideEffects(arg0: Java.TraversalSideEffects): void;
                setSideEffectsP(arg0: Java.TraversalSideEffects): Promise<void>;
                setStrategies(arg0: Java.TraversalStrategies): void;
                setStrategiesP(arg0: Java.TraversalStrategies): Promise<void>;
                sideEffect(arg0: Java.Consumer): Java.GraphTraversal;
                sideEffectP(arg0: Java.Consumer): Promise<Java.GraphTraversal>;
                simplePath(): Java.GraphTraversal;
                simplePathP(): Promise<Java.GraphTraversal>;
                store(arg0: string_t): Java.GraphTraversal;
                storeP(arg0: string_t): Promise<Java.GraphTraversal>;
                subgraph(arg0: string_t): Java.GraphTraversal;
                subgraphP(arg0: string_t): Promise<Java.GraphTraversal>;
                sum(arg0: Java.Scope): Java.GraphTraversal;
                sumP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                sum(): Java.GraphTraversal;
                sumP(): Promise<Java.GraphTraversal>;
                tail(arg0: Java.Scope, arg1: long_t): Java.GraphTraversal;
                tailP(arg0: Java.Scope, arg1: long_t): Promise<Java.GraphTraversal>;
                tail(arg0: Java.Scope): Java.GraphTraversal;
                tailP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                tail(arg0: long_t): Java.GraphTraversal;
                tailP(arg0: long_t): Promise<Java.GraphTraversal>;
                tail(): Java.GraphTraversal;
                tailP(): Promise<Java.GraphTraversal>;
                timeLimit(arg0: long_t): Java.GraphTraversal;
                timeLimitP(arg0: long_t): Promise<Java.GraphTraversal>;
                times(arg0: integer_t): Java.GraphTraversal;
                timesP(arg0: integer_t): Promise<Java.GraphTraversal>;
                to(arg0: Java.Direction, ...arg1: string_t[]): Java.GraphTraversal;
                to(arg0: Java.Direction, arg1: array_t<string_t>): Java.GraphTraversal;
                toP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                toP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                toBulkSet(): Java.BulkSet;
                toBulkSetP(): Promise<Java.BulkSet>;
                toE(arg0: Java.Direction, ...arg1: string_t[]): Java.GraphTraversal;
                toE(arg0: Java.Direction, arg1: array_t<string_t>): Java.GraphTraversal;
                toEP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                toEP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                toList(): Java.List;
                toListP(): Promise<Java.List>;
                toSet(): Java.Set;
                toSetP(): Promise<Java.Set>;
                toString(): string;
                toStringP(): Promise<string>;
                toV(arg0: Java.Direction): Java.GraphTraversal;
                toVP(arg0: Java.Direction): Promise<Java.GraphTraversal>;
                tree(arg0: string_t): Java.GraphTraversal;
                treeP(arg0: string_t): Promise<Java.GraphTraversal>;
                tree(): Java.GraphTraversal;
                treeP(): Promise<Java.GraphTraversal>;
                tryNext(): object_t;
                tryNextP(): Promise<object_t>;
                unfold(): Java.GraphTraversal;
                unfoldP(): Promise<Java.GraphTraversal>;
                union(...arg0: Java.Traversal[]): Java.GraphTraversal;
                union(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                unionP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                unionP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                until(arg0: Java.Traversal): Java.GraphTraversal;
                untilP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                until(arg0: Java.Predicate): Java.GraphTraversal;
                untilP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                value(): Java.GraphTraversal;
                valueP(): Promise<Java.GraphTraversal>;
                valueMap(arg0: boolean_t, ...arg1: string_t[]): Java.GraphTraversal;
                valueMap(arg0: boolean_t, arg1: array_t<string_t>): Java.GraphTraversal;
                valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                valueMap(...arg0: string_t[]): Java.GraphTraversal;
                valueMap(arg0: array_t<string_t>): Java.GraphTraversal;
                valueMapP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                valueMapP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                values(...arg0: string_t[]): Java.GraphTraversal;
                values(arg0: array_t<string_t>): Java.GraphTraversal;
                valuesP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                valuesP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                where(arg0: Java.Scope, arg1: string_t, arg2: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: string_t, arg2: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: Java.Scope, arg1: Java.Traversal): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                where(arg0: Java.Scope, arg1: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: string_t, arg1: Java.P): Java.GraphTraversal;
                whereP(arg0: string_t, arg1: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: Java.Traversal): Java.GraphTraversal;
                whereP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                where(arg0: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.P): Promise<Java.GraphTraversal>;
            }
            module DefaultGraphTraversal {
                interface Static {
                    new (arg0: Java.Graph): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;
                    new (): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.DefaultGraphTraversal;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
            interface EmptyGraphTraversal extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.EmptyTraversal, Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal, Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal$Admin {
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addE(arg0: Java.Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                addStep(arg0: integer_t, arg1: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: integer_t, arg1: Java.Step): Promise<Java.Traversal$Admin>;
                addStep(arg0: Java.Step): Java.GraphTraversal$Admin;
                addStepP(arg0: Java.Step): Promise<Java.GraphTraversal$Admin>;
                addStep(arg0: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                addV(...arg0: object_t[]): Java.GraphTraversal;
                addV(arg0: object_array_t): Java.GraphTraversal;
                addVP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                addVP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                aggregate(arg0: string_t): Java.GraphTraversal;
                aggregateP(arg0: string_t): Promise<Java.GraphTraversal>;
                and(...arg0: Java.Traversal[]): Java.GraphTraversal;
                and(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                andP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                andP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                applyStrategies(): void;
                applyStrategiesP(): Promise<void>;
                as(arg0: string_t, ...arg1: string_t[]): Java.GraphTraversal;
                as(arg0: string_t, arg1: array_t<string_t>): Java.GraphTraversal;
                asP(arg0: string_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                asP(arg0: string_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                asAdmin(): Java.GraphTraversal$Admin;
                asAdminP(): Promise<Java.GraphTraversal$Admin>;
                asAdmin(): Java.Traversal$Admin;
                asAdminP(): Promise<Java.Traversal$Admin>;
                barrier(): Java.GraphTraversal;
                barrierP(): Promise<Java.GraphTraversal>;
                both(...arg0: string_t[]): Java.GraphTraversal;
                both(arg0: array_t<string_t>): Java.GraphTraversal;
                bothP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                bothP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                bothE(...arg0: string_t[]): Java.GraphTraversal;
                bothE(arg0: array_t<string_t>): Java.GraphTraversal;
                bothEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                bothEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                bothV(): Java.GraphTraversal;
                bothVP(): Promise<Java.GraphTraversal>;
                branch(arg0: Java.Traversal): Java.GraphTraversal;
                branchP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                branch(arg0: Java.Function): Java.GraphTraversal;
                branchP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                by(arg0: Java.Traversal, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Traversal, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: Java.Function, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: string_t, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: string_t, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: Java.Traversal): Java.GraphTraversal;
                byP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                by(arg0: Java.Order): Java.GraphTraversal;
                byP(arg0: Java.Order): Promise<Java.GraphTraversal>;
                by(arg0: Java.T): Java.GraphTraversal;
                byP(arg0: Java.T): Promise<Java.GraphTraversal>;
                by(arg0: Java.Function): Java.GraphTraversal;
                byP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                by(arg0: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: string_t): Java.GraphTraversal;
                byP(arg0: string_t): Promise<Java.GraphTraversal>;
                by(): Java.GraphTraversal;
                byP(): Promise<Java.GraphTraversal>;
                cap(arg0: string_t, ...arg1: string_t[]): Java.GraphTraversal;
                cap(arg0: string_t, arg1: array_t<string_t>): Java.GraphTraversal;
                capP(arg0: string_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                capP(arg0: string_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Traversal, arg1: Java.Traversal, arg2: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Traversal, arg1: Java.Traversal, arg2: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Predicate, arg1: Java.Traversal, arg2: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Predicate, arg1: Java.Traversal, arg2: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Function): Java.GraphTraversal;
                chooseP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                clone(): Java.GraphTraversal$Admin;
                cloneP(): Promise<Java.GraphTraversal$Admin>;
                clone(): Java.EmptyGraphTraversal;
                cloneP(): Promise<Java.EmptyGraphTraversal>;
                clone(): Java.EmptyTraversal;
                cloneP(): Promise<Java.EmptyTraversal>;
                clone(): Java.Traversal$Admin;
                cloneP(): Promise<Java.Traversal$Admin>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                coalesce(...arg0: Java.Traversal[]): Java.GraphTraversal;
                coalesce(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                coalesceP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                coalesceP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                coin(arg0: double_t): Java.GraphTraversal;
                coinP(arg0: double_t): Promise<Java.GraphTraversal>;
                count(arg0: Java.Scope): Java.GraphTraversal;
                countP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                count(): Java.GraphTraversal;
                countP(): Promise<Java.GraphTraversal>;
                cyclicPath(): Java.GraphTraversal;
                cyclicPathP(): Promise<Java.GraphTraversal>;
                dedup(arg0: Java.Scope): Java.GraphTraversal;
                dedupP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                dedup(): Java.GraphTraversal;
                dedupP(): Promise<Java.GraphTraversal>;
                drop(): Java.GraphTraversal;
                dropP(): Promise<Java.GraphTraversal>;
                emit(arg0: Java.Traversal): Java.GraphTraversal;
                emitP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                emit(arg0: Java.Predicate): Java.GraphTraversal;
                emitP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                emit(): Java.GraphTraversal;
                emitP(): Promise<Java.GraphTraversal>;
                equals(arg0: Java.Traversal$Admin): boolean;
                equalsP(arg0: Java.Traversal$Admin): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                fill(arg0: Java.Collection): Java.Collection;
                fillP(arg0: Java.Collection): Promise<Java.Collection>;
                filter(arg0: Java.Predicate): Java.GraphTraversal;
                filterP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                flatMap(arg0: Java.Function): Java.GraphTraversal;
                flatMapP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                fold(arg0: object_t, arg1: Java.BiFunction): Java.GraphTraversal;
                foldP(arg0: object_t, arg1: Java.BiFunction): Promise<Java.GraphTraversal>;
                fold(): Java.GraphTraversal;
                foldP(): Promise<Java.GraphTraversal>;
                forEachRemaining(arg0: Java.Class, arg1: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Class, arg1: Java.Consumer): Promise<void>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getEndStep(): Java.Step;
                getEndStepP(): Promise<Java.Step>;
                getEngine(): Java.TraversalEngine;
                getEngineP(): Promise<Java.TraversalEngine>;
                getGraph(): object_t;
                getGraphP(): Promise<object_t>;
                getParent(): object_t;
                getParentP(): Promise<object_t>;
                getSideEffects(): Java.TraversalSideEffects;
                getSideEffectsP(): Promise<Java.TraversalSideEffects>;
                getStartStep(): Java.Step;
                getStartStepP(): Promise<Java.Step>;
                getSteps(): Java.List;
                getStepsP(): Promise<Java.List>;
                getStrategies(): Java.TraversalStrategies;
                getStrategiesP(): Promise<Java.TraversalStrategies>;
                getTraverserGenerator(): Java.TraverserGenerator;
                getTraverserGeneratorP(): Promise<Java.TraverserGenerator>;
                getTraverserRequirements(): Java.Set;
                getTraverserRequirementsP(): Promise<Java.Set>;
                group(arg0: string_t): Java.GraphTraversal;
                groupP(arg0: string_t): Promise<Java.GraphTraversal>;
                group(): Java.GraphTraversal;
                groupP(): Promise<Java.GraphTraversal>;
                groupCount(arg0: string_t): Java.GraphTraversal;
                groupCountP(arg0: string_t): Promise<Java.GraphTraversal>;
                groupCount(): Java.GraphTraversal;
                groupCountP(): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: string_t, arg2: Java.P): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: string_t, arg2: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: string_t, arg2: object_t): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<Java.GraphTraversal>;
                has(arg0: Java.T, arg1: Java.P): Java.GraphTraversal;
                hasP(arg0: Java.T, arg1: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: Java.Traversal): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: Java.P): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: Java.T, arg1: object_t): Java.GraphTraversal;
                hasP(arg0: Java.T, arg1: object_t): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: object_t): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: object_t): Promise<Java.GraphTraversal>;
                has(arg0: string_t): Java.GraphTraversal;
                hasP(arg0: string_t): Promise<Java.GraphTraversal>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasId(...arg0: object_t[]): Java.GraphTraversal;
                hasId(arg0: object_array_t): Java.GraphTraversal;
                hasIdP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                hasIdP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                hasKey(...arg0: string_t[]): Java.GraphTraversal;
                hasKey(arg0: array_t<string_t>): Java.GraphTraversal;
                hasKeyP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                hasKeyP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                hasLabel(...arg0: string_t[]): Java.GraphTraversal;
                hasLabel(arg0: array_t<string_t>): Java.GraphTraversal;
                hasLabelP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                hasLabelP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                hasNot(arg0: string_t): Java.GraphTraversal;
                hasNotP(arg0: string_t): Promise<Java.GraphTraversal>;
                hasValue(...arg0: object_t[]): Java.GraphTraversal;
                hasValue(arg0: object_array_t): Java.GraphTraversal;
                hasValueP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                hasValueP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                id(): Java.GraphTraversal;
                idP(): Promise<Java.GraphTraversal>;
                identity(): Java.GraphTraversal;
                identityP(): Promise<Java.GraphTraversal>;
                in(...arg0: string_t[]): Java.GraphTraversal;
                in(arg0: array_t<string_t>): Java.GraphTraversal;
                inP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                inP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                inE(...arg0: string_t[]): Java.GraphTraversal;
                inE(arg0: array_t<string_t>): Java.GraphTraversal;
                inEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                inEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                inject(...arg0: object_t[]): Java.GraphTraversal;
                inject(arg0: object_array_t): Java.GraphTraversal;
                injectP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                injectP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                inV(): Java.GraphTraversal;
                inVP(): Promise<Java.GraphTraversal>;
                is(arg0: Java.P): Java.GraphTraversal;
                isP(arg0: Java.P): Promise<Java.GraphTraversal>;
                is(arg0: object_t): Java.GraphTraversal;
                isP(arg0: object_t): Promise<Java.GraphTraversal>;
                isLocked(): boolean;
                isLockedP(): Promise<boolean>;
                iterate(): Java.GraphTraversal;
                iterateP(): Promise<Java.GraphTraversal>;
                iterate(): Java.Traversal;
                iterateP(): Promise<Java.Traversal>;
                key(): Java.GraphTraversal;
                keyP(): Promise<Java.GraphTraversal>;
                label(): Java.GraphTraversal;
                labelP(): Promise<Java.GraphTraversal>;
                limit(arg0: Java.Scope, arg1: long_t): Java.GraphTraversal;
                limitP(arg0: Java.Scope, arg1: long_t): Promise<Java.GraphTraversal>;
                limit(arg0: long_t): Java.GraphTraversal;
                limitP(arg0: long_t): Promise<Java.GraphTraversal>;
                local(arg0: Java.Traversal): Java.GraphTraversal;
                localP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                map(arg0: Java.Function): Java.GraphTraversal;
                mapP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                match(arg0: string_t, ...arg1: Java.Traversal[]): Java.GraphTraversal;
                match(arg0: string_t, arg1: array_t<Java.Traversal>): Java.GraphTraversal;
                matchP(arg0: string_t, ...arg1: Java.Traversal[]): Promise<Java.GraphTraversal>;
                matchP(arg0: string_t, arg1: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                max(arg0: Java.Scope): Java.GraphTraversal;
                maxP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                max(): Java.GraphTraversal;
                maxP(): Promise<Java.GraphTraversal>;
                mean(arg0: Java.Scope): Java.GraphTraversal;
                meanP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                mean(): Java.GraphTraversal;
                meanP(): Promise<Java.GraphTraversal>;
                min(arg0: Java.Scope): Java.GraphTraversal;
                minP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                min(): Java.GraphTraversal;
                minP(): Promise<Java.GraphTraversal>;
                next(arg0: integer_t): Java.List;
                nextP(arg0: integer_t): Promise<Java.List>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                option(arg0: object_t, arg1: Java.Traversal): Java.GraphTraversal;
                optionP(arg0: object_t, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                option(arg0: Java.Traversal): Java.GraphTraversal;
                optionP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                or(...arg0: Java.Traversal[]): Java.GraphTraversal;
                or(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                orP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                orP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                order(arg0: Java.Scope): Java.GraphTraversal;
                orderP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                order(): Java.GraphTraversal;
                orderP(): Promise<Java.GraphTraversal>;
                otherV(): Java.GraphTraversal;
                otherVP(): Promise<Java.GraphTraversal>;
                out(...arg0: string_t[]): Java.GraphTraversal;
                out(arg0: array_t<string_t>): Java.GraphTraversal;
                outP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                outP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                outE(...arg0: string_t[]): Java.GraphTraversal;
                outE(arg0: array_t<string_t>): Java.GraphTraversal;
                outEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                outEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                outV(): Java.GraphTraversal;
                outVP(): Promise<Java.GraphTraversal>;
                path(): Java.GraphTraversal;
                pathP(): Promise<Java.GraphTraversal>;
                profile(): Java.GraphTraversal;
                profileP(): Promise<Java.GraphTraversal>;
                properties(...arg0: string_t[]): Java.GraphTraversal;
                properties(arg0: array_t<string_t>): Java.GraphTraversal;
                propertiesP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Java.GraphTraversal;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Java.GraphTraversal;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<Java.GraphTraversal>;
                property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Java.GraphTraversal;
                property(arg0: string_t, arg1: object_t, arg2: object_array_t): Java.GraphTraversal;
                propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                propertyMap(...arg0: string_t[]): Java.GraphTraversal;
                propertyMap(arg0: array_t<string_t>): Java.GraphTraversal;
                propertyMapP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                propertyMapP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                range(arg0: Java.Scope, arg1: long_t, arg2: long_t): Java.GraphTraversal;
                rangeP(arg0: Java.Scope, arg1: long_t, arg2: long_t): Promise<Java.GraphTraversal>;
                range(arg0: long_t, arg1: long_t): Java.GraphTraversal;
                rangeP(arg0: long_t, arg1: long_t): Promise<Java.GraphTraversal>;
                remove(): void;
                removeP(): Promise<void>;
                removeStep(arg0: Java.Step): Java.Traversal$Admin;
                removeStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                removeStep(arg0: integer_t): Java.Traversal$Admin;
                removeStepP(arg0: integer_t): Promise<Java.Traversal$Admin>;
                repeat(arg0: Java.Traversal): Java.GraphTraversal;
                repeatP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                reset(): void;
                resetP(): Promise<void>;
                sack(arg0: Java.BinaryOperator, arg1: string_t): Java.GraphTraversal;
                sackP(arg0: Java.BinaryOperator, arg1: string_t): Promise<Java.GraphTraversal>;
                sack(arg0: Java.BiFunction): Java.GraphTraversal;
                sackP(arg0: Java.BiFunction): Promise<Java.GraphTraversal>;
                sack(): Java.GraphTraversal;
                sackP(): Promise<Java.GraphTraversal>;
                sample(arg0: Java.Scope, arg1: integer_t): Java.GraphTraversal;
                sampleP(arg0: Java.Scope, arg1: integer_t): Promise<Java.GraphTraversal>;
                sample(arg0: integer_t): Java.GraphTraversal;
                sampleP(arg0: integer_t): Promise<Java.GraphTraversal>;
                select(arg0: Java.Scope, ...arg1: string_t[]): Java.GraphTraversal;
                select(arg0: Java.Scope, arg1: array_t<string_t>): Java.GraphTraversal;
                selectP(arg0: Java.Scope, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                selectP(arg0: Java.Scope, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                select(arg0: Java.Scope, arg1: string_t): Java.GraphTraversal;
                selectP(arg0: Java.Scope, arg1: string_t): Promise<Java.GraphTraversal>;
                select(...arg0: string_t[]): Java.GraphTraversal;
                select(arg0: array_t<string_t>): Java.GraphTraversal;
                selectP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                selectP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                select(arg0: string_t): Java.GraphTraversal;
                selectP(arg0: string_t): Promise<Java.GraphTraversal>;
                setEngine(arg0: Java.TraversalEngine): void;
                setEngineP(arg0: Java.TraversalEngine): Promise<void>;
                setGraph(arg0: Java.Graph): void;
                setGraphP(arg0: Java.Graph): Promise<void>;
                setParent(arg0: object_t): void;
                setParentP(arg0: object_t): Promise<void>;
                setSideEffects(arg0: Java.TraversalSideEffects): void;
                setSideEffectsP(arg0: Java.TraversalSideEffects): Promise<void>;
                setStrategies(arg0: Java.TraversalStrategies): void;
                setStrategiesP(arg0: Java.TraversalStrategies): Promise<void>;
                sideEffect(arg0: Java.Consumer): Java.GraphTraversal;
                sideEffectP(arg0: Java.Consumer): Promise<Java.GraphTraversal>;
                simplePath(): Java.GraphTraversal;
                simplePathP(): Promise<Java.GraphTraversal>;
                store(arg0: string_t): Java.GraphTraversal;
                storeP(arg0: string_t): Promise<Java.GraphTraversal>;
                subgraph(arg0: string_t): Java.GraphTraversal;
                subgraphP(arg0: string_t): Promise<Java.GraphTraversal>;
                sum(arg0: Java.Scope): Java.GraphTraversal;
                sumP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                sum(): Java.GraphTraversal;
                sumP(): Promise<Java.GraphTraversal>;
                tail(arg0: Java.Scope, arg1: long_t): Java.GraphTraversal;
                tailP(arg0: Java.Scope, arg1: long_t): Promise<Java.GraphTraversal>;
                tail(arg0: Java.Scope): Java.GraphTraversal;
                tailP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                tail(arg0: long_t): Java.GraphTraversal;
                tailP(arg0: long_t): Promise<Java.GraphTraversal>;
                tail(): Java.GraphTraversal;
                tailP(): Promise<Java.GraphTraversal>;
                timeLimit(arg0: long_t): Java.GraphTraversal;
                timeLimitP(arg0: long_t): Promise<Java.GraphTraversal>;
                times(arg0: integer_t): Java.GraphTraversal;
                timesP(arg0: integer_t): Promise<Java.GraphTraversal>;
                to(arg0: Java.Direction, ...arg1: string_t[]): Java.GraphTraversal;
                to(arg0: Java.Direction, arg1: array_t<string_t>): Java.GraphTraversal;
                toP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                toP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                toBulkSet(): Java.BulkSet;
                toBulkSetP(): Promise<Java.BulkSet>;
                toE(arg0: Java.Direction, ...arg1: string_t[]): Java.GraphTraversal;
                toE(arg0: Java.Direction, arg1: array_t<string_t>): Java.GraphTraversal;
                toEP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                toEP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                toList(): Java.List;
                toListP(): Promise<Java.List>;
                toSet(): Java.Set;
                toSetP(): Promise<Java.Set>;
                toString(): string;
                toStringP(): Promise<string>;
                toV(arg0: Java.Direction): Java.GraphTraversal;
                toVP(arg0: Java.Direction): Promise<Java.GraphTraversal>;
                tree(arg0: string_t): Java.GraphTraversal;
                treeP(arg0: string_t): Promise<Java.GraphTraversal>;
                tree(): Java.GraphTraversal;
                treeP(): Promise<Java.GraphTraversal>;
                tryNext(): object_t;
                tryNextP(): Promise<object_t>;
                unfold(): Java.GraphTraversal;
                unfoldP(): Promise<Java.GraphTraversal>;
                union(...arg0: Java.Traversal[]): Java.GraphTraversal;
                union(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                unionP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                unionP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                until(arg0: Java.Traversal): Java.GraphTraversal;
                untilP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                until(arg0: Java.Predicate): Java.GraphTraversal;
                untilP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                value(): Java.GraphTraversal;
                valueP(): Promise<Java.GraphTraversal>;
                valueMap(arg0: boolean_t, ...arg1: string_t[]): Java.GraphTraversal;
                valueMap(arg0: boolean_t, arg1: array_t<string_t>): Java.GraphTraversal;
                valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                valueMap(...arg0: string_t[]): Java.GraphTraversal;
                valueMap(arg0: array_t<string_t>): Java.GraphTraversal;
                valueMapP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                valueMapP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                values(...arg0: string_t[]): Java.GraphTraversal;
                values(arg0: array_t<string_t>): Java.GraphTraversal;
                valuesP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                valuesP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                where(arg0: Java.Scope, arg1: string_t, arg2: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: string_t, arg2: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: Java.Scope, arg1: Java.Traversal): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                where(arg0: Java.Scope, arg1: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: string_t, arg1: Java.P): Java.GraphTraversal;
                whereP(arg0: string_t, arg1: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: Java.Traversal): Java.GraphTraversal;
                whereP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                where(arg0: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.P): Promise<Java.GraphTraversal>;
            }
            module EmptyGraphTraversal {
                interface Static {
                    instance(): Java.EmptyGraphTraversal;
                    instanceP(): Promise<Java.EmptyGraphTraversal>;
                    instance(): Java.EmptyTraversal;
                    instanceP(): Promise<Java.EmptyTraversal>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
            interface GraphTraversal extends Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal {
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addE(arg0: Java.Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addV(...arg0: object_t[]): Java.GraphTraversal;
                addV(arg0: object_array_t): Java.GraphTraversal;
                addVP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                addVP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                aggregate(arg0: string_t): Java.GraphTraversal;
                aggregateP(arg0: string_t): Promise<Java.GraphTraversal>;
                and(...arg0: Java.Traversal[]): Java.GraphTraversal;
                and(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                andP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                andP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                as(arg0: string_t, ...arg1: string_t[]): Java.GraphTraversal;
                as(arg0: string_t, arg1: array_t<string_t>): Java.GraphTraversal;
                asP(arg0: string_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                asP(arg0: string_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                asAdmin(): Java.GraphTraversal$Admin;
                asAdminP(): Promise<Java.GraphTraversal$Admin>;
                asAdmin(): Java.Traversal$Admin;
                asAdminP(): Promise<Java.Traversal$Admin>;
                barrier(): Java.GraphTraversal;
                barrierP(): Promise<Java.GraphTraversal>;
                both(...arg0: string_t[]): Java.GraphTraversal;
                both(arg0: array_t<string_t>): Java.GraphTraversal;
                bothP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                bothP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                bothE(...arg0: string_t[]): Java.GraphTraversal;
                bothE(arg0: array_t<string_t>): Java.GraphTraversal;
                bothEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                bothEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                bothV(): Java.GraphTraversal;
                bothVP(): Promise<Java.GraphTraversal>;
                branch(arg0: Java.Traversal): Java.GraphTraversal;
                branchP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                branch(arg0: Java.Function): Java.GraphTraversal;
                branchP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                by(arg0: Java.Traversal, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Traversal, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: Java.Function, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: string_t, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: string_t, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: Java.Traversal): Java.GraphTraversal;
                byP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                by(arg0: Java.Order): Java.GraphTraversal;
                byP(arg0: Java.Order): Promise<Java.GraphTraversal>;
                by(arg0: Java.T): Java.GraphTraversal;
                byP(arg0: Java.T): Promise<Java.GraphTraversal>;
                by(arg0: Java.Function): Java.GraphTraversal;
                byP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                by(arg0: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: string_t): Java.GraphTraversal;
                byP(arg0: string_t): Promise<Java.GraphTraversal>;
                by(): Java.GraphTraversal;
                byP(): Promise<Java.GraphTraversal>;
                cap(arg0: string_t, ...arg1: string_t[]): Java.GraphTraversal;
                cap(arg0: string_t, arg1: array_t<string_t>): Java.GraphTraversal;
                capP(arg0: string_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                capP(arg0: string_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Traversal, arg1: Java.Traversal, arg2: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Traversal, arg1: Java.Traversal, arg2: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Predicate, arg1: Java.Traversal, arg2: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Predicate, arg1: Java.Traversal, arg2: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Function): Java.GraphTraversal;
                chooseP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                coalesce(...arg0: Java.Traversal[]): Java.GraphTraversal;
                coalesce(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                coalesceP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                coalesceP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                coin(arg0: double_t): Java.GraphTraversal;
                coinP(arg0: double_t): Promise<Java.GraphTraversal>;
                count(arg0: Java.Scope): Java.GraphTraversal;
                countP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                count(): Java.GraphTraversal;
                countP(): Promise<Java.GraphTraversal>;
                cyclicPath(): Java.GraphTraversal;
                cyclicPathP(): Promise<Java.GraphTraversal>;
                dedup(arg0: Java.Scope): Java.GraphTraversal;
                dedupP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                dedup(): Java.GraphTraversal;
                dedupP(): Promise<Java.GraphTraversal>;
                drop(): Java.GraphTraversal;
                dropP(): Promise<Java.GraphTraversal>;
                emit(arg0: Java.Traversal): Java.GraphTraversal;
                emitP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                emit(arg0: Java.Predicate): Java.GraphTraversal;
                emitP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                emit(): Java.GraphTraversal;
                emitP(): Promise<Java.GraphTraversal>;
                fill(arg0: Java.Collection): Java.Collection;
                fillP(arg0: Java.Collection): Promise<Java.Collection>;
                filter(arg0: Java.Predicate): Java.GraphTraversal;
                filterP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                flatMap(arg0: Java.Function): Java.GraphTraversal;
                flatMapP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                fold(arg0: object_t, arg1: Java.BiFunction): Java.GraphTraversal;
                foldP(arg0: object_t, arg1: Java.BiFunction): Promise<Java.GraphTraversal>;
                fold(): Java.GraphTraversal;
                foldP(): Promise<Java.GraphTraversal>;
                forEachRemaining(arg0: Java.Class, arg1: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Class, arg1: Java.Consumer): Promise<void>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                group(arg0: string_t): Java.GraphTraversal;
                groupP(arg0: string_t): Promise<Java.GraphTraversal>;
                group(): Java.GraphTraversal;
                groupP(): Promise<Java.GraphTraversal>;
                groupCount(arg0: string_t): Java.GraphTraversal;
                groupCountP(arg0: string_t): Promise<Java.GraphTraversal>;
                groupCount(): Java.GraphTraversal;
                groupCountP(): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: string_t, arg2: Java.P): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: string_t, arg2: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: string_t, arg2: object_t): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<Java.GraphTraversal>;
                has(arg0: Java.T, arg1: Java.P): Java.GraphTraversal;
                hasP(arg0: Java.T, arg1: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: Java.Traversal): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: Java.P): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: Java.T, arg1: object_t): Java.GraphTraversal;
                hasP(arg0: Java.T, arg1: object_t): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: object_t): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: object_t): Promise<Java.GraphTraversal>;
                has(arg0: string_t): Java.GraphTraversal;
                hasP(arg0: string_t): Promise<Java.GraphTraversal>;
                hasId(...arg0: object_t[]): Java.GraphTraversal;
                hasId(arg0: object_array_t): Java.GraphTraversal;
                hasIdP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                hasIdP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                hasKey(...arg0: string_t[]): Java.GraphTraversal;
                hasKey(arg0: array_t<string_t>): Java.GraphTraversal;
                hasKeyP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                hasKeyP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                hasLabel(...arg0: string_t[]): Java.GraphTraversal;
                hasLabel(arg0: array_t<string_t>): Java.GraphTraversal;
                hasLabelP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                hasLabelP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                hasNot(arg0: string_t): Java.GraphTraversal;
                hasNotP(arg0: string_t): Promise<Java.GraphTraversal>;
                hasValue(...arg0: object_t[]): Java.GraphTraversal;
                hasValue(arg0: object_array_t): Java.GraphTraversal;
                hasValueP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                hasValueP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                id(): Java.GraphTraversal;
                idP(): Promise<Java.GraphTraversal>;
                identity(): Java.GraphTraversal;
                identityP(): Promise<Java.GraphTraversal>;
                in(...arg0: string_t[]): Java.GraphTraversal;
                in(arg0: array_t<string_t>): Java.GraphTraversal;
                inP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                inP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                inE(...arg0: string_t[]): Java.GraphTraversal;
                inE(arg0: array_t<string_t>): Java.GraphTraversal;
                inEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                inEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                inject(...arg0: object_t[]): Java.GraphTraversal;
                inject(arg0: object_array_t): Java.GraphTraversal;
                injectP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                injectP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                inV(): Java.GraphTraversal;
                inVP(): Promise<Java.GraphTraversal>;
                is(arg0: Java.P): Java.GraphTraversal;
                isP(arg0: Java.P): Promise<Java.GraphTraversal>;
                is(arg0: object_t): Java.GraphTraversal;
                isP(arg0: object_t): Promise<Java.GraphTraversal>;
                iterate(): Java.GraphTraversal;
                iterateP(): Promise<Java.GraphTraversal>;
                iterate(): Java.Traversal;
                iterateP(): Promise<Java.Traversal>;
                key(): Java.GraphTraversal;
                keyP(): Promise<Java.GraphTraversal>;
                label(): Java.GraphTraversal;
                labelP(): Promise<Java.GraphTraversal>;
                limit(arg0: Java.Scope, arg1: long_t): Java.GraphTraversal;
                limitP(arg0: Java.Scope, arg1: long_t): Promise<Java.GraphTraversal>;
                limit(arg0: long_t): Java.GraphTraversal;
                limitP(arg0: long_t): Promise<Java.GraphTraversal>;
                local(arg0: Java.Traversal): Java.GraphTraversal;
                localP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                map(arg0: Java.Function): Java.GraphTraversal;
                mapP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                match(arg0: string_t, ...arg1: Java.Traversal[]): Java.GraphTraversal;
                match(arg0: string_t, arg1: array_t<Java.Traversal>): Java.GraphTraversal;
                matchP(arg0: string_t, ...arg1: Java.Traversal[]): Promise<Java.GraphTraversal>;
                matchP(arg0: string_t, arg1: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                max(arg0: Java.Scope): Java.GraphTraversal;
                maxP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                max(): Java.GraphTraversal;
                maxP(): Promise<Java.GraphTraversal>;
                mean(arg0: Java.Scope): Java.GraphTraversal;
                meanP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                mean(): Java.GraphTraversal;
                meanP(): Promise<Java.GraphTraversal>;
                min(arg0: Java.Scope): Java.GraphTraversal;
                minP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                min(): Java.GraphTraversal;
                minP(): Promise<Java.GraphTraversal>;
                next(arg0: integer_t): Java.List;
                nextP(arg0: integer_t): Promise<Java.List>;
                next(): object_t;
                nextP(): Promise<object_t>;
                option(arg0: object_t, arg1: Java.Traversal): Java.GraphTraversal;
                optionP(arg0: object_t, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                option(arg0: Java.Traversal): Java.GraphTraversal;
                optionP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                or(...arg0: Java.Traversal[]): Java.GraphTraversal;
                or(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                orP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                orP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                order(arg0: Java.Scope): Java.GraphTraversal;
                orderP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                order(): Java.GraphTraversal;
                orderP(): Promise<Java.GraphTraversal>;
                otherV(): Java.GraphTraversal;
                otherVP(): Promise<Java.GraphTraversal>;
                out(...arg0: string_t[]): Java.GraphTraversal;
                out(arg0: array_t<string_t>): Java.GraphTraversal;
                outP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                outP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                outE(...arg0: string_t[]): Java.GraphTraversal;
                outE(arg0: array_t<string_t>): Java.GraphTraversal;
                outEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                outEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                outV(): Java.GraphTraversal;
                outVP(): Promise<Java.GraphTraversal>;
                path(): Java.GraphTraversal;
                pathP(): Promise<Java.GraphTraversal>;
                profile(): Java.GraphTraversal;
                profileP(): Promise<Java.GraphTraversal>;
                properties(...arg0: string_t[]): Java.GraphTraversal;
                properties(arg0: array_t<string_t>): Java.GraphTraversal;
                propertiesP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Java.GraphTraversal;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Java.GraphTraversal;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<Java.GraphTraversal>;
                property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Java.GraphTraversal;
                property(arg0: string_t, arg1: object_t, arg2: object_array_t): Java.GraphTraversal;
                propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                propertyMap(...arg0: string_t[]): Java.GraphTraversal;
                propertyMap(arg0: array_t<string_t>): Java.GraphTraversal;
                propertyMapP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                propertyMapP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                range(arg0: Java.Scope, arg1: long_t, arg2: long_t): Java.GraphTraversal;
                rangeP(arg0: Java.Scope, arg1: long_t, arg2: long_t): Promise<Java.GraphTraversal>;
                range(arg0: long_t, arg1: long_t): Java.GraphTraversal;
                rangeP(arg0: long_t, arg1: long_t): Promise<Java.GraphTraversal>;
                remove(): void;
                removeP(): Promise<void>;
                repeat(arg0: Java.Traversal): Java.GraphTraversal;
                repeatP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                sack(arg0: Java.BinaryOperator, arg1: string_t): Java.GraphTraversal;
                sackP(arg0: Java.BinaryOperator, arg1: string_t): Promise<Java.GraphTraversal>;
                sack(arg0: Java.BiFunction): Java.GraphTraversal;
                sackP(arg0: Java.BiFunction): Promise<Java.GraphTraversal>;
                sack(): Java.GraphTraversal;
                sackP(): Promise<Java.GraphTraversal>;
                sample(arg0: Java.Scope, arg1: integer_t): Java.GraphTraversal;
                sampleP(arg0: Java.Scope, arg1: integer_t): Promise<Java.GraphTraversal>;
                sample(arg0: integer_t): Java.GraphTraversal;
                sampleP(arg0: integer_t): Promise<Java.GraphTraversal>;
                select(arg0: Java.Scope, ...arg1: string_t[]): Java.GraphTraversal;
                select(arg0: Java.Scope, arg1: array_t<string_t>): Java.GraphTraversal;
                selectP(arg0: Java.Scope, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                selectP(arg0: Java.Scope, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                select(arg0: Java.Scope, arg1: string_t): Java.GraphTraversal;
                selectP(arg0: Java.Scope, arg1: string_t): Promise<Java.GraphTraversal>;
                select(...arg0: string_t[]): Java.GraphTraversal;
                select(arg0: array_t<string_t>): Java.GraphTraversal;
                selectP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                selectP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                select(arg0: string_t): Java.GraphTraversal;
                selectP(arg0: string_t): Promise<Java.GraphTraversal>;
                sideEffect(arg0: Java.Consumer): Java.GraphTraversal;
                sideEffectP(arg0: Java.Consumer): Promise<Java.GraphTraversal>;
                simplePath(): Java.GraphTraversal;
                simplePathP(): Promise<Java.GraphTraversal>;
                store(arg0: string_t): Java.GraphTraversal;
                storeP(arg0: string_t): Promise<Java.GraphTraversal>;
                subgraph(arg0: string_t): Java.GraphTraversal;
                subgraphP(arg0: string_t): Promise<Java.GraphTraversal>;
                sum(arg0: Java.Scope): Java.GraphTraversal;
                sumP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                sum(): Java.GraphTraversal;
                sumP(): Promise<Java.GraphTraversal>;
                tail(arg0: Java.Scope, arg1: long_t): Java.GraphTraversal;
                tailP(arg0: Java.Scope, arg1: long_t): Promise<Java.GraphTraversal>;
                tail(arg0: Java.Scope): Java.GraphTraversal;
                tailP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                tail(arg0: long_t): Java.GraphTraversal;
                tailP(arg0: long_t): Promise<Java.GraphTraversal>;
                tail(): Java.GraphTraversal;
                tailP(): Promise<Java.GraphTraversal>;
                timeLimit(arg0: long_t): Java.GraphTraversal;
                timeLimitP(arg0: long_t): Promise<Java.GraphTraversal>;
                times(arg0: integer_t): Java.GraphTraversal;
                timesP(arg0: integer_t): Promise<Java.GraphTraversal>;
                to(arg0: Java.Direction, ...arg1: string_t[]): Java.GraphTraversal;
                to(arg0: Java.Direction, arg1: array_t<string_t>): Java.GraphTraversal;
                toP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                toP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                toBulkSet(): Java.BulkSet;
                toBulkSetP(): Promise<Java.BulkSet>;
                toE(arg0: Java.Direction, ...arg1: string_t[]): Java.GraphTraversal;
                toE(arg0: Java.Direction, arg1: array_t<string_t>): Java.GraphTraversal;
                toEP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                toEP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                toList(): Java.List;
                toListP(): Promise<Java.List>;
                toSet(): Java.Set;
                toSetP(): Promise<Java.Set>;
                toV(arg0: Java.Direction): Java.GraphTraversal;
                toVP(arg0: Java.Direction): Promise<Java.GraphTraversal>;
                tree(arg0: string_t): Java.GraphTraversal;
                treeP(arg0: string_t): Promise<Java.GraphTraversal>;
                tree(): Java.GraphTraversal;
                treeP(): Promise<Java.GraphTraversal>;
                tryNext(): object_t;
                tryNextP(): Promise<object_t>;
                unfold(): Java.GraphTraversal;
                unfoldP(): Promise<Java.GraphTraversal>;
                union(...arg0: Java.Traversal[]): Java.GraphTraversal;
                union(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                unionP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                unionP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                until(arg0: Java.Traversal): Java.GraphTraversal;
                untilP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                until(arg0: Java.Predicate): Java.GraphTraversal;
                untilP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                value(): Java.GraphTraversal;
                valueP(): Promise<Java.GraphTraversal>;
                valueMap(arg0: boolean_t, ...arg1: string_t[]): Java.GraphTraversal;
                valueMap(arg0: boolean_t, arg1: array_t<string_t>): Java.GraphTraversal;
                valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                valueMap(...arg0: string_t[]): Java.GraphTraversal;
                valueMap(arg0: array_t<string_t>): Java.GraphTraversal;
                valueMapP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                valueMapP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                values(...arg0: string_t[]): Java.GraphTraversal;
                values(arg0: array_t<string_t>): Java.GraphTraversal;
                valuesP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                valuesP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                where(arg0: Java.Scope, arg1: string_t, arg2: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: string_t, arg2: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: Java.Scope, arg1: Java.Traversal): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                where(arg0: Java.Scope, arg1: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: string_t, arg1: Java.P): Java.GraphTraversal;
                whereP(arg0: string_t, arg1: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: Java.Traversal): Java.GraphTraversal;
                whereP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                where(arg0: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.P): Promise<Java.GraphTraversal>;
            }
            module GraphTraversal {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
            interface GraphTraversal$Admin extends Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin, Java.org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal {
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Vertex, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: Java.Iterator, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addE(arg0: Java.Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Java.GraphTraversal;
                addE(arg0: Java.Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Java.GraphTraversal;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                addEP(arg0: Java.Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Java.GraphTraversal;
                addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): Java.GraphTraversal;
                addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: Java.Iterator, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: Java.Iterator, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Java.GraphTraversal;
                addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): Java.GraphTraversal;
                addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                addStep(arg0: integer_t, arg1: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: integer_t, arg1: Java.Step): Promise<Java.Traversal$Admin>;
                addStep(arg0: Java.Step): Java.GraphTraversal$Admin;
                addStepP(arg0: Java.Step): Promise<Java.GraphTraversal$Admin>;
                addStep(arg0: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                addV(...arg0: object_t[]): Java.GraphTraversal;
                addV(arg0: object_array_t): Java.GraphTraversal;
                addVP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                addVP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                aggregate(arg0: string_t): Java.GraphTraversal;
                aggregateP(arg0: string_t): Promise<Java.GraphTraversal>;
                and(...arg0: Java.Traversal[]): Java.GraphTraversal;
                and(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                andP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                andP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                applyStrategies(): void;
                applyStrategiesP(): Promise<void>;
                as(arg0: string_t, ...arg1: string_t[]): Java.GraphTraversal;
                as(arg0: string_t, arg1: array_t<string_t>): Java.GraphTraversal;
                asP(arg0: string_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                asP(arg0: string_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                asAdmin(): Java.GraphTraversal$Admin;
                asAdminP(): Promise<Java.GraphTraversal$Admin>;
                asAdmin(): Java.Traversal$Admin;
                asAdminP(): Promise<Java.Traversal$Admin>;
                barrier(): Java.GraphTraversal;
                barrierP(): Promise<Java.GraphTraversal>;
                both(...arg0: string_t[]): Java.GraphTraversal;
                both(arg0: array_t<string_t>): Java.GraphTraversal;
                bothP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                bothP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                bothE(...arg0: string_t[]): Java.GraphTraversal;
                bothE(arg0: array_t<string_t>): Java.GraphTraversal;
                bothEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                bothEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                bothV(): Java.GraphTraversal;
                bothVP(): Promise<Java.GraphTraversal>;
                branch(arg0: Java.Traversal): Java.GraphTraversal;
                branchP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                branch(arg0: Java.Function): Java.GraphTraversal;
                branchP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                by(arg0: Java.Traversal, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Traversal, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: Java.Function, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: string_t, arg1: Java.Comparator): Java.GraphTraversal;
                byP(arg0: string_t, arg1: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: Java.Traversal): Java.GraphTraversal;
                byP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                by(arg0: Java.Order): Java.GraphTraversal;
                byP(arg0: Java.Order): Promise<Java.GraphTraversal>;
                by(arg0: Java.T): Java.GraphTraversal;
                byP(arg0: Java.T): Promise<Java.GraphTraversal>;
                by(arg0: Java.Function): Java.GraphTraversal;
                byP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                by(arg0: Java.Comparator): Java.GraphTraversal;
                byP(arg0: Java.Comparator): Promise<Java.GraphTraversal>;
                by(arg0: string_t): Java.GraphTraversal;
                byP(arg0: string_t): Promise<Java.GraphTraversal>;
                by(): Java.GraphTraversal;
                byP(): Promise<Java.GraphTraversal>;
                cap(arg0: string_t, ...arg1: string_t[]): Java.GraphTraversal;
                cap(arg0: string_t, arg1: array_t<string_t>): Java.GraphTraversal;
                capP(arg0: string_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                capP(arg0: string_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Traversal, arg1: Java.Traversal, arg2: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Traversal, arg1: Java.Traversal, arg2: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Predicate, arg1: Java.Traversal, arg2: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Predicate, arg1: Java.Traversal, arg2: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Traversal): Java.GraphTraversal;
                chooseP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                choose(arg0: Java.Function): Java.GraphTraversal;
                chooseP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                clone(): Java.GraphTraversal$Admin;
                cloneP(): Promise<Java.GraphTraversal$Admin>;
                clone(): Java.Traversal$Admin;
                cloneP(): Promise<Java.Traversal$Admin>;
                coalesce(...arg0: Java.Traversal[]): Java.GraphTraversal;
                coalesce(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                coalesceP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                coalesceP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                coin(arg0: double_t): Java.GraphTraversal;
                coinP(arg0: double_t): Promise<Java.GraphTraversal>;
                count(arg0: Java.Scope): Java.GraphTraversal;
                countP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                count(): Java.GraphTraversal;
                countP(): Promise<Java.GraphTraversal>;
                cyclicPath(): Java.GraphTraversal;
                cyclicPathP(): Promise<Java.GraphTraversal>;
                dedup(arg0: Java.Scope): Java.GraphTraversal;
                dedupP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                dedup(): Java.GraphTraversal;
                dedupP(): Promise<Java.GraphTraversal>;
                drop(): Java.GraphTraversal;
                dropP(): Promise<Java.GraphTraversal>;
                emit(arg0: Java.Traversal): Java.GraphTraversal;
                emitP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                emit(arg0: Java.Predicate): Java.GraphTraversal;
                emitP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                emit(): Java.GraphTraversal;
                emitP(): Promise<Java.GraphTraversal>;
                equals(arg0: Java.Traversal$Admin): boolean;
                equalsP(arg0: Java.Traversal$Admin): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                fill(arg0: Java.Collection): Java.Collection;
                fillP(arg0: Java.Collection): Promise<Java.Collection>;
                filter(arg0: Java.Predicate): Java.GraphTraversal;
                filterP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                flatMap(arg0: Java.Function): Java.GraphTraversal;
                flatMapP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                fold(arg0: object_t, arg1: Java.BiFunction): Java.GraphTraversal;
                foldP(arg0: object_t, arg1: Java.BiFunction): Promise<Java.GraphTraversal>;
                fold(): Java.GraphTraversal;
                foldP(): Promise<Java.GraphTraversal>;
                forEachRemaining(arg0: Java.Class, arg1: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Class, arg1: Java.Consumer): Promise<void>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getEndStep(): Java.Step;
                getEndStepP(): Promise<Java.Step>;
                getEngine(): Java.TraversalEngine;
                getEngineP(): Promise<Java.TraversalEngine>;
                getGraph(): object_t;
                getGraphP(): Promise<object_t>;
                getParent(): object_t;
                getParentP(): Promise<object_t>;
                getSideEffects(): Java.TraversalSideEffects;
                getSideEffectsP(): Promise<Java.TraversalSideEffects>;
                getStartStep(): Java.Step;
                getStartStepP(): Promise<Java.Step>;
                getSteps(): Java.List;
                getStepsP(): Promise<Java.List>;
                getStrategies(): Java.TraversalStrategies;
                getStrategiesP(): Promise<Java.TraversalStrategies>;
                getTraverserGenerator(): Java.TraverserGenerator;
                getTraverserGeneratorP(): Promise<Java.TraverserGenerator>;
                getTraverserRequirements(): Java.Set;
                getTraverserRequirementsP(): Promise<Java.Set>;
                group(arg0: string_t): Java.GraphTraversal;
                groupP(arg0: string_t): Promise<Java.GraphTraversal>;
                group(): Java.GraphTraversal;
                groupP(): Promise<Java.GraphTraversal>;
                groupCount(arg0: string_t): Java.GraphTraversal;
                groupCountP(arg0: string_t): Promise<Java.GraphTraversal>;
                groupCount(): Java.GraphTraversal;
                groupCountP(): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: string_t, arg2: Java.P): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: string_t, arg2: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: string_t, arg2: object_t): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<Java.GraphTraversal>;
                has(arg0: Java.T, arg1: Java.P): Java.GraphTraversal;
                hasP(arg0: Java.T, arg1: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: Java.Traversal): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: Java.P): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: Java.P): Promise<Java.GraphTraversal>;
                has(arg0: Java.T, arg1: object_t): Java.GraphTraversal;
                hasP(arg0: Java.T, arg1: object_t): Promise<Java.GraphTraversal>;
                has(arg0: string_t, arg1: object_t): Java.GraphTraversal;
                hasP(arg0: string_t, arg1: object_t): Promise<Java.GraphTraversal>;
                has(arg0: string_t): Java.GraphTraversal;
                hasP(arg0: string_t): Promise<Java.GraphTraversal>;
                hasId(...arg0: object_t[]): Java.GraphTraversal;
                hasId(arg0: object_array_t): Java.GraphTraversal;
                hasIdP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                hasIdP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                hasKey(...arg0: string_t[]): Java.GraphTraversal;
                hasKey(arg0: array_t<string_t>): Java.GraphTraversal;
                hasKeyP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                hasKeyP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                hasLabel(...arg0: string_t[]): Java.GraphTraversal;
                hasLabel(arg0: array_t<string_t>): Java.GraphTraversal;
                hasLabelP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                hasLabelP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                hasNot(arg0: string_t): Java.GraphTraversal;
                hasNotP(arg0: string_t): Promise<Java.GraphTraversal>;
                hasValue(...arg0: object_t[]): Java.GraphTraversal;
                hasValue(arg0: object_array_t): Java.GraphTraversal;
                hasValueP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                hasValueP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                id(): Java.GraphTraversal;
                idP(): Promise<Java.GraphTraversal>;
                identity(): Java.GraphTraversal;
                identityP(): Promise<Java.GraphTraversal>;
                in(...arg0: string_t[]): Java.GraphTraversal;
                in(arg0: array_t<string_t>): Java.GraphTraversal;
                inP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                inP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                inE(...arg0: string_t[]): Java.GraphTraversal;
                inE(arg0: array_t<string_t>): Java.GraphTraversal;
                inEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                inEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                inject(...arg0: object_t[]): Java.GraphTraversal;
                inject(arg0: object_array_t): Java.GraphTraversal;
                injectP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                injectP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                inV(): Java.GraphTraversal;
                inVP(): Promise<Java.GraphTraversal>;
                is(arg0: Java.P): Java.GraphTraversal;
                isP(arg0: Java.P): Promise<Java.GraphTraversal>;
                is(arg0: object_t): Java.GraphTraversal;
                isP(arg0: object_t): Promise<Java.GraphTraversal>;
                isLocked(): boolean;
                isLockedP(): Promise<boolean>;
                iterate(): Java.GraphTraversal;
                iterateP(): Promise<Java.GraphTraversal>;
                iterate(): Java.Traversal;
                iterateP(): Promise<Java.Traversal>;
                key(): Java.GraphTraversal;
                keyP(): Promise<Java.GraphTraversal>;
                label(): Java.GraphTraversal;
                labelP(): Promise<Java.GraphTraversal>;
                limit(arg0: Java.Scope, arg1: long_t): Java.GraphTraversal;
                limitP(arg0: Java.Scope, arg1: long_t): Promise<Java.GraphTraversal>;
                limit(arg0: long_t): Java.GraphTraversal;
                limitP(arg0: long_t): Promise<Java.GraphTraversal>;
                local(arg0: Java.Traversal): Java.GraphTraversal;
                localP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                map(arg0: Java.Function): Java.GraphTraversal;
                mapP(arg0: Java.Function): Promise<Java.GraphTraversal>;
                match(arg0: string_t, ...arg1: Java.Traversal[]): Java.GraphTraversal;
                match(arg0: string_t, arg1: array_t<Java.Traversal>): Java.GraphTraversal;
                matchP(arg0: string_t, ...arg1: Java.Traversal[]): Promise<Java.GraphTraversal>;
                matchP(arg0: string_t, arg1: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                max(arg0: Java.Scope): Java.GraphTraversal;
                maxP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                max(): Java.GraphTraversal;
                maxP(): Promise<Java.GraphTraversal>;
                mean(arg0: Java.Scope): Java.GraphTraversal;
                meanP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                mean(): Java.GraphTraversal;
                meanP(): Promise<Java.GraphTraversal>;
                min(arg0: Java.Scope): Java.GraphTraversal;
                minP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                min(): Java.GraphTraversal;
                minP(): Promise<Java.GraphTraversal>;
                next(arg0: integer_t): Java.List;
                nextP(arg0: integer_t): Promise<Java.List>;
                next(): object_t;
                nextP(): Promise<object_t>;
                option(arg0: object_t, arg1: Java.Traversal): Java.GraphTraversal;
                optionP(arg0: object_t, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                option(arg0: Java.Traversal): Java.GraphTraversal;
                optionP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                or(...arg0: Java.Traversal[]): Java.GraphTraversal;
                or(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                orP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                orP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                order(arg0: Java.Scope): Java.GraphTraversal;
                orderP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                order(): Java.GraphTraversal;
                orderP(): Promise<Java.GraphTraversal>;
                otherV(): Java.GraphTraversal;
                otherVP(): Promise<Java.GraphTraversal>;
                out(...arg0: string_t[]): Java.GraphTraversal;
                out(arg0: array_t<string_t>): Java.GraphTraversal;
                outP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                outP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                outE(...arg0: string_t[]): Java.GraphTraversal;
                outE(arg0: array_t<string_t>): Java.GraphTraversal;
                outEP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                outEP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                outV(): Java.GraphTraversal;
                outVP(): Promise<Java.GraphTraversal>;
                path(): Java.GraphTraversal;
                pathP(): Promise<Java.GraphTraversal>;
                profile(): Java.GraphTraversal;
                profileP(): Promise<Java.GraphTraversal>;
                properties(...arg0: string_t[]): Java.GraphTraversal;
                properties(arg0: array_t<string_t>): Java.GraphTraversal;
                propertiesP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Java.GraphTraversal;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Java.GraphTraversal;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<Java.GraphTraversal>;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<Java.GraphTraversal>;
                property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Java.GraphTraversal;
                property(arg0: string_t, arg1: object_t, arg2: object_array_t): Java.GraphTraversal;
                propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<Java.GraphTraversal>;
                propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<Java.GraphTraversal>;
                propertyMap(...arg0: string_t[]): Java.GraphTraversal;
                propertyMap(arg0: array_t<string_t>): Java.GraphTraversal;
                propertyMapP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                propertyMapP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                range(arg0: Java.Scope, arg1: long_t, arg2: long_t): Java.GraphTraversal;
                rangeP(arg0: Java.Scope, arg1: long_t, arg2: long_t): Promise<Java.GraphTraversal>;
                range(arg0: long_t, arg1: long_t): Java.GraphTraversal;
                rangeP(arg0: long_t, arg1: long_t): Promise<Java.GraphTraversal>;
                remove(): void;
                removeP(): Promise<void>;
                removeStep(arg0: Java.Step): Java.Traversal$Admin;
                removeStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                removeStep(arg0: integer_t): Java.Traversal$Admin;
                removeStepP(arg0: integer_t): Promise<Java.Traversal$Admin>;
                repeat(arg0: Java.Traversal): Java.GraphTraversal;
                repeatP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                reset(): void;
                resetP(): Promise<void>;
                sack(arg0: Java.BinaryOperator, arg1: string_t): Java.GraphTraversal;
                sackP(arg0: Java.BinaryOperator, arg1: string_t): Promise<Java.GraphTraversal>;
                sack(arg0: Java.BiFunction): Java.GraphTraversal;
                sackP(arg0: Java.BiFunction): Promise<Java.GraphTraversal>;
                sack(): Java.GraphTraversal;
                sackP(): Promise<Java.GraphTraversal>;
                sample(arg0: Java.Scope, arg1: integer_t): Java.GraphTraversal;
                sampleP(arg0: Java.Scope, arg1: integer_t): Promise<Java.GraphTraversal>;
                sample(arg0: integer_t): Java.GraphTraversal;
                sampleP(arg0: integer_t): Promise<Java.GraphTraversal>;
                select(arg0: Java.Scope, ...arg1: string_t[]): Java.GraphTraversal;
                select(arg0: Java.Scope, arg1: array_t<string_t>): Java.GraphTraversal;
                selectP(arg0: Java.Scope, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                selectP(arg0: Java.Scope, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                select(arg0: Java.Scope, arg1: string_t): Java.GraphTraversal;
                selectP(arg0: Java.Scope, arg1: string_t): Promise<Java.GraphTraversal>;
                select(...arg0: string_t[]): Java.GraphTraversal;
                select(arg0: array_t<string_t>): Java.GraphTraversal;
                selectP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                selectP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                select(arg0: string_t): Java.GraphTraversal;
                selectP(arg0: string_t): Promise<Java.GraphTraversal>;
                setEngine(arg0: Java.TraversalEngine): void;
                setEngineP(arg0: Java.TraversalEngine): Promise<void>;
                setGraph(arg0: Java.Graph): void;
                setGraphP(arg0: Java.Graph): Promise<void>;
                setParent(arg0: object_t): void;
                setParentP(arg0: object_t): Promise<void>;
                setSideEffects(arg0: Java.TraversalSideEffects): void;
                setSideEffectsP(arg0: Java.TraversalSideEffects): Promise<void>;
                setStrategies(arg0: Java.TraversalStrategies): void;
                setStrategiesP(arg0: Java.TraversalStrategies): Promise<void>;
                sideEffect(arg0: Java.Consumer): Java.GraphTraversal;
                sideEffectP(arg0: Java.Consumer): Promise<Java.GraphTraversal>;
                simplePath(): Java.GraphTraversal;
                simplePathP(): Promise<Java.GraphTraversal>;
                store(arg0: string_t): Java.GraphTraversal;
                storeP(arg0: string_t): Promise<Java.GraphTraversal>;
                subgraph(arg0: string_t): Java.GraphTraversal;
                subgraphP(arg0: string_t): Promise<Java.GraphTraversal>;
                sum(arg0: Java.Scope): Java.GraphTraversal;
                sumP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                sum(): Java.GraphTraversal;
                sumP(): Promise<Java.GraphTraversal>;
                tail(arg0: Java.Scope, arg1: long_t): Java.GraphTraversal;
                tailP(arg0: Java.Scope, arg1: long_t): Promise<Java.GraphTraversal>;
                tail(arg0: Java.Scope): Java.GraphTraversal;
                tailP(arg0: Java.Scope): Promise<Java.GraphTraversal>;
                tail(arg0: long_t): Java.GraphTraversal;
                tailP(arg0: long_t): Promise<Java.GraphTraversal>;
                tail(): Java.GraphTraversal;
                tailP(): Promise<Java.GraphTraversal>;
                timeLimit(arg0: long_t): Java.GraphTraversal;
                timeLimitP(arg0: long_t): Promise<Java.GraphTraversal>;
                times(arg0: integer_t): Java.GraphTraversal;
                timesP(arg0: integer_t): Promise<Java.GraphTraversal>;
                to(arg0: Java.Direction, ...arg1: string_t[]): Java.GraphTraversal;
                to(arg0: Java.Direction, arg1: array_t<string_t>): Java.GraphTraversal;
                toP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                toP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                toBulkSet(): Java.BulkSet;
                toBulkSetP(): Promise<Java.BulkSet>;
                toE(arg0: Java.Direction, ...arg1: string_t[]): Java.GraphTraversal;
                toE(arg0: Java.Direction, arg1: array_t<string_t>): Java.GraphTraversal;
                toEP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                toEP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                toList(): Java.List;
                toListP(): Promise<Java.List>;
                toSet(): Java.Set;
                toSetP(): Promise<Java.Set>;
                toV(arg0: Java.Direction): Java.GraphTraversal;
                toVP(arg0: Java.Direction): Promise<Java.GraphTraversal>;
                tree(arg0: string_t): Java.GraphTraversal;
                treeP(arg0: string_t): Promise<Java.GraphTraversal>;
                tree(): Java.GraphTraversal;
                treeP(): Promise<Java.GraphTraversal>;
                tryNext(): object_t;
                tryNextP(): Promise<object_t>;
                unfold(): Java.GraphTraversal;
                unfoldP(): Promise<Java.GraphTraversal>;
                union(...arg0: Java.Traversal[]): Java.GraphTraversal;
                union(arg0: array_t<Java.Traversal>): Java.GraphTraversal;
                unionP(...arg0: Java.Traversal[]): Promise<Java.GraphTraversal>;
                unionP(arg0: array_t<Java.Traversal>): Promise<Java.GraphTraversal>;
                until(arg0: Java.Traversal): Java.GraphTraversal;
                untilP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                until(arg0: Java.Predicate): Java.GraphTraversal;
                untilP(arg0: Java.Predicate): Promise<Java.GraphTraversal>;
                value(): Java.GraphTraversal;
                valueP(): Promise<Java.GraphTraversal>;
                valueMap(arg0: boolean_t, ...arg1: string_t[]): Java.GraphTraversal;
                valueMap(arg0: boolean_t, arg1: array_t<string_t>): Java.GraphTraversal;
                valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<Java.GraphTraversal>;
                valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<Java.GraphTraversal>;
                valueMap(...arg0: string_t[]): Java.GraphTraversal;
                valueMap(arg0: array_t<string_t>): Java.GraphTraversal;
                valueMapP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                valueMapP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                values(...arg0: string_t[]): Java.GraphTraversal;
                values(arg0: array_t<string_t>): Java.GraphTraversal;
                valuesP(...arg0: string_t[]): Promise<Java.GraphTraversal>;
                valuesP(arg0: array_t<string_t>): Promise<Java.GraphTraversal>;
                where(arg0: Java.Scope, arg1: string_t, arg2: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: string_t, arg2: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: Java.Scope, arg1: Java.Traversal): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: Java.Traversal): Promise<Java.GraphTraversal>;
                where(arg0: Java.Scope, arg1: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.Scope, arg1: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: string_t, arg1: Java.P): Java.GraphTraversal;
                whereP(arg0: string_t, arg1: Java.P): Promise<Java.GraphTraversal>;
                where(arg0: Java.Traversal): Java.GraphTraversal;
                whereP(arg0: Java.Traversal): Promise<Java.GraphTraversal>;
                where(arg0: Java.P): Java.GraphTraversal;
                whereP(arg0: Java.P): Promise<Java.GraphTraversal>;
            }
            module GraphTraversal$Admin {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
            interface GraphTraversalSource extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource {
                addV(...arg0: object_t[]): Java.GraphTraversal;
                addV(arg0: object_array_t): Java.GraphTraversal;
                addVP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                addVP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                asBuilder(): Java.GraphTraversalSource$Builder;
                asBuilderP(): Promise<Java.GraphTraversalSource$Builder>;
                asBuilder(): Java.TraversalSource$Builder;
                asBuilderP(): Promise<Java.TraversalSource$Builder>;
                E(...arg0: object_t[]): Java.GraphTraversal;
                E(arg0: object_array_t): Java.GraphTraversal;
                EP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                EP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getGraph(): object_t;
                getGraphP(): Promise<object_t>;
                getGraphComputer(): object_t;
                getGraphComputerP(): Promise<object_t>;
                getStrategies(): Java.List;
                getStrategiesP(): Promise<Java.List>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                tx(): Java.Transaction;
                txP(): Promise<Java.Transaction>;
                V(...arg0: object_t[]): Java.GraphTraversal;
                V(arg0: object_array_t): Java.GraphTraversal;
                VP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                VP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                withPath(): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withPathP(): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
                withSack(arg0: Java.Supplier, arg1: Java.UnaryOperator): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withSackP(arg0: Java.Supplier, arg1: Java.UnaryOperator): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
                withSack(arg0: object_t, arg1: Java.UnaryOperator): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withSackP(arg0: object_t, arg1: Java.UnaryOperator): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
                withSack(arg0: Java.Supplier): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withSackP(arg0: Java.Supplier): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
                withSack(arg0: object_t): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withSackP(arg0: object_t): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
                withSideEffect(arg0: string_t, arg1: Java.Supplier): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withSideEffectP(arg0: string_t, arg1: Java.Supplier): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
            }
            module GraphTraversalSource {
                interface Static {
                    build(): Java.GraphTraversalSource$Builder;
                    buildP(): Promise<Java.GraphTraversalSource$Builder>;
                    computer(arg0: Java.Class): Java.GraphTraversalSource$Builder;
                    computerP(arg0: Java.Class): Promise<Java.GraphTraversalSource$Builder>;
                    computer(): Java.GraphTraversalSource$Builder;
                    computerP(): Promise<Java.GraphTraversalSource$Builder>;
                    standard(): Java.GraphTraversalSource$Builder;
                    standardP(): Promise<Java.GraphTraversalSource$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
            interface GraphTraversalSource$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSource$Builder {
                create(arg0: Java.Graph): Java.GraphTraversalSource;
                createP(arg0: Java.Graph): Promise<Java.GraphTraversalSource>;
                create(arg0: Java.Graph): Java.TraversalSource;
                createP(arg0: Java.Graph): Promise<Java.TraversalSource>;
                engine(arg0: Java.TraversalEngine$Builder): Java.GraphTraversalSource$Builder;
                engineP(arg0: Java.TraversalEngine$Builder): Promise<Java.GraphTraversalSource$Builder>;
                engine(arg0: Java.TraversalEngine$Builder): Java.TraversalSource$Builder;
                engineP(arg0: Java.TraversalEngine$Builder): Promise<Java.TraversalSource$Builder>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                with(arg0: Java.TraversalStrategy): Java.GraphTraversalSource$Builder;
                withP(arg0: Java.TraversalStrategy): Promise<Java.GraphTraversalSource$Builder>;
                with(arg0: Java.TraversalStrategy): Java.TraversalSource$Builder;
                withP(arg0: Java.TraversalStrategy): Promise<Java.TraversalSource$Builder>;
                without(arg0: Java.Class): Java.TraversalSource$Builder;
                withoutP(arg0: Java.Class): Promise<Java.TraversalSource$Builder>;
            }
            module GraphTraversalSource$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.dsl.graph {
            interface GraphTraversalSource$GraphTraversalSourceStub extends Java.java.lang.Object {
                addV(...arg0: object_t[]): Java.GraphTraversal;
                addV(arg0: object_array_t): Java.GraphTraversal;
                addVP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                addVP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                E(...arg0: object_t[]): Java.GraphTraversal;
                E(arg0: object_array_t): Java.GraphTraversal;
                EP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                EP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                V(...arg0: object_t[]): Java.GraphTraversal;
                V(arg0: object_array_t): Java.GraphTraversal;
                VP(...arg0: object_t[]): Promise<Java.GraphTraversal>;
                VP(arg0: object_array_t): Promise<Java.GraphTraversal>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                withPath(): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withPathP(): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
                withSack(arg0: Java.Supplier, arg1: Java.UnaryOperator): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withSackP(arg0: Java.Supplier, arg1: Java.UnaryOperator): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
                withSack(arg0: object_t, arg1: Java.UnaryOperator): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withSackP(arg0: object_t, arg1: Java.UnaryOperator): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
                withSack(arg0: Java.Supplier): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withSackP(arg0: Java.Supplier): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
                withSack(arg0: object_t): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withSackP(arg0: object_t): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
                withSideEffect(arg0: string_t, arg1: Java.Supplier): Java.GraphTraversalSource$GraphTraversalSourceStub;
                withSideEffectP(arg0: string_t, arg1: Java.Supplier): Promise<Java.GraphTraversalSource$GraphTraversalSourceStub>;
            }
            module GraphTraversalSource$GraphTraversalSourceStub {
                interface Static {
                    new (arg0: Java.GraphTraversal$Admin, arg1: boolean_t): org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource$GraphTraversalSourceStub;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.engine {
            interface ComputerTraversalEngine extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getGraphComputer(): object_t;
                getGraphComputerP(): Promise<object_t>;
                getType(): Java.TraversalEngine$Type;
                getTypeP(): Promise<Java.TraversalEngine$Type>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isComputer(): boolean;
                isComputerP(): Promise<boolean>;
                isStandard(): boolean;
                isStandardP(): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ComputerTraversalEngine {
                interface Static {
                    build(): Java.ComputerTraversalEngine$Builder;
                    buildP(): Promise<Java.ComputerTraversalEngine$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.engine {
            interface ComputerTraversalEngine$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder {
                computer(arg0: Java.Class): Java.ComputerTraversalEngine$Builder;
                computerP(arg0: Java.Class): Promise<Java.ComputerTraversalEngine$Builder>;
                create(arg0: Java.Graph): Java.ComputerTraversalEngine;
                createP(arg0: Java.Graph): Promise<Java.ComputerTraversalEngine>;
                create(arg0: Java.Graph): Java.TraversalEngine;
                createP(arg0: Java.Graph): Promise<Java.TraversalEngine>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getWithoutStrategies(): Java.List;
                getWithoutStrategiesP(): Promise<Java.List>;
                getWithStrategies(): Java.List;
                getWithStrategiesP(): Promise<Java.List>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ComputerTraversalEngine$Builder {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.process.traversal.engine.ComputerTraversalEngine$Builder;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.engine {
            interface ComputerTraversalEngine$ComputerResultStrategy extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$FinalizationStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ComputerTraversalEngine$ComputerResultStrategy {
                interface Static {
                    instance(): Java.ComputerTraversalEngine$ComputerResultStrategy;
                    instanceP(): Promise<Java.ComputerTraversalEngine$ComputerResultStrategy>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.engine {
            interface StandardTraversalEngine extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getGraphComputer(): object_t;
                getGraphComputerP(): Promise<object_t>;
                getType(): Java.TraversalEngine$Type;
                getTypeP(): Promise<Java.TraversalEngine$Type>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isComputer(): boolean;
                isComputerP(): Promise<boolean>;
                isStandard(): boolean;
                isStandardP(): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module StandardTraversalEngine {
                interface Static {
                    build(): Java.StandardTraversalEngine$Builder;
                    buildP(): Promise<Java.StandardTraversalEngine$Builder>;
                    instance(): Java.StandardTraversalEngine;
                    instanceP(): Promise<Java.StandardTraversalEngine>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.engine {
            interface StandardTraversalEngine$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalEngine$Builder {
                create(arg0: Java.Graph): Java.TraversalEngine;
                createP(arg0: Java.Graph): Promise<Java.TraversalEngine>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getWithoutStrategies(): Java.List;
                getWithoutStrategiesP(): Promise<Java.List>;
                getWithStrategies(): Java.List;
                getWithStrategiesP(): Promise<Java.List>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module StandardTraversalEngine$Builder {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.process.traversal.engine.StandardTraversalEngine$Builder;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Operator extends Java.java.lang.Enum, Java.java.util.function_.BinaryOperator {
                andThen(arg0: Java.Function): Java.BiFunction;
                andThenP(arg0: Java.Function): Promise<Java.BiFunction>;
                apply(arg0: object_t, arg1: object_t): object_t;
                applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Operator {
                interface Static {
                    sum: Java.Operator;
                    minus: Java.Operator;
                    mult: Java.Operator;
                    div: Java.Operator;
                    min: Java.Operator;
                    max: Java.Operator;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.Operator;
                    valueOfP(arg0: string_t): Promise<Java.Operator>;
                    values(): Java.Operator[];
                    valuesP(): Promise<Java.Operator[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Order extends Java.java.lang.Enum, Java.java.util.Comparator {
                compare(arg0: object_t, arg1: object_t): number;
                compareP(arg0: object_t, arg1: object_t): Promise<number>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                reversed(): Java.Order;
                reversedP(): Promise<Java.Order>;
                reversed(): Java.Comparator;
                reversedP(): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function, arg1: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function): Java.Comparator;
                thenComparingP(arg0: Java.Function): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Comparator): Promise<Java.Comparator>;
                thenComparingDouble(arg0: object_t): Java.Comparator;
                thenComparingDoubleP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingInt(arg0: object_t): Java.Comparator;
                thenComparingIntP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingLong(arg0: object_t): Java.Comparator;
                thenComparingLongP(arg0: object_t): Promise<Java.Comparator>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Order {
                interface Static {
                    incr: Java.Order;
                    decr: Java.Order;
                    keyIncr: Java.Order;
                    valueIncr: Java.Order;
                    keyDecr: Java.Order;
                    valueDecr: Java.Order;
                    shuffle: Java.Order;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.Order;
                    valueOfP(arg0: string_t): Promise<Java.Order>;
                    values(): Java.Order[];
                    valuesP(): Promise<Java.Order[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface P extends Java.java.lang.Object, Java.java.util.function_.Predicate {
                and(arg0: Java.Traversal): Java.P;
                andP(arg0: Java.Traversal): Promise<Java.P>;
                and(arg0: Java.Predicate): Java.P;
                andP(arg0: Java.Predicate): Promise<Java.P>;
                and(arg0: Java.Predicate): Java.Predicate;
                andP(arg0: Java.Predicate): Promise<Java.Predicate>;
                clone(): Java.P;
                cloneP(): Promise<Java.P>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getBiPredicate(): Java.BiPredicate;
                getBiPredicateP(): Promise<Java.BiPredicate>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraversals(): Java.List;
                getTraversalsP(): Promise<Java.List>;
                getValue(): object_t;
                getValueP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                negate(): Java.P;
                negateP(): Promise<Java.P>;
                negate(): Java.Predicate;
                negateP(): Promise<Java.Predicate>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                or(arg0: Java.Traversal): Java.P;
                orP(arg0: Java.Traversal): Promise<Java.P>;
                or(arg0: Java.Predicate): Java.P;
                orP(arg0: Java.Predicate): Promise<Java.P>;
                or(arg0: Java.Predicate): Java.Predicate;
                orP(arg0: Java.Predicate): Promise<Java.Predicate>;
                setValue(arg0: object_t): void;
                setValueP(arg0: object_t): Promise<void>;
                test(arg0: object_t): boolean;
                testP(arg0: object_t): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module P {
                interface Static {
                    new (arg0: Java.BiPredicate, arg1: object_t): org.apache.tinkerpop.gremlin.process.traversal.P;
                    between(arg0: object_t, arg1: object_t): Java.P;
                    betweenP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    eq(arg0: object_t): Java.P;
                    eqP(arg0: object_t): Promise<Java.P>;
                    gt(arg0: object_t): Java.P;
                    gtP(arg0: object_t): Promise<Java.P>;
                    gte(arg0: object_t): Java.P;
                    gteP(arg0: object_t): Promise<Java.P>;
                    inside(arg0: object_t, arg1: object_t): Java.P;
                    insideP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    lt(arg0: object_t): Java.P;
                    ltP(arg0: object_t): Promise<Java.P>;
                    lte(arg0: object_t): Java.P;
                    lteP(arg0: object_t): Promise<Java.P>;
                    neq(arg0: object_t): Java.P;
                    neqP(arg0: object_t): Promise<Java.P>;
                    not(arg0: Java.Traversal): Java.P;
                    notP(arg0: Java.Traversal): Promise<Java.P>;
                    not(arg0: Java.P): Java.P;
                    notP(arg0: Java.P): Promise<Java.P>;
                    outside(arg0: object_t, arg1: object_t): Java.P;
                    outsideP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    test(arg0: Java.BiPredicate, arg1: object_t): Java.P;
                    testP(arg0: Java.BiPredicate, arg1: object_t): Promise<Java.P>;
                    traversal(arg0: Java.Traversal): Java.P;
                    traversalP(arg0: Java.Traversal): Promise<Java.P>;
                    within(arg0: Java.Collection): Java.P;
                    withinP(arg0: Java.Collection): Promise<Java.P>;
                    within(...arg0: object_t[]): Java.P;
                    within(arg0: object_array_t): Java.P;
                    withinP(...arg0: object_t[]): Promise<Java.P>;
                    withinP(arg0: object_array_t): Promise<Java.P>;
                    without(arg0: Java.Collection): Java.P;
                    withoutP(arg0: Java.Collection): Promise<Java.P>;
                    without(...arg0: object_t[]): Java.P;
                    without(arg0: object_array_t): Java.P;
                    withoutP(...arg0: object_t[]): Promise<Java.P>;
                    withoutP(arg0: object_array_t): Promise<Java.P>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Path extends Java.java.lang.Object {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                clone(): Java.Path;
                cloneP(): Promise<Java.Path>;
                extend(arg0: object_t, ...arg1: string_t[]): Java.Path;
                extend(arg0: object_t, arg1: array_t<string_t>): Java.Path;
                extendP(arg0: object_t, ...arg1: string_t[]): Promise<Java.Path>;
                extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Java.Path>;
                extend(arg0: object_t, arg1: Java.Set): Java.Path;
                extendP(arg0: object_t, arg1: Java.Set): Promise<Java.Path>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                get(arg0: integer_t): object_t;
                getP(arg0: integer_t): Promise<object_t>;
                hasLabel(arg0: string_t): boolean;
                hasLabelP(arg0: string_t): Promise<boolean>;
                isSimple(): boolean;
                isSimpleP(): Promise<boolean>;
                labels(): Java.List;
                labelsP(): Promise<Java.List>;
                objects(): Java.List;
                objectsP(): Promise<Java.List>;
                size(): number;
                sizeP(): Promise<number>;
                stream(): object_t;
                streamP(): Promise<object_t>;
            }
            module Path {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Path$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Path$Exceptions {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.process.traversal.Path$Exceptions;
                    stepWithProvidedLabelDoesNotExist(arg0: string_t): object_t;
                    stepWithProvidedLabelDoesNotExistP(arg0: string_t): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Scope extends Java.java.lang.Enum {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                opposite(): Java.Scope;
                oppositeP(): Promise<Java.Scope>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Scope {
                interface Static {
                    global: Java.Scope;
                    local: Java.Scope;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.Scope;
                    valueOfP(arg0: string_t): Promise<Java.Scope>;
                    values(): Java.Scope[];
                    valuesP(): Promise<Java.Scope[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Step extends Java.java.util.Iterator {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                clone(): Java.Step;
                cloneP(): Promise<Java.Step>;
                equals(arg0: Java.Step, arg1: boolean_t): boolean;
                equalsP(arg0: Java.Step, arg1: boolean_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getId(): string;
                getIdP(): Promise<string>;
                getLabels(): Java.Set;
                getLabelsP(): Promise<Java.Set>;
                getNextStep(): Java.Step;
                getNextStepP(): Promise<Java.Step>;
                getPreviousStep(): Java.Step;
                getPreviousStepP(): Promise<Java.Step>;
                getRequirements(): Java.Set;
                getRequirementsP(): Promise<Java.Set>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                next(): object_t;
                nextP(): Promise<object_t>;
                remove(): void;
                removeP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                setId(arg0: string_t): void;
                setIdP(arg0: string_t): Promise<void>;
                setNextStep(arg0: Java.Step): void;
                setNextStepP(arg0: Java.Step): Promise<void>;
                setPreviousStep(arg0: Java.Step): void;
                setPreviousStepP(arg0: Java.Step): Promise<void>;
                setTraversal(arg0: Java.Traversal$Admin): void;
                setTraversalP(arg0: Java.Traversal$Admin): Promise<void>;
            }
            module Step {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface AbstractStep extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.Step {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                clone(): Java.AbstractStep;
                cloneP(): Promise<Java.AbstractStep>;
                clone(): Java.Step;
                cloneP(): Promise<Java.Step>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: Java.Step, arg1: boolean_t): boolean;
                equalsP(arg0: Java.Step, arg1: boolean_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getId(): string;
                getIdP(): Promise<string>;
                getLabels(): Java.Set;
                getLabelsP(): Promise<Java.Set>;
                getNextStep(): Java.Step;
                getNextStepP(): Promise<Java.Step>;
                getPreviousStep(): Java.Step;
                getPreviousStepP(): Promise<Java.Step>;
                getRequirements(): Java.Set;
                getRequirementsP(): Promise<Java.Set>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                next(): Java.Traverser;
                nextP(): Promise<Java.Traverser>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                remove(): void;
                removeP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                setId(arg0: string_t): void;
                setIdP(arg0: string_t): Promise<void>;
                setNextStep(arg0: Java.Step): void;
                setNextStepP(arg0: Java.Step): Promise<void>;
                setPreviousStep(arg0: Java.Step): void;
                setPreviousStepP(arg0: Java.Step): Promise<void>;
                setTraversal(arg0: Java.Traversal$Admin): void;
                setTraversalP(arg0: Java.Traversal$Admin): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module AbstractStep {
                interface Static {
                    new (arg0: Java.Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface BulkSet extends Java.java.util.AbstractSet, Java.java.util.Set {
                add(arg0: object_t, arg1: long_t): boolean;
                addP(arg0: object_t, arg1: long_t): Promise<boolean>;
                add(arg0: object_t): boolean;
                addP(arg0: object_t): Promise<boolean>;
                addAll(arg0: Java.Collection): boolean;
                addAllP(arg0: Java.Collection): Promise<boolean>;
                clear(): void;
                clearP(): Promise<void>;
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                containsAll(arg0: Java.Collection): boolean;
                containsAllP(arg0: Java.Collection): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                get(arg0: object_t): longValue_t;
                getP(arg0: object_t): Promise<longValue_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                longSize(): longValue_t;
                longSizeP(): Promise<longValue_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                parallelStream(): object_t;
                parallelStreamP(): Promise<object_t>;
                remove(arg0: object_t): boolean;
                removeP(arg0: object_t): Promise<boolean>;
                removeAll(arg0: Java.Collection): boolean;
                removeAllP(arg0: Java.Collection): Promise<boolean>;
                removeIf(arg0: Java.Predicate): boolean;
                removeIfP(arg0: Java.Predicate): Promise<boolean>;
                retainAll(arg0: Java.Collection): boolean;
                retainAllP(arg0: Java.Collection): Promise<boolean>;
                size(): number;
                sizeP(): Promise<number>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                toArray(arg0: object_array_t): object_t[];
                toArrayP(arg0: object_array_t): Promise<object_t[]>;
                toArray(): object_t[];
                toArrayP(): Promise<object_t[]>;
                toString(): string;
                toStringP(): Promise<string>;
                uniqueSize(): number;
                uniqueSizeP(): Promise<number>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module BulkSet {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.process.traversal.step.util.BulkSet;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface CollectingBarrierStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                barrierConsumer(arg0: object_t): void;
                barrierConsumerP(arg0: object_t): Promise<void>;
                clone(): Java.CollectingBarrierStep;
                cloneP(): Promise<Java.CollectingBarrierStep>;
                clone(): Java.AbstractStep;
                cloneP(): Promise<Java.AbstractStep>;
                clone(): Java.Step;
                cloneP(): Promise<Java.Step>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: Java.Step, arg1: boolean_t): boolean;
                equalsP(arg0: Java.Step, arg1: boolean_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getId(): string;
                getIdP(): Promise<string>;
                getLabels(): Java.Set;
                getLabelsP(): Promise<Java.Set>;
                getNextStep(): Java.Step;
                getNextStepP(): Promise<Java.Step>;
                getPreviousStep(): Java.Step;
                getPreviousStepP(): Promise<Java.Step>;
                getRequirements(): Java.Set;
                getRequirementsP(): Promise<Java.Set>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                next(): Java.Traverser;
                nextP(): Promise<Java.Traverser>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                processNextStart(): Java.Traverser;
                processNextStartP(): Promise<Java.Traverser>;
                remove(): void;
                removeP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                setId(arg0: string_t): void;
                setIdP(arg0: string_t): Promise<void>;
                setNextStep(arg0: Java.Step): void;
                setNextStepP(arg0: Java.Step): Promise<void>;
                setPreviousStep(arg0: Java.Step): void;
                setPreviousStepP(arg0: Java.Step): Promise<void>;
                setTraversal(arg0: Java.Traversal$Admin): void;
                setTraversalP(arg0: Java.Traversal$Admin): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module CollectingBarrierStep {
                interface Static {
                    new (arg0: Java.Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface ComputerAwareStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                clone(): Java.ComputerAwareStep;
                cloneP(): Promise<Java.ComputerAwareStep>;
                clone(): Java.AbstractStep;
                cloneP(): Promise<Java.AbstractStep>;
                clone(): Java.Step;
                cloneP(): Promise<Java.Step>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: Java.Step, arg1: boolean_t): boolean;
                equalsP(arg0: Java.Step, arg1: boolean_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getId(): string;
                getIdP(): Promise<string>;
                getLabels(): Java.Set;
                getLabelsP(): Promise<Java.Set>;
                getNextStep(): Java.Step;
                getNextStepP(): Promise<Java.Step>;
                getPreviousStep(): Java.Step;
                getPreviousStepP(): Promise<Java.Step>;
                getRequirements(): Java.Set;
                getRequirementsP(): Promise<Java.Set>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                next(): Java.Traverser;
                nextP(): Promise<Java.Traverser>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                onEngine(arg0: Java.TraversalEngine): void;
                onEngineP(arg0: Java.TraversalEngine): Promise<void>;
                remove(): void;
                removeP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                setId(arg0: string_t): void;
                setIdP(arg0: string_t): Promise<void>;
                setNextStep(arg0: Java.Step): void;
                setNextStepP(arg0: Java.Step): Promise<void>;
                setPreviousStep(arg0: Java.Step): void;
                setPreviousStepP(arg0: Java.Step): Promise<void>;
                setTraversal(arg0: Java.Traversal$Admin): void;
                setTraversalP(arg0: Java.Traversal$Admin): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ComputerAwareStep {
                interface Static {
                    new (arg0: Java.Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface ComputerAwareStep$EndStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                clone(): Java.AbstractStep;
                cloneP(): Promise<Java.AbstractStep>;
                clone(): Java.Step;
                cloneP(): Promise<Java.Step>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: Java.Step, arg1: boolean_t): boolean;
                equalsP(arg0: Java.Step, arg1: boolean_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getId(): string;
                getIdP(): Promise<string>;
                getLabels(): Java.Set;
                getLabelsP(): Promise<Java.Set>;
                getNextStep(): Java.Step;
                getNextStepP(): Promise<Java.Step>;
                getPreviousStep(): Java.Step;
                getPreviousStepP(): Promise<Java.Step>;
                getRequirements(): Java.Set;
                getRequirementsP(): Promise<Java.Set>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                next(): Java.Traverser;
                nextP(): Promise<Java.Traverser>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                onEngine(arg0: Java.TraversalEngine): void;
                onEngineP(arg0: Java.TraversalEngine): Promise<void>;
                remove(): void;
                removeP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                setId(arg0: string_t): void;
                setIdP(arg0: string_t): Promise<void>;
                setNextStep(arg0: Java.Step): void;
                setNextStepP(arg0: Java.Step): Promise<void>;
                setPreviousStep(arg0: Java.Step): void;
                setPreviousStepP(arg0: Java.Step): Promise<void>;
                setTraversal(arg0: Java.Traversal$Admin): void;
                setTraversalP(arg0: Java.Traversal$Admin): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ComputerAwareStep$EndStep {
                interface Static {
                    new (arg0: Java.ComputerAwareStep, arg1: Java.Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.ComputerAwareStep$EndStep;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface ElementFunctionComparator extends Java.java.lang.Object, Java.java.util.Comparator {
                compare(arg0: Java.Element, arg1: Java.Element): number;
                compareP(arg0: Java.Element, arg1: Java.Element): Promise<number>;
                compare(arg0: object_t, arg1: object_t): number;
                compareP(arg0: object_t, arg1: object_t): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getElementFunction(): Java.Function;
                getElementFunctionP(): Promise<Java.Function>;
                getValueComparator(): Java.Comparator;
                getValueComparatorP(): Promise<Java.Comparator>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reversed(): Java.Comparator;
                reversedP(): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function, arg1: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function): Java.Comparator;
                thenComparingP(arg0: Java.Function): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Comparator): Promise<Java.Comparator>;
                thenComparingDouble(arg0: object_t): Java.Comparator;
                thenComparingDoubleP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingInt(arg0: object_t): Java.Comparator;
                thenComparingIntP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingLong(arg0: object_t): Java.Comparator;
                thenComparingLongP(arg0: object_t): Promise<Java.Comparator>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ElementFunctionComparator {
                interface Static {
                    new (arg0: Java.Function, arg1: Java.Comparator): org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementFunctionComparator;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface ElementValueComparator extends Java.java.lang.Object, Java.java.util.Comparator {
                compare(arg0: Java.Element, arg1: Java.Element): number;
                compareP(arg0: Java.Element, arg1: Java.Element): Promise<number>;
                compare(arg0: object_t, arg1: object_t): number;
                compareP(arg0: object_t, arg1: object_t): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getPropertyKey(): string;
                getPropertyKeyP(): Promise<string>;
                getValueComparator(): Java.Comparator;
                getValueComparatorP(): Promise<Java.Comparator>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reversed(): Java.Comparator;
                reversedP(): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function, arg1: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function): Java.Comparator;
                thenComparingP(arg0: Java.Function): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Comparator): Promise<Java.Comparator>;
                thenComparingDouble(arg0: object_t): Java.Comparator;
                thenComparingDoubleP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingInt(arg0: object_t): Java.Comparator;
                thenComparingIntP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingLong(arg0: object_t): Java.Comparator;
                thenComparingLongP(arg0: object_t): Promise<Java.Comparator>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ElementValueComparator {
                interface Static {
                    new (arg0: string_t, arg1: Java.Comparator): org.apache.tinkerpop.gremlin.process.traversal.step.util.ElementValueComparator;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface EmptyPath extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.Path {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                clone(): Java.EmptyPath;
                cloneP(): Promise<Java.EmptyPath>;
                clone(): Java.Path;
                cloneP(): Promise<Java.Path>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                extend(arg0: object_t, ...arg1: string_t[]): Java.Path;
                extend(arg0: object_t, arg1: array_t<string_t>): Java.Path;
                extendP(arg0: object_t, ...arg1: string_t[]): Promise<Java.Path>;
                extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Java.Path>;
                extend(arg0: object_t, arg1: Java.Set): Java.Path;
                extendP(arg0: object_t, arg1: Java.Set): Promise<Java.Path>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                get(arg0: integer_t): object_t;
                getP(arg0: integer_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasLabel(arg0: string_t): boolean;
                hasLabelP(arg0: string_t): Promise<boolean>;
                isSimple(): boolean;
                isSimpleP(): Promise<boolean>;
                labels(): Java.List;
                labelsP(): Promise<Java.List>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                objects(): Java.List;
                objectsP(): Promise<Java.List>;
                size(): number;
                sizeP(): Promise<number>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module EmptyPath {
                interface Static {
                    instance(): Java.Path;
                    instanceP(): Promise<Java.Path>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface EmptyStep extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.Step {
                addGlobalChild(arg0: Java.Traversal$Admin): void;
                addGlobalChildP(arg0: Java.Traversal$Admin): Promise<void>;
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                addLocalChild(arg0: Java.Traversal$Admin): void;
                addLocalChildP(arg0: Java.Traversal$Admin): Promise<void>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                asStep(): Java.Step;
                asStepP(): Promise<Java.Step>;
                clone(): Java.EmptyStep;
                cloneP(): Promise<Java.EmptyStep>;
                clone(): Java.Step;
                cloneP(): Promise<Java.Step>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: Java.Step, arg1: boolean_t): boolean;
                equalsP(arg0: Java.Step, arg1: boolean_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getGlobalChildren(): Java.List;
                getGlobalChildrenP(): Promise<Java.List>;
                getId(): string;
                getIdP(): Promise<string>;
                getLabels(): Java.Set;
                getLabelsP(): Promise<Java.Set>;
                getLocalChildren(): Java.List;
                getLocalChildrenP(): Promise<Java.List>;
                getNextStep(): Java.Step;
                getNextStepP(): Promise<Java.Step>;
                getPreviousStep(): Java.Step;
                getPreviousStepP(): Promise<Java.Step>;
                getRequirements(): Java.Set;
                getRequirementsP(): Promise<Java.Set>;
                getSelfAndChildRequirements(...arg0: object_t[]): Java.Set;
                getSelfAndChildRequirements(arg0: object_array_t): Java.Set;
                getSelfAndChildRequirementsP(...arg0: object_t[]): Promise<Java.Set>;
                getSelfAndChildRequirementsP(arg0: object_array_t): Promise<Java.Set>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                integrateChild(arg0: Java.Traversal$Admin): Java.Traversal$Admin;
                integrateChildP(arg0: Java.Traversal$Admin): Promise<Java.Traversal$Admin>;
                next(): Java.Traverser;
                nextP(): Promise<Java.Traverser>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                remove(): void;
                removeP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                setId(arg0: string_t): void;
                setIdP(arg0: string_t): Promise<void>;
                setNextStep(arg0: Java.Step): void;
                setNextStepP(arg0: Java.Step): Promise<void>;
                setPreviousStep(arg0: Java.Step): void;
                setPreviousStepP(arg0: Java.Step): Promise<void>;
                setTraversal(arg0: Java.Traversal$Admin): void;
                setTraversalP(arg0: Java.Traversal$Admin): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module EmptyStep {
                interface Static {
                    instance(): Java.Step;
                    instanceP(): Promise<Java.Step>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface ExpandableStepIterator extends Java.java.lang.Object, Java.java.util.Iterator {
                add(arg0: Java.Traverser$Admin): void;
                addP(arg0: Java.Traverser$Admin): Promise<void>;
                add(arg0: Java.Iterator): void;
                addP(arg0: Java.Iterator): Promise<void>;
                clear(): void;
                clearP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                next(): Java.Traverser$Admin;
                nextP(): Promise<Java.Traverser$Admin>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                remove(): void;
                removeP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ExpandableStepIterator {
                interface Static {
                    new (arg0: Java.Step): org.apache.tinkerpop.gremlin.process.traversal.step.util.ExpandableStepIterator;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface HasContainer extends Java.java.lang.Object, Java.java.util.function_.Predicate {
                and(arg0: Java.Predicate): Java.Predicate;
                andP(arg0: Java.Predicate): Promise<Java.Predicate>;
                clone(): Java.HasContainer;
                cloneP(): Promise<Java.HasContainer>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getBiPredicate(): Java.BiPredicate;
                getBiPredicateP(): Promise<Java.BiPredicate>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getKey(): string;
                getKeyP(): Promise<string>;
                getPredicate(): Java.P;
                getPredicateP(): Promise<Java.P>;
                getValue(): object_t;
                getValueP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                negate(): Java.Predicate;
                negateP(): Promise<Java.Predicate>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                or(arg0: Java.Predicate): Java.Predicate;
                orP(arg0: Java.Predicate): Promise<Java.Predicate>;
                setKey(arg0: string_t): void;
                setKeyP(arg0: string_t): Promise<void>;
                test(arg0: Java.Element): boolean;
                testP(arg0: Java.Element): Promise<boolean>;
                test(arg0: object_t): boolean;
                testP(arg0: object_t): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module HasContainer {
                interface Static {
                    new (arg0: string_t, arg1: Java.P): org.apache.tinkerpop.gremlin.process.traversal.step.util.HasContainer;
                    makeHasContainers(arg0: string_t, arg1: Java.P): Java.HasContainer[];
                    makeHasContainersP(arg0: string_t, arg1: Java.P): Promise<Java.HasContainer[]>;
                    testAll(arg0: Java.Element, arg1: Java.List): boolean;
                    testAllP(arg0: Java.Element, arg1: Java.List): Promise<boolean>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface ImmutablePath extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.Path {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                clone(): Java.ImmutablePath;
                cloneP(): Promise<Java.ImmutablePath>;
                clone(): Java.Path;
                cloneP(): Promise<Java.Path>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                extend(arg0: object_t, ...arg1: string_t[]): Java.Path;
                extend(arg0: object_t, arg1: array_t<string_t>): Java.Path;
                extendP(arg0: object_t, ...arg1: string_t[]): Promise<Java.Path>;
                extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Java.Path>;
                extend(arg0: object_t, arg1: Java.Set): Java.Path;
                extendP(arg0: object_t, arg1: Java.Set): Promise<Java.Path>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                get(arg0: integer_t): object_t;
                getP(arg0: integer_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasLabel(arg0: string_t): boolean;
                hasLabelP(arg0: string_t): Promise<boolean>;
                isSimple(): boolean;
                isSimpleP(): Promise<boolean>;
                labels(): Java.List;
                labelsP(): Promise<Java.List>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                objects(): Java.List;
                objectsP(): Promise<Java.List>;
                size(): number;
                sizeP(): Promise<number>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ImmutablePath {
                interface Static {
                    make(): Java.Path;
                    makeP(): Promise<Java.Path>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface MapHelper extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MapHelper {
                interface Static {
                    incr(arg0: Java.Map, arg1: object_t, arg2: object_t): void;
                    incrP(arg0: Java.Map, arg1: object_t, arg2: object_t): Promise<void>;
                    incr(arg0: Java.Map, arg1: object_t, arg2: double_t): void;
                    incrP(arg0: Java.Map, arg1: object_t, arg2: double_t): Promise<void>;
                    incr(arg0: Java.Map, arg1: object_t, arg2: long_t): void;
                    incrP(arg0: Java.Map, arg1: object_t, arg2: long_t): Promise<void>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface MutablePath extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.Path {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                clone(): Java.MutablePath;
                cloneP(): Promise<Java.MutablePath>;
                clone(): Java.Path;
                cloneP(): Promise<Java.Path>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                extend(arg0: object_t, ...arg1: string_t[]): Java.Path;
                extend(arg0: object_t, arg1: array_t<string_t>): Java.Path;
                extendP(arg0: object_t, ...arg1: string_t[]): Promise<Java.Path>;
                extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Java.Path>;
                extend(arg0: object_t, arg1: Java.Set): Java.Path;
                extendP(arg0: object_t, arg1: Java.Set): Promise<Java.Path>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                get(arg0: integer_t): object_t;
                getP(arg0: integer_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasLabel(arg0: string_t): boolean;
                hasLabelP(arg0: string_t): Promise<boolean>;
                isSimple(): boolean;
                isSimpleP(): Promise<boolean>;
                labels(): Java.List;
                labelsP(): Promise<Java.List>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                objects(): Java.List;
                objectsP(): Promise<Java.List>;
                size(): number;
                sizeP(): Promise<number>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MutablePath {
                interface Static {
                    make(): Java.Path;
                    makeP(): Promise<Java.Path>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface NoOpBarrierStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.CollectingBarrierStep {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                barrierConsumer(arg0: object_t): void;
                barrierConsumerP(arg0: object_t): Promise<void>;
                clone(): Java.CollectingBarrierStep;
                cloneP(): Promise<Java.CollectingBarrierStep>;
                clone(): Java.AbstractStep;
                cloneP(): Promise<Java.AbstractStep>;
                clone(): Java.Step;
                cloneP(): Promise<Java.Step>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: Java.Step, arg1: boolean_t): boolean;
                equalsP(arg0: Java.Step, arg1: boolean_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getId(): string;
                getIdP(): Promise<string>;
                getLabels(): Java.Set;
                getLabelsP(): Promise<Java.Set>;
                getNextStep(): Java.Step;
                getNextStepP(): Promise<Java.Step>;
                getPreviousStep(): Java.Step;
                getPreviousStepP(): Promise<Java.Step>;
                getRequirements(): Java.Set;
                getRequirementsP(): Promise<Java.Set>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                next(): Java.Traverser;
                nextP(): Promise<Java.Traverser>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                processNextStart(): Java.Traverser;
                processNextStartP(): Promise<Java.Traverser>;
                remove(): void;
                removeP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                setId(arg0: string_t): void;
                setIdP(arg0: string_t): Promise<void>;
                setNextStep(arg0: Java.Step): void;
                setNextStepP(arg0: Java.Step): Promise<void>;
                setPreviousStep(arg0: Java.Step): void;
                setPreviousStepP(arg0: Java.Step): Promise<void>;
                setTraversal(arg0: Java.Traversal$Admin): void;
                setTraversalP(arg0: Java.Traversal$Admin): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module NoOpBarrierStep {
                interface Static {
                    new (arg0: Java.Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.NoOpBarrierStep;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface PathIdentityStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                clone(): Java.AbstractStep;
                cloneP(): Promise<Java.AbstractStep>;
                clone(): Java.Step;
                cloneP(): Promise<Java.Step>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: Java.Step, arg1: boolean_t): boolean;
                equalsP(arg0: Java.Step, arg1: boolean_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getId(): string;
                getIdP(): Promise<string>;
                getLabels(): Java.Set;
                getLabelsP(): Promise<Java.Set>;
                getNextStep(): Java.Step;
                getNextStepP(): Promise<Java.Step>;
                getPreviousStep(): Java.Step;
                getPreviousStepP(): Promise<Java.Step>;
                getRequirements(): Java.Set;
                getRequirementsP(): Promise<Java.Set>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                next(): Java.Traverser;
                nextP(): Promise<Java.Traverser>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                remove(): void;
                removeP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                setId(arg0: string_t): void;
                setIdP(arg0: string_t): Promise<void>;
                setNextStep(arg0: Java.Step): void;
                setNextStepP(arg0: Java.Step): Promise<void>;
                setPreviousStep(arg0: Java.Step): void;
                setPreviousStepP(arg0: Java.Step): Promise<void>;
                setTraversal(arg0: Java.Traversal$Admin): void;
                setTraversalP(arg0: Java.Traversal$Admin): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module PathIdentityStep {
                interface Static {
                    new (arg0: Java.Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.PathIdentityStep;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface ReducingBarrierStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                clone(): Java.ReducingBarrierStep;
                cloneP(): Promise<Java.ReducingBarrierStep>;
                clone(): Java.AbstractStep;
                cloneP(): Promise<Java.AbstractStep>;
                clone(): Java.Step;
                cloneP(): Promise<Java.Step>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: Java.Step, arg1: boolean_t): boolean;
                equalsP(arg0: Java.Step, arg1: boolean_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getId(): string;
                getIdP(): Promise<string>;
                getLabels(): Java.Set;
                getLabelsP(): Promise<Java.Set>;
                getMapReduce(): Java.MapReduce;
                getMapReduceP(): Promise<Java.MapReduce>;
                getNextStep(): Java.Step;
                getNextStepP(): Promise<Java.Step>;
                getPreviousStep(): Java.Step;
                getPreviousStepP(): Promise<Java.Step>;
                getRequirements(): Java.Set;
                getRequirementsP(): Promise<Java.Set>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                next(): Java.Traverser;
                nextP(): Promise<Java.Traverser>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                onEngine(arg0: Java.TraversalEngine): void;
                onEngineP(arg0: Java.TraversalEngine): Promise<void>;
                processNextStart(): Java.Traverser;
                processNextStartP(): Promise<Java.Traverser>;
                remove(): void;
                removeP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                setBiFunction(arg0: Java.BiFunction): void;
                setBiFunctionP(arg0: Java.BiFunction): Promise<void>;
                setId(arg0: string_t): void;
                setIdP(arg0: string_t): Promise<void>;
                setNextStep(arg0: Java.Step): void;
                setNextStepP(arg0: Java.Step): Promise<void>;
                setPreviousStep(arg0: Java.Step): void;
                setPreviousStepP(arg0: Java.Step): Promise<void>;
                setSeedSupplier(arg0: Java.Supplier): void;
                setSeedSupplierP(arg0: Java.Supplier): Promise<void>;
                setTraversal(arg0: Java.Traversal$Admin): void;
                setTraversalP(arg0: Java.Traversal$Admin): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ReducingBarrierStep {
                interface Static {
                    REDUCING: string;
                    new (arg0: Java.Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface ReducingBarrierStep$DefaultMapReduce extends Java.java.lang.Object {
                addResultToMemory(arg0: Java.Memory$Admin, arg1: Java.Iterator): void;
                addResultToMemoryP(arg0: Java.Memory$Admin, arg1: Java.Iterator): Promise<void>;
                clone(): Java.MapReduce;
                cloneP(): Promise<Java.MapReduce>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                combine(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                combineP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                doStage(arg0: Java.MapReduce$Stage): boolean;
                doStageP(arg0: Java.MapReduce$Stage): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                generateFinalResult(arg0: Java.Iterator): object_t;
                generateFinalResultP(arg0: Java.Iterator): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getMapKeySort(): object_t;
                getMapKeySortP(): Promise<object_t>;
                getMemoryKey(): string;
                getMemoryKeyP(): Promise<string>;
                getReduceKeySort(): object_t;
                getReduceKeySortP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                loadState(arg0: Java.Graph, arg1: object_t): void;
                loadStateP(arg0: Java.Graph, arg1: object_t): Promise<void>;
                map(arg0: Java.Vertex, arg1: Java.MapReduce$MapEmitter): void;
                mapP(arg0: Java.Vertex, arg1: Java.MapReduce$MapEmitter): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reduce(arg0: Java.MapReduce$NullObject, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                reduceP(arg0: Java.MapReduce$NullObject, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                reduce(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): void;
                reduceP(arg0: object_t, arg1: Java.Iterator, arg2: Java.MapReduce$ReduceEmitter): Promise<void>;
                storeState(arg0: object_t): void;
                storeStateP(arg0: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                workerEnd(arg0: Java.MapReduce$Stage): void;
                workerEndP(arg0: Java.MapReduce$Stage): Promise<void>;
                workerStart(arg0: Java.MapReduce$Stage): void;
                workerStartP(arg0: Java.MapReduce$Stage): Promise<void>;
            }
            module ReducingBarrierStep$DefaultMapReduce {
                interface Static {
                    MAP_REDUCE: string;
                    new (arg0: Java.Supplier, arg1: Java.BiFunction): org.apache.tinkerpop.gremlin.process.traversal.step.util.ReducingBarrierStep$DefaultMapReduce;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface ReducingBarrierStep$FinalGet extends Java.java.lang.Object {
                getFinal(): object_t;
                getFinalP(): Promise<object_t>;
            }
            module ReducingBarrierStep$FinalGet {
                interface Static {
                    tryFinalGet(arg0: object_t): object_t;
                    tryFinalGetP(arg0: object_t): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface SupplyingBarrierStep extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.AbstractStep {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                clone(): Java.SupplyingBarrierStep;
                cloneP(): Promise<Java.SupplyingBarrierStep>;
                clone(): Java.AbstractStep;
                cloneP(): Promise<Java.AbstractStep>;
                clone(): Java.Step;
                cloneP(): Promise<Java.Step>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: Java.Step, arg1: boolean_t): boolean;
                equalsP(arg0: Java.Step, arg1: boolean_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getId(): string;
                getIdP(): Promise<string>;
                getLabels(): Java.Set;
                getLabelsP(): Promise<Java.Set>;
                getNextStep(): Java.Step;
                getNextStepP(): Promise<Java.Step>;
                getPreviousStep(): Java.Step;
                getPreviousStepP(): Promise<Java.Step>;
                getRequirements(): Java.Set;
                getRequirementsP(): Promise<Java.Set>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                next(): Java.Traverser;
                nextP(): Promise<Java.Traverser>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                processNextStart(): Java.Traverser;
                processNextStartP(): Promise<Java.Traverser>;
                remove(): void;
                removeP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                setId(arg0: string_t): void;
                setIdP(arg0: string_t): Promise<void>;
                setNextStep(arg0: Java.Step): void;
                setNextStepP(arg0: Java.Step): Promise<void>;
                setPreviousStep(arg0: Java.Step): void;
                setPreviousStepP(arg0: Java.Step): Promise<void>;
                setTraversal(arg0: Java.Traversal$Admin): void;
                setTraversalP(arg0: Java.Traversal$Admin): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module SupplyingBarrierStep {
                interface Static {
                    new (arg0: Java.Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.step.util.SupplyingBarrierStep;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface TraversalComparator extends Java.java.lang.Object, Java.java.util.Comparator {
                clone(): Java.TraversalComparator;
                cloneP(): Promise<Java.TraversalComparator>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                compare(arg0: object_t, arg1: object_t): number;
                compareP(arg0: object_t, arg1: object_t): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reversed(): Java.Comparator;
                reversedP(): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function, arg1: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function): Java.Comparator;
                thenComparingP(arg0: Java.Function): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Comparator): Promise<Java.Comparator>;
                thenComparingDouble(arg0: object_t): Java.Comparator;
                thenComparingDoubleP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingInt(arg0: object_t): Java.Comparator;
                thenComparingIntP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingLong(arg0: object_t): Java.Comparator;
                thenComparingLongP(arg0: object_t): Promise<Java.Comparator>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalComparator {
                interface Static {
                    new (arg0: Java.Traversal$Admin, arg1: Java.Comparator): org.apache.tinkerpop.gremlin.process.traversal.step.util.TraversalComparator;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.step.util {
            interface Tree extends Java.java.util.HashMap {
                addTree(arg0: Java.Tree): void;
                addTreeP(arg0: Java.Tree): Promise<void>;
                clear(): void;
                clearP(): Promise<void>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                compute(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
                computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
                computeIfPresent(arg0: object_t, arg1: Java.BiFunction): object_t;
                computeIfPresentP(arg0: object_t, arg1: Java.BiFunction): Promise<object_t>;
                containsKey(arg0: object_t): boolean;
                containsKeyP(arg0: object_t): Promise<boolean>;
                containsValue(arg0: object_t): boolean;
                containsValueP(arg0: object_t): Promise<boolean>;
                entrySet(): Java.Set;
                entrySetP(): Promise<Java.Set>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                get(arg0: object_t): object_t;
                getP(arg0: object_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getLeafObjects(): Java.List;
                getLeafObjectsP(): Promise<Java.List>;
                getLeafTrees(): Java.List;
                getLeafTreesP(): Promise<Java.List>;
                getObjectsAtDepth(arg0: integer_t): Java.List;
                getObjectsAtDepthP(arg0: integer_t): Promise<Java.List>;
                getOrDefault(arg0: object_t, arg1: object_t): object_t;
                getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
                getTreesAtDepth(arg0: integer_t): Java.List;
                getTreesAtDepthP(arg0: integer_t): Promise<Java.List>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                isLeaf(): boolean;
                isLeafP(): Promise<boolean>;
                keySet(): Java.Set;
                keySetP(): Promise<Java.Set>;
                merge(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): object_t;
                mergeP(arg0: object_t, arg1: object_t, arg2: Java.BiFunction): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                put(arg0: object_t, arg1: object_t): object_t;
                putP(arg0: object_t, arg1: object_t): Promise<object_t>;
                putAll(arg0: Java.Map): void;
                putAllP(arg0: Java.Map): Promise<void>;
                putIfAbsent(arg0: object_t, arg1: object_t): object_t;
                putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
                remove(arg0: object_t, arg1: object_t): boolean;
                removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
                remove(arg0: object_t): object_t;
                removeP(arg0: object_t): Promise<object_t>;
                replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
                replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
                replace(arg0: object_t, arg1: object_t): object_t;
                replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
                replaceAll(arg0: Java.BiFunction): void;
                replaceAllP(arg0: Java.BiFunction): Promise<void>;
                size(): number;
                sizeP(): Promise<number>;
                splitParents(): Java.List;
                splitParentsP(): Promise<Java.List>;
                toString(): string;
                toStringP(): Promise<string>;
                values(): Java.Collection;
                valuesP(): Promise<Java.Collection>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Tree {
                interface Static {
                    new (...arg0: Java.Map$Entry[]): org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree;
                    new (...arg0: object_t[]): org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree;
                    new (): org.apache.tinkerpop.gremlin.process.traversal.step.util.Tree;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
            interface ConjunctionStrategy extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ConjunctionStrategy {
                interface Static {
                    instance(): Java.ConjunctionStrategy;
                    instanceP(): Promise<Java.ConjunctionStrategy>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
            interface ElementIdStrategy extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getIdMaker(): Java.Supplier;
                getIdMakerP(): Promise<Java.Supplier>;
                getIdPropertyKey(): string;
                getIdPropertyKeyP(): Promise<string>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ElementIdStrategy {
                interface Static {
                    build(): Java.ElementIdStrategy$Builder;
                    buildP(): Promise<Java.ElementIdStrategy$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
            interface ElementIdStrategy$Builder extends Java.java.lang.Object {
                create(): Java.ElementIdStrategy;
                createP(): Promise<Java.ElementIdStrategy>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                idMaker(arg0: Java.Supplier): Java.ElementIdStrategy$Builder;
                idMakerP(arg0: Java.Supplier): Promise<Java.ElementIdStrategy$Builder>;
                idPropertyKey(arg0: string_t): Java.ElementIdStrategy$Builder;
                idPropertyKeyP(arg0: string_t): Promise<Java.ElementIdStrategy$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ElementIdStrategy$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
            interface EventStrategy extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module EventStrategy {
                interface Static {
                    build(): Java.EventStrategy$Builder;
                    buildP(): Promise<Java.EventStrategy$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
            interface EventStrategy$Builder extends Java.java.lang.Object {
                addListener(arg0: object_t): Java.EventStrategy$Builder;
                addListenerP(arg0: object_t): Promise<Java.EventStrategy$Builder>;
                create(): Java.EventStrategy;
                createP(): Promise<Java.EventStrategy>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module EventStrategy$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
            interface EventStrategy$EventStrategyCallback extends Java.java.lang.Object, Java.java.util.function_.Consumer {
                accept(arg0: object_t): void;
                acceptP(arg0: object_t): Promise<void>;
                accept(arg0: object_t): void;
                acceptP(arg0: object_t): Promise<void>;
                andThen(arg0: Java.Consumer): Java.Consumer;
                andThenP(arg0: Java.Consumer): Promise<Java.Consumer>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module EventStrategy$EventStrategyCallback {
                interface Static {
                    new (arg0: Java.EventStrategy, arg1: object_t): org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.EventStrategy$EventStrategyCallback;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
            interface PartitionStrategy extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getPartitionKey(): string;
                getPartitionKeyP(): Promise<string>;
                getReadPartitions(): Java.Set;
                getReadPartitionsP(): Promise<Java.Set>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
                getWritePartition(): string;
                getWritePartitionP(): Promise<string>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module PartitionStrategy {
                interface Static {
                    build(): Java.PartitionStrategy$Builder;
                    buildP(): Promise<Java.PartitionStrategy$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
            interface PartitionStrategy$Builder extends Java.java.lang.Object {
                addReadPartition(arg0: string_t): Java.PartitionStrategy$Builder;
                addReadPartitionP(arg0: string_t): Promise<Java.PartitionStrategy$Builder>;
                create(): Java.PartitionStrategy;
                createP(): Promise<Java.PartitionStrategy>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                partitionKey(arg0: string_t): Java.PartitionStrategy$Builder;
                partitionKeyP(arg0: string_t): Promise<Java.PartitionStrategy$Builder>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                writePartition(arg0: string_t): Java.PartitionStrategy$Builder;
                writePartitionP(arg0: string_t): Promise<Java.PartitionStrategy$Builder>;
            }
            module PartitionStrategy$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
            interface SubgraphStrategy extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$DecorationStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getEdgeCriterion(): Java.Traversal;
                getEdgeCriterionP(): Promise<Java.Traversal>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
                getVertexCriterion(): Java.Traversal;
                getVertexCriterionP(): Promise<Java.Traversal>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module SubgraphStrategy {
                interface Static {
                    build(): Java.SubgraphStrategy$Builder;
                    buildP(): Promise<Java.SubgraphStrategy$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration {
            interface SubgraphStrategy$Builder extends Java.java.lang.Object {
                create(): Java.SubgraphStrategy;
                createP(): Promise<Java.SubgraphStrategy>;
                edgeCriterion(arg0: Java.Traversal): Java.SubgraphStrategy$Builder;
                edgeCriterionP(arg0: Java.Traversal): Promise<Java.SubgraphStrategy$Builder>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                vertexCriterion(arg0: Java.Traversal): Java.SubgraphStrategy$Builder;
                vertexCriterionP(arg0: Java.Traversal): Promise<Java.SubgraphStrategy$Builder>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module SubgraphStrategy$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.verification {
            interface ComputerVerificationException extends Java.java.lang.Object {
                addSuppressed(arg0: object_t): void;
                addSuppressedP(arg0: object_t): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                fillInStackTrace(): object_t;
                fillInStackTraceP(): Promise<object_t>;
                getCause(): object_t;
                getCauseP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getLocalizedMessage(): string;
                getLocalizedMessageP(): Promise<string>;
                getMessage(): string;
                getMessageP(): Promise<string>;
                getStackTrace(): object_t[];
                getStackTraceP(): Promise<object_t[]>;
                getSuppressed(): object_t[];
                getSuppressedP(): Promise<object_t[]>;
                getTraversal(): Java.Traversal;
                getTraversalP(): Promise<Java.Traversal>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                initCause(arg0: object_t): object_t;
                initCauseP(arg0: object_t): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                printStackTrace(arg0: object_t): void;
                printStackTraceP(arg0: object_t): Promise<void>;
                printStackTrace(arg0: object_t): void;
                printStackTraceP(arg0: object_t): Promise<void>;
                printStackTrace(): void;
                printStackTraceP(): Promise<void>;
                setStackTrace(arg0: object_array_t): void;
                setStackTraceP(arg0: object_array_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ComputerVerificationException {
                interface Static {
                    new (arg0: string_t, arg1: Java.Traversal): org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ComputerVerificationException;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.verification {
            interface ComputerVerificationStrategy extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ComputerVerificationStrategy {
                interface Static {
                    instance(): Java.ComputerVerificationStrategy;
                    instanceP(): Promise<Java.ComputerVerificationStrategy>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.verification {
            interface LambdaRestrictionStrategy extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module LambdaRestrictionStrategy {
                interface Static {
                    instance(): Java.LambdaRestrictionStrategy;
                    instanceP(): Promise<Java.LambdaRestrictionStrategy>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.strategy.verification {
            interface ReadOnlyStrategy extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy$VerificationStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ReadOnlyStrategy {
                interface Static {
                    instance(): Java.ReadOnlyStrategy;
                    instanceP(): Promise<Java.ReadOnlyStrategy>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Traversal extends Java.java.util.Iterator {
                asAdmin(): Java.Traversal$Admin;
                asAdminP(): Promise<Java.Traversal$Admin>;
                fill(arg0: Java.Collection): Java.Collection;
                fillP(arg0: Java.Collection): Promise<Java.Collection>;
                forEachRemaining(arg0: Java.Class, arg1: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Class, arg1: Java.Consumer): Promise<void>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                iterate(): Java.Traversal;
                iterateP(): Promise<Java.Traversal>;
                next(arg0: integer_t): Java.List;
                nextP(arg0: integer_t): Promise<Java.List>;
                next(): object_t;
                nextP(): Promise<object_t>;
                remove(): void;
                removeP(): Promise<void>;
                toBulkSet(): Java.BulkSet;
                toBulkSetP(): Promise<Java.BulkSet>;
                toList(): Java.List;
                toListP(): Promise<Java.List>;
                toSet(): Java.Set;
                toSetP(): Promise<Java.Set>;
                tryNext(): object_t;
                tryNextP(): Promise<object_t>;
            }
            module Traversal {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Traversal$Admin extends Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal {
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                addStep(arg0: integer_t, arg1: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: integer_t, arg1: Java.Step): Promise<Java.Traversal$Admin>;
                addStep(arg0: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                applyStrategies(): void;
                applyStrategiesP(): Promise<void>;
                asAdmin(): Java.Traversal$Admin;
                asAdminP(): Promise<Java.Traversal$Admin>;
                clone(): Java.Traversal$Admin;
                cloneP(): Promise<Java.Traversal$Admin>;
                equals(arg0: Java.Traversal$Admin): boolean;
                equalsP(arg0: Java.Traversal$Admin): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                fill(arg0: Java.Collection): Java.Collection;
                fillP(arg0: Java.Collection): Promise<Java.Collection>;
                forEachRemaining(arg0: Java.Class, arg1: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Class, arg1: Java.Consumer): Promise<void>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getEndStep(): Java.Step;
                getEndStepP(): Promise<Java.Step>;
                getEngine(): Java.TraversalEngine;
                getEngineP(): Promise<Java.TraversalEngine>;
                getGraph(): object_t;
                getGraphP(): Promise<object_t>;
                getParent(): object_t;
                getParentP(): Promise<object_t>;
                getSideEffects(): Java.TraversalSideEffects;
                getSideEffectsP(): Promise<Java.TraversalSideEffects>;
                getStartStep(): Java.Step;
                getStartStepP(): Promise<Java.Step>;
                getSteps(): Java.List;
                getStepsP(): Promise<Java.List>;
                getStrategies(): Java.TraversalStrategies;
                getStrategiesP(): Promise<Java.TraversalStrategies>;
                getTraverserGenerator(): Java.TraverserGenerator;
                getTraverserGeneratorP(): Promise<Java.TraverserGenerator>;
                getTraverserRequirements(): Java.Set;
                getTraverserRequirementsP(): Promise<Java.Set>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                isLocked(): boolean;
                isLockedP(): Promise<boolean>;
                iterate(): Java.Traversal;
                iterateP(): Promise<Java.Traversal>;
                next(arg0: integer_t): Java.List;
                nextP(arg0: integer_t): Promise<Java.List>;
                next(): object_t;
                nextP(): Promise<object_t>;
                remove(): void;
                removeP(): Promise<void>;
                removeStep(arg0: Java.Step): Java.Traversal$Admin;
                removeStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                removeStep(arg0: integer_t): Java.Traversal$Admin;
                removeStepP(arg0: integer_t): Promise<Java.Traversal$Admin>;
                reset(): void;
                resetP(): Promise<void>;
                setEngine(arg0: Java.TraversalEngine): void;
                setEngineP(arg0: Java.TraversalEngine): Promise<void>;
                setGraph(arg0: Java.Graph): void;
                setGraphP(arg0: Java.Graph): Promise<void>;
                setParent(arg0: object_t): void;
                setParentP(arg0: object_t): Promise<void>;
                setSideEffects(arg0: Java.TraversalSideEffects): void;
                setSideEffectsP(arg0: Java.TraversalSideEffects): Promise<void>;
                setStrategies(arg0: Java.TraversalStrategies): void;
                setStrategiesP(arg0: Java.TraversalStrategies): Promise<void>;
                toBulkSet(): Java.BulkSet;
                toBulkSetP(): Promise<Java.BulkSet>;
                toList(): Java.List;
                toListP(): Promise<Java.List>;
                toSet(): Java.Set;
                toSetP(): Promise<Java.Set>;
                tryNext(): object_t;
                tryNextP(): Promise<object_t>;
            }
            module Traversal$Admin {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Traversal$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Traversal$Exceptions {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.process.traversal.Traversal$Exceptions;
                    traversalIsLocked(): object_t;
                    traversalIsLockedP(): Promise<object_t>;
                    traversalIsNotReversible(): object_t;
                    traversalIsNotReversibleP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalEngine extends Java.java.lang.Object {
                getGraphComputer(): object_t;
                getGraphComputerP(): Promise<object_t>;
                getType(): Java.TraversalEngine$Type;
                getTypeP(): Promise<Java.TraversalEngine$Type>;
                isComputer(): boolean;
                isComputerP(): Promise<boolean>;
                isStandard(): boolean;
                isStandardP(): Promise<boolean>;
            }
            module TraversalEngine {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalEngine$Builder extends Java.java.lang.Object {
                create(arg0: Java.Graph): Java.TraversalEngine;
                createP(arg0: Java.Graph): Promise<Java.TraversalEngine>;
                getWithoutStrategies(): Java.List;
                getWithoutStrategiesP(): Promise<Java.List>;
                getWithStrategies(): Java.List;
                getWithStrategiesP(): Promise<Java.List>;
            }
            module TraversalEngine$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalEngine$Type extends Java.java.lang.Enum {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalEngine$Type {
                interface Static {
                    STANDARD: Java.TraversalEngine$Type;
                    COMPUTER: Java.TraversalEngine$Type;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.TraversalEngine$Type;
                    valueOfP(arg0: string_t): Promise<Java.TraversalEngine$Type>;
                    values(): Java.TraversalEngine$Type[];
                    valuesP(): Promise<Java.TraversalEngine$Type[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalSideEffects extends Java.java.lang.Object {
                clone(): Java.TraversalSideEffects;
                cloneP(): Promise<Java.TraversalSideEffects>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                getOrCreate(arg0: string_t, arg1: Java.Supplier): object_t;
                getOrCreateP(arg0: string_t, arg1: Java.Supplier): Promise<object_t>;
                getRegisteredSupplier(arg0: string_t): object_t;
                getRegisteredSupplierP(arg0: string_t): Promise<object_t>;
                getSackInitialValue(): object_t;
                getSackInitialValueP(): Promise<object_t>;
                getSackSplitOperator(): object_t;
                getSackSplitOperatorP(): Promise<object_t>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                mergeInto(arg0: Java.TraversalSideEffects): void;
                mergeIntoP(arg0: Java.TraversalSideEffects): Promise<void>;
                registerSupplier(arg0: string_t, arg1: Java.Supplier): void;
                registerSupplierP(arg0: string_t, arg1: Java.Supplier): Promise<void>;
                registerSupplierIfAbsent(arg0: string_t, arg1: Java.Supplier): void;
                registerSupplierIfAbsentP(arg0: string_t, arg1: Java.Supplier): Promise<void>;
                remove(arg0: string_t): void;
                removeP(arg0: string_t): Promise<void>;
                set(arg0: string_t, arg1: object_t): void;
                setP(arg0: string_t, arg1: object_t): Promise<void>;
                setLocalVertex(arg0: Java.Vertex): void;
                setLocalVertexP(arg0: Java.Vertex): Promise<void>;
                setSack(arg0: Java.Supplier, arg1: object_t): void;
                setSackP(arg0: Java.Supplier, arg1: object_t): Promise<void>;
            }
            module TraversalSideEffects {
                interface Static {
                    SIDE_EFFECTS: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalSideEffects$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalSideEffects$Exceptions {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects$Exceptions;
                    dataTypeOfSideEffectValueNotSupported(arg0: object_t): object_t;
                    dataTypeOfSideEffectValueNotSupportedP(arg0: object_t): Promise<object_t>;
                    sideEffectKeyCanNotBeEmpty(): object_t;
                    sideEffectKeyCanNotBeEmptyP(): Promise<object_t>;
                    sideEffectKeyCanNotBeNull(): object_t;
                    sideEffectKeyCanNotBeNullP(): Promise<object_t>;
                    sideEffectValueCanNotBeNull(): object_t;
                    sideEffectValueCanNotBeNullP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalSource extends Java.java.lang.Object {
                asBuilder(): Java.TraversalSource$Builder;
                asBuilderP(): Promise<Java.TraversalSource$Builder>;
                getGraph(): object_t;
                getGraphP(): Promise<object_t>;
                getGraphComputer(): object_t;
                getGraphComputerP(): Promise<object_t>;
                getStrategies(): Java.List;
                getStrategiesP(): Promise<Java.List>;
            }
            module TraversalSource {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalSource$Builder extends Java.java.lang.Object {
                create(arg0: Java.Graph): Java.TraversalSource;
                createP(arg0: Java.Graph): Promise<Java.TraversalSource>;
                engine(arg0: Java.TraversalEngine$Builder): Java.TraversalSource$Builder;
                engineP(arg0: Java.TraversalEngine$Builder): Promise<Java.TraversalSource$Builder>;
                with(arg0: Java.TraversalStrategy): Java.TraversalSource$Builder;
                withP(arg0: Java.TraversalStrategy): Promise<Java.TraversalSource$Builder>;
                without(arg0: Java.Class): Java.TraversalSource$Builder;
                withoutP(arg0: Java.Class): Promise<Java.TraversalSource$Builder>;
            }
            module TraversalSource$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalStrategies extends Java.java.lang.Object {
                addStrategies(...arg0: Java.TraversalStrategy[]): Java.TraversalStrategies;
                addStrategies(arg0: array_t<Java.TraversalStrategy>): Java.TraversalStrategies;
                addStrategiesP(...arg0: Java.TraversalStrategy[]): Promise<Java.TraversalStrategies>;
                addStrategiesP(arg0: array_t<Java.TraversalStrategy>): Promise<Java.TraversalStrategies>;
                applyStrategies(arg0: Java.Traversal$Admin): void;
                applyStrategiesP(arg0: Java.Traversal$Admin): Promise<void>;
                clone(): Java.TraversalStrategies;
                cloneP(): Promise<Java.TraversalStrategies>;
                getTraverserGeneratorFactory(): object_t;
                getTraverserGeneratorFactoryP(): Promise<object_t>;
                removeStrategies(...arg0: Java.Class[]): Java.TraversalStrategies;
                removeStrategies(arg0: array_t<Java.Class>): Java.TraversalStrategies;
                removeStrategiesP(...arg0: Java.Class[]): Promise<Java.TraversalStrategies>;
                removeStrategiesP(arg0: array_t<Java.Class>): Promise<Java.TraversalStrategies>;
                setTraverserGeneratorFactory(arg0: object_t): void;
                setTraverserGeneratorFactoryP(arg0: object_t): Promise<void>;
                toList(): Java.List;
                toListP(): Promise<Java.List>;
            }
            module TraversalStrategies {
                interface Static {
                    STRATEGY_CATEGORIES: Java.List;
                    sortStrategies(arg0: Java.List): Java.List;
                    sortStrategiesP(arg0: Java.List): Promise<Java.List>;
                    visit(arg0: Java.Map, arg1: Java.List, arg2: Java.Set, arg3: Java.List, arg4: Java.Class): void;
                    visitP(arg0: Java.Map, arg1: Java.List, arg2: Java.Set, arg3: Java.List, arg4: Java.Class): Promise<void>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalStrategies$GlobalCache extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalStrategies$GlobalCache {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies$GlobalCache;
                    getStrategies(arg0: Java.Class): Java.TraversalStrategies;
                    getStrategiesP(arg0: Java.Class): Promise<Java.TraversalStrategies>;
                    registerStrategies(arg0: Java.Class, arg1: Java.TraversalStrategies): void;
                    registerStrategiesP(arg0: Java.Class, arg1: Java.TraversalStrategies): Promise<void>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalStrategy extends Java.java.lang.Object {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
            }
            module TraversalStrategy {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalStrategy$DecorationStrategy extends Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
            }
            module TraversalStrategy$DecorationStrategy {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalStrategy$FinalizationStrategy extends Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
            }
            module TraversalStrategy$FinalizationStrategy {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalStrategy$OptimizationStrategy extends Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
            }
            module TraversalStrategy$OptimizationStrategy {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalStrategy$VendorOptimizationStrategy extends Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
            }
            module TraversalStrategy$VendorOptimizationStrategy {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraversalStrategy$VerificationStrategy extends Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategy {
                apply(arg0: Java.Traversal$Admin): void;
                applyP(arg0: Java.Traversal$Admin): Promise<void>;
                applyPost(): Java.Set;
                applyPostP(): Promise<Java.Set>;
                applyPrior(): Java.Set;
                applyPriorP(): Promise<Java.Set>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Class): number;
                compareToP(arg0: Java.Class): Promise<number>;
                getTraversalCategory(): Java.Class;
                getTraversalCategoryP(): Promise<Java.Class>;
            }
            module TraversalStrategy$VerificationStrategy {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Traverser extends Java.java.lang.Object {
                asAdmin(): Java.Traverser$Admin;
                asAdminP(): Promise<Java.Traverser$Admin>;
                bulk(): longValue_t;
                bulkP(): Promise<longValue_t>;
                clone(): Java.Traverser;
                cloneP(): Promise<Java.Traverser>;
                compareTo(arg0: Java.Traverser): number;
                compareToP(arg0: Java.Traverser): Promise<number>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                get(): object_t;
                getP(): Promise<object_t>;
                loops(): number;
                loopsP(): Promise<number>;
                path(arg0: string_t): object_t;
                pathP(arg0: string_t): Promise<object_t>;
                path(): Java.Path;
                pathP(): Promise<Java.Path>;
                sack(arg0: object_t): void;
                sackP(arg0: object_t): Promise<void>;
                sack(): object_t;
                sackP(): Promise<object_t>;
                sideEffects(arg0: string_t, arg1: object_t): void;
                sideEffectsP(arg0: string_t, arg1: object_t): Promise<void>;
                sideEffects(arg0: string_t): object_t;
                sideEffectsP(arg0: string_t): Promise<object_t>;
            }
            module Traverser {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface Traverser$Admin extends Java.org.apache.tinkerpop.gremlin.process.traversal.Traverser, Java.org.apache.tinkerpop.gremlin.structure.util.Attachable {
                asAdmin(): Java.Traverser$Admin;
                asAdminP(): Promise<Java.Traverser$Admin>;
                attach(arg0: Java.Function): object_t;
                attachP(arg0: Java.Function): Promise<object_t>;
                bulk(): longValue_t;
                bulkP(): Promise<longValue_t>;
                clone(): Java.Traverser;
                cloneP(): Promise<Java.Traverser>;
                compareTo(arg0: Java.Traverser): number;
                compareToP(arg0: Java.Traverser): Promise<number>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                detach(): Java.Traverser$Admin;
                detachP(): Promise<Java.Traverser$Admin>;
                get(): object_t;
                getP(): Promise<object_t>;
                getSideEffects(): Java.TraversalSideEffects;
                getSideEffectsP(): Promise<Java.TraversalSideEffects>;
                getStepId(): string;
                getStepIdP(): Promise<string>;
                incrLoops(arg0: string_t): void;
                incrLoopsP(arg0: string_t): Promise<void>;
                isHalted(): boolean;
                isHaltedP(): Promise<boolean>;
                loops(): number;
                loopsP(): Promise<number>;
                merge(arg0: Java.Traverser$Admin): void;
                mergeP(arg0: Java.Traverser$Admin): Promise<void>;
                path(arg0: string_t): object_t;
                pathP(arg0: string_t): Promise<object_t>;
                path(): Java.Path;
                pathP(): Promise<Java.Path>;
                resetLoops(): void;
                resetLoopsP(): Promise<void>;
                sack(arg0: object_t): void;
                sackP(arg0: object_t): Promise<void>;
                sack(): object_t;
                sackP(): Promise<object_t>;
                set(arg0: object_t): void;
                setP(arg0: object_t): Promise<void>;
                setBulk(arg0: long_t): void;
                setBulkP(arg0: long_t): Promise<void>;
                setSideEffects(arg0: Java.TraversalSideEffects): void;
                setSideEffectsP(arg0: Java.TraversalSideEffects): Promise<void>;
                setStepId(arg0: string_t): void;
                setStepIdP(arg0: string_t): Promise<void>;
                sideEffects(arg0: string_t, arg1: object_t): void;
                sideEffectsP(arg0: string_t, arg1: object_t): Promise<void>;
                sideEffects(arg0: string_t): object_t;
                sideEffectsP(arg0: string_t): Promise<object_t>;
                split(arg0: object_t, arg1: Java.Step): Java.Traverser$Admin;
                splitP(arg0: object_t, arg1: Java.Step): Promise<Java.Traverser$Admin>;
                split(): Java.Traverser$Admin;
                splitP(): Promise<Java.Traverser$Admin>;
            }
            module Traverser$Admin {
                interface Static {
                    HALT: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal {
            interface TraverserGenerator extends Java.java.lang.Object {
                generate(arg0: object_t, arg1: Java.Step, arg2: long_t): Java.Traverser$Admin;
                generateP(arg0: object_t, arg1: Java.Step, arg2: long_t): Promise<Java.Traverser$Admin>;
                generateIterator(arg0: Java.Iterator, arg1: Java.Step, arg2: long_t): Java.Iterator;
                generateIteratorP(arg0: Java.Iterator, arg1: Java.Step, arg2: long_t): Promise<Java.Iterator>;
                getProvidedRequirements(): Java.Set;
                getProvidedRequirementsP(): Promise<Java.Set>;
            }
            module TraverserGenerator {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface AndP extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP {
                and(arg0: Java.Traversal): Java.P;
                andP(arg0: Java.Traversal): Promise<Java.P>;
                and(arg0: Java.Predicate): Java.P;
                andP(arg0: Java.Predicate): Promise<Java.P>;
                and(arg0: Java.Predicate): Java.Predicate;
                andP(arg0: Java.Predicate): Promise<Java.Predicate>;
                clone(): Java.ConjunctionP;
                cloneP(): Promise<Java.ConjunctionP>;
                clone(): Java.AndP;
                cloneP(): Promise<Java.AndP>;
                clone(): Java.P;
                cloneP(): Promise<Java.P>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getBiPredicate(): Java.BiPredicate;
                getBiPredicateP(): Promise<Java.BiPredicate>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getPredicates(): Java.List;
                getPredicatesP(): Promise<Java.List>;
                getTraversals(): Java.List;
                getTraversalsP(): Promise<Java.List>;
                getValue(): object_t;
                getValueP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                negate(): Java.P;
                negateP(): Promise<Java.P>;
                negate(): Java.Predicate;
                negateP(): Promise<Java.Predicate>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                or(arg0: Java.Traversal): Java.P;
                orP(arg0: Java.Traversal): Promise<Java.P>;
                or(arg0: Java.Predicate): Java.P;
                orP(arg0: Java.Predicate): Promise<Java.P>;
                or(arg0: Java.Predicate): Java.Predicate;
                orP(arg0: Java.Predicate): Promise<Java.Predicate>;
                setValue(arg0: object_t): void;
                setValueP(arg0: object_t): Promise<void>;
                test(arg0: object_t): boolean;
                testP(arg0: object_t): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module AndP {
                interface Static {
                    new (arg0: Java.P, ...arg1: Java.P[]): org.apache.tinkerpop.gremlin.process.traversal.util.AndP;
                    between(arg0: object_t, arg1: object_t): Java.P;
                    betweenP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    eq(arg0: object_t): Java.P;
                    eqP(arg0: object_t): Promise<Java.P>;
                    gt(arg0: object_t): Java.P;
                    gtP(arg0: object_t): Promise<Java.P>;
                    gte(arg0: object_t): Java.P;
                    gteP(arg0: object_t): Promise<Java.P>;
                    inside(arg0: object_t, arg1: object_t): Java.P;
                    insideP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    lt(arg0: object_t): Java.P;
                    ltP(arg0: object_t): Promise<Java.P>;
                    lte(arg0: object_t): Java.P;
                    lteP(arg0: object_t): Promise<Java.P>;
                    neq(arg0: object_t): Java.P;
                    neqP(arg0: object_t): Promise<Java.P>;
                    not(arg0: Java.Traversal): Java.P;
                    notP(arg0: Java.Traversal): Promise<Java.P>;
                    not(arg0: Java.P): Java.P;
                    notP(arg0: Java.P): Promise<Java.P>;
                    outside(arg0: object_t, arg1: object_t): Java.P;
                    outsideP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    test(arg0: Java.BiPredicate, arg1: object_t): Java.P;
                    testP(arg0: Java.BiPredicate, arg1: object_t): Promise<Java.P>;
                    traversal(arg0: Java.Traversal): Java.P;
                    traversalP(arg0: Java.Traversal): Promise<Java.P>;
                    within(arg0: Java.Collection): Java.P;
                    withinP(arg0: Java.Collection): Promise<Java.P>;
                    within(...arg0: object_t[]): Java.P;
                    within(arg0: object_array_t): Java.P;
                    withinP(...arg0: object_t[]): Promise<Java.P>;
                    withinP(arg0: object_array_t): Promise<Java.P>;
                    without(arg0: Java.Collection): Java.P;
                    withoutP(arg0: Java.Collection): Promise<Java.P>;
                    without(...arg0: object_t[]): Java.P;
                    without(arg0: object_array_t): Java.P;
                    withoutP(...arg0: object_t[]): Promise<Java.P>;
                    withoutP(arg0: object_array_t): Promise<Java.P>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface ConjunctionP extends Java.org.apache.tinkerpop.gremlin.process.traversal.P {
                and(arg0: Java.Traversal): Java.P;
                andP(arg0: Java.Traversal): Promise<Java.P>;
                and(arg0: Java.Predicate): Java.P;
                andP(arg0: Java.Predicate): Promise<Java.P>;
                and(arg0: Java.Predicate): Java.Predicate;
                andP(arg0: Java.Predicate): Promise<Java.Predicate>;
                clone(): Java.ConjunctionP;
                cloneP(): Promise<Java.ConjunctionP>;
                clone(): Java.P;
                cloneP(): Promise<Java.P>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getBiPredicate(): Java.BiPredicate;
                getBiPredicateP(): Promise<Java.BiPredicate>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getPredicates(): Java.List;
                getPredicatesP(): Promise<Java.List>;
                getTraversals(): Java.List;
                getTraversalsP(): Promise<Java.List>;
                getValue(): object_t;
                getValueP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                negate(): Java.P;
                negateP(): Promise<Java.P>;
                negate(): Java.Predicate;
                negateP(): Promise<Java.Predicate>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                or(arg0: Java.Traversal): Java.P;
                orP(arg0: Java.Traversal): Promise<Java.P>;
                or(arg0: Java.Predicate): Java.P;
                orP(arg0: Java.Predicate): Promise<Java.P>;
                or(arg0: Java.Predicate): Java.Predicate;
                orP(arg0: Java.Predicate): Promise<Java.Predicate>;
                setValue(arg0: object_t): void;
                setValueP(arg0: object_t): Promise<void>;
                test(arg0: object_t): boolean;
                testP(arg0: object_t): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ConjunctionP {
                interface Static {
                    new (arg0: Java.P, ...arg1: Java.P[]): org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP;
                    between(arg0: object_t, arg1: object_t): Java.P;
                    betweenP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    eq(arg0: object_t): Java.P;
                    eqP(arg0: object_t): Promise<Java.P>;
                    gt(arg0: object_t): Java.P;
                    gtP(arg0: object_t): Promise<Java.P>;
                    gte(arg0: object_t): Java.P;
                    gteP(arg0: object_t): Promise<Java.P>;
                    inside(arg0: object_t, arg1: object_t): Java.P;
                    insideP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    lt(arg0: object_t): Java.P;
                    ltP(arg0: object_t): Promise<Java.P>;
                    lte(arg0: object_t): Java.P;
                    lteP(arg0: object_t): Promise<Java.P>;
                    neq(arg0: object_t): Java.P;
                    neqP(arg0: object_t): Promise<Java.P>;
                    not(arg0: Java.Traversal): Java.P;
                    notP(arg0: Java.Traversal): Promise<Java.P>;
                    not(arg0: Java.P): Java.P;
                    notP(arg0: Java.P): Promise<Java.P>;
                    outside(arg0: object_t, arg1: object_t): Java.P;
                    outsideP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    test(arg0: Java.BiPredicate, arg1: object_t): Java.P;
                    testP(arg0: Java.BiPredicate, arg1: object_t): Promise<Java.P>;
                    traversal(arg0: Java.Traversal): Java.P;
                    traversalP(arg0: Java.Traversal): Promise<Java.P>;
                    within(arg0: Java.Collection): Java.P;
                    withinP(arg0: Java.Collection): Promise<Java.P>;
                    within(...arg0: object_t[]): Java.P;
                    within(arg0: object_array_t): Java.P;
                    withinP(...arg0: object_t[]): Promise<Java.P>;
                    withinP(arg0: object_array_t): Promise<Java.P>;
                    without(arg0: Java.Collection): Java.P;
                    withoutP(arg0: Java.Collection): Promise<Java.P>;
                    without(...arg0: object_t[]): Java.P;
                    without(arg0: object_array_t): Java.P;
                    withoutP(...arg0: object_t[]): Promise<Java.P>;
                    withoutP(arg0: object_array_t): Promise<Java.P>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface DefaultTraversal extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin {
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                addStep(arg0: integer_t, arg1: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: integer_t, arg1: Java.Step): Promise<Java.Traversal$Admin>;
                addStep(arg0: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                applyStrategies(): void;
                applyStrategiesP(): Promise<void>;
                asAdmin(): Java.Traversal$Admin;
                asAdminP(): Promise<Java.Traversal$Admin>;
                clone(): Java.DefaultTraversal;
                cloneP(): Promise<Java.DefaultTraversal>;
                clone(): Java.Traversal$Admin;
                cloneP(): Promise<Java.Traversal$Admin>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: Java.Traversal$Admin): boolean;
                equalsP(arg0: Java.Traversal$Admin): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                fill(arg0: Java.Collection): Java.Collection;
                fillP(arg0: Java.Collection): Promise<Java.Collection>;
                forEachRemaining(arg0: Java.Class, arg1: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Class, arg1: Java.Consumer): Promise<void>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getEndStep(): Java.Step;
                getEndStepP(): Promise<Java.Step>;
                getEngine(): Java.TraversalEngine;
                getEngineP(): Promise<Java.TraversalEngine>;
                getGraph(): object_t;
                getGraphP(): Promise<object_t>;
                getParent(): object_t;
                getParentP(): Promise<object_t>;
                getSideEffects(): Java.TraversalSideEffects;
                getSideEffectsP(): Promise<Java.TraversalSideEffects>;
                getStartStep(): Java.Step;
                getStartStepP(): Promise<Java.Step>;
                getSteps(): Java.List;
                getStepsP(): Promise<Java.List>;
                getStrategies(): Java.TraversalStrategies;
                getStrategiesP(): Promise<Java.TraversalStrategies>;
                getTraverserGenerator(): Java.TraverserGenerator;
                getTraverserGeneratorP(): Promise<Java.TraverserGenerator>;
                getTraverserRequirements(): Java.Set;
                getTraverserRequirementsP(): Promise<Java.Set>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                isLocked(): boolean;
                isLockedP(): Promise<boolean>;
                iterate(): Java.Traversal;
                iterateP(): Promise<Java.Traversal>;
                next(arg0: integer_t): Java.List;
                nextP(arg0: integer_t): Promise<Java.List>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                remove(): void;
                removeP(): Promise<void>;
                removeStep(arg0: Java.Step): Java.Traversal$Admin;
                removeStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                removeStep(arg0: integer_t): Java.Traversal$Admin;
                removeStepP(arg0: integer_t): Promise<Java.Traversal$Admin>;
                reset(): void;
                resetP(): Promise<void>;
                setEngine(arg0: Java.TraversalEngine): void;
                setEngineP(arg0: Java.TraversalEngine): Promise<void>;
                setGraph(arg0: Java.Graph): void;
                setGraphP(arg0: Java.Graph): Promise<void>;
                setParent(arg0: object_t): void;
                setParentP(arg0: object_t): Promise<void>;
                setSideEffects(arg0: Java.TraversalSideEffects): void;
                setSideEffectsP(arg0: Java.TraversalSideEffects): Promise<void>;
                setStrategies(arg0: Java.TraversalStrategies): void;
                setStrategiesP(arg0: Java.TraversalStrategies): Promise<void>;
                toBulkSet(): Java.BulkSet;
                toBulkSetP(): Promise<Java.BulkSet>;
                toList(): Java.List;
                toListP(): Promise<Java.List>;
                toSet(): Java.Set;
                toSetP(): Promise<Java.Set>;
                toString(): string;
                toStringP(): Promise<string>;
                tryNext(): object_t;
                tryNextP(): Promise<object_t>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DefaultTraversal {
                interface Static {
                    new (arg0: Java.Graph): org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal;
                    new (): org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversal;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface DefaultTraversalSideEffects extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects {
                clone(): Java.DefaultTraversalSideEffects;
                cloneP(): Promise<Java.DefaultTraversalSideEffects>;
                clone(): Java.TraversalSideEffects;
                cloneP(): Promise<Java.TraversalSideEffects>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getOrCreate(arg0: string_t, arg1: Java.Supplier): object_t;
                getOrCreateP(arg0: string_t, arg1: Java.Supplier): Promise<object_t>;
                getRegisteredSupplier(arg0: string_t): object_t;
                getRegisteredSupplierP(arg0: string_t): Promise<object_t>;
                getSackInitialValue(): object_t;
                getSackInitialValueP(): Promise<object_t>;
                getSackSplitOperator(): object_t;
                getSackSplitOperatorP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                mergeInto(arg0: Java.TraversalSideEffects): void;
                mergeIntoP(arg0: Java.TraversalSideEffects): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                registerSupplier(arg0: string_t, arg1: Java.Supplier): void;
                registerSupplierP(arg0: string_t, arg1: Java.Supplier): Promise<void>;
                registerSupplierIfAbsent(arg0: string_t, arg1: Java.Supplier): void;
                registerSupplierIfAbsentP(arg0: string_t, arg1: Java.Supplier): Promise<void>;
                remove(arg0: string_t): void;
                removeP(arg0: string_t): Promise<void>;
                set(arg0: string_t, arg1: object_t): void;
                setP(arg0: string_t, arg1: object_t): Promise<void>;
                setLocalVertex(arg0: Java.Vertex): void;
                setLocalVertexP(arg0: Java.Vertex): Promise<void>;
                setSack(arg0: Java.Supplier, arg1: object_t): void;
                setSackP(arg0: Java.Supplier, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DefaultTraversalSideEffects {
                interface Static {
                    SIDE_EFFECTS: string;
                    new (): org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalSideEffects;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface DefaultTraversalStrategies extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies {
                addStrategies(...arg0: Java.TraversalStrategy[]): Java.TraversalStrategies;
                addStrategies(arg0: array_t<Java.TraversalStrategy>): Java.TraversalStrategies;
                addStrategiesP(...arg0: Java.TraversalStrategy[]): Promise<Java.TraversalStrategies>;
                addStrategiesP(arg0: array_t<Java.TraversalStrategy>): Promise<Java.TraversalStrategies>;
                applyStrategies(arg0: Java.Traversal$Admin): void;
                applyStrategiesP(arg0: Java.Traversal$Admin): Promise<void>;
                clone(): Java.DefaultTraversalStrategies;
                cloneP(): Promise<Java.DefaultTraversalStrategies>;
                clone(): Java.TraversalStrategies;
                cloneP(): Promise<Java.TraversalStrategies>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraverserGeneratorFactory(): object_t;
                getTraverserGeneratorFactoryP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                removeStrategies(...arg0: Java.Class[]): Java.TraversalStrategies;
                removeStrategies(arg0: array_t<Java.Class>): Java.TraversalStrategies;
                removeStrategiesP(...arg0: Java.Class[]): Promise<Java.TraversalStrategies>;
                removeStrategiesP(arg0: array_t<Java.Class>): Promise<Java.TraversalStrategies>;
                setTraverserGeneratorFactory(arg0: object_t): void;
                setTraverserGeneratorFactoryP(arg0: object_t): Promise<void>;
                toList(): Java.List;
                toListP(): Promise<Java.List>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DefaultTraversalStrategies {
                interface Static {
                    STRATEGY_CATEGORIES: Java.List;
                    new (): org.apache.tinkerpop.gremlin.process.traversal.util.DefaultTraversalStrategies;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface DependantMutableMetrics extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics {
                addNested(arg0: Java.MutableMetrics): void;
                addNestedP(arg0: Java.MutableMetrics): Promise<void>;
                aggregate(arg0: Java.MutableMetrics): void;
                aggregateP(arg0: Java.MutableMetrics): Promise<void>;
                clone(): Java.MutableMetrics;
                cloneP(): Promise<Java.MutableMetrics>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getAndResetIncrementalDur(): longValue_t;
                getAndResetIncrementalDurP(): Promise<longValue_t>;
                getAnnotation(arg0: string_t): object_t;
                getAnnotationP(arg0: string_t): Promise<object_t>;
                getAnnotations(): Java.Map;
                getAnnotationsP(): Promise<Java.Map>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getCount(arg0: string_t): longValue_t;
                getCountP(arg0: string_t): Promise<longValue_t>;
                getCounts(): Java.Map;
                getCountsP(): Promise<Java.Map>;
                getDuration(arg0: object_t): longValue_t;
                getDurationP(arg0: object_t): Promise<longValue_t>;
                getId(): string;
                getIdP(): Promise<string>;
                getImmutableClone(): Java.ImmutableMetrics;
                getImmutableCloneP(): Promise<Java.ImmutableMetrics>;
                getName(): string;
                getNameP(): Promise<string>;
                getNested(arg0: string_t): Java.ImmutableMetrics;
                getNestedP(arg0: string_t): Promise<Java.ImmutableMetrics>;
                getNested(arg0: string_t): Java.MutableMetrics;
                getNestedP(arg0: string_t): Promise<Java.MutableMetrics>;
                getNested(arg0: string_t): Java.Metrics;
                getNestedP(arg0: string_t): Promise<Java.Metrics>;
                getNested(): Java.Collection;
                getNestedP(): Promise<Java.Collection>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                incrementCount(arg0: string_t, arg1: long_t): void;
                incrementCountP(arg0: string_t, arg1: long_t): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setAnnotation(arg0: string_t, arg1: object_t): void;
                setAnnotationP(arg0: string_t, arg1: object_t): Promise<void>;
                start(): void;
                startP(): Promise<void>;
                stop(): void;
                stopP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DependantMutableMetrics {
                interface Static {
                    new (arg0: string_t, arg1: string_t, arg2: Java.DependantMutableMetrics): org.apache.tinkerpop.gremlin.process.traversal.util.DependantMutableMetrics;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface EmptyTraversal extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.Traversal$Admin {
                addStart(arg0: Java.Traverser): void;
                addStartP(arg0: Java.Traverser): Promise<void>;
                addStarts(arg0: Java.Iterator): void;
                addStartsP(arg0: Java.Iterator): Promise<void>;
                addStep(arg0: integer_t, arg1: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: integer_t, arg1: Java.Step): Promise<Java.Traversal$Admin>;
                addStep(arg0: Java.Step): Java.Traversal$Admin;
                addStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                applyStrategies(): void;
                applyStrategiesP(): Promise<void>;
                asAdmin(): Java.Traversal$Admin;
                asAdminP(): Promise<Java.Traversal$Admin>;
                clone(): Java.EmptyTraversal;
                cloneP(): Promise<Java.EmptyTraversal>;
                clone(): Java.Traversal$Admin;
                cloneP(): Promise<Java.Traversal$Admin>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: Java.Traversal$Admin): boolean;
                equalsP(arg0: Java.Traversal$Admin): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                fill(arg0: Java.Collection): Java.Collection;
                fillP(arg0: Java.Collection): Promise<Java.Collection>;
                forEachRemaining(arg0: Java.Class, arg1: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Class, arg1: Java.Consumer): Promise<void>;
                forEachRemaining(arg0: Java.Consumer): void;
                forEachRemainingP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getEndStep(): Java.Step;
                getEndStepP(): Promise<Java.Step>;
                getEngine(): Java.TraversalEngine;
                getEngineP(): Promise<Java.TraversalEngine>;
                getGraph(): object_t;
                getGraphP(): Promise<object_t>;
                getParent(): object_t;
                getParentP(): Promise<object_t>;
                getSideEffects(): Java.TraversalSideEffects;
                getSideEffectsP(): Promise<Java.TraversalSideEffects>;
                getStartStep(): Java.Step;
                getStartStepP(): Promise<Java.Step>;
                getSteps(): Java.List;
                getStepsP(): Promise<Java.List>;
                getStrategies(): Java.TraversalStrategies;
                getStrategiesP(): Promise<Java.TraversalStrategies>;
                getTraverserGenerator(): Java.TraverserGenerator;
                getTraverserGeneratorP(): Promise<Java.TraverserGenerator>;
                getTraverserRequirements(): Java.Set;
                getTraverserRequirementsP(): Promise<Java.Set>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasNext(): boolean;
                hasNextP(): Promise<boolean>;
                isLocked(): boolean;
                isLockedP(): Promise<boolean>;
                iterate(): Java.Traversal;
                iterateP(): Promise<Java.Traversal>;
                next(arg0: integer_t): Java.List;
                nextP(arg0: integer_t): Promise<Java.List>;
                next(): object_t;
                nextP(): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                remove(): void;
                removeP(): Promise<void>;
                removeStep(arg0: Java.Step): Java.Traversal$Admin;
                removeStepP(arg0: Java.Step): Promise<Java.Traversal$Admin>;
                removeStep(arg0: integer_t): Java.Traversal$Admin;
                removeStepP(arg0: integer_t): Promise<Java.Traversal$Admin>;
                reset(): void;
                resetP(): Promise<void>;
                setEngine(arg0: Java.TraversalEngine): void;
                setEngineP(arg0: Java.TraversalEngine): Promise<void>;
                setGraph(arg0: Java.Graph): void;
                setGraphP(arg0: Java.Graph): Promise<void>;
                setParent(arg0: object_t): void;
                setParentP(arg0: object_t): Promise<void>;
                setSideEffects(arg0: Java.TraversalSideEffects): void;
                setSideEffectsP(arg0: Java.TraversalSideEffects): Promise<void>;
                setStrategies(arg0: Java.TraversalStrategies): void;
                setStrategiesP(arg0: Java.TraversalStrategies): Promise<void>;
                toBulkSet(): Java.BulkSet;
                toBulkSetP(): Promise<Java.BulkSet>;
                toList(): Java.List;
                toListP(): Promise<Java.List>;
                toSet(): Java.Set;
                toSetP(): Promise<Java.Set>;
                toString(): string;
                toStringP(): Promise<string>;
                tryNext(): object_t;
                tryNextP(): Promise<object_t>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module EmptyTraversal {
                interface Static {
                    instance(): Java.EmptyTraversal;
                    instanceP(): Promise<Java.EmptyTraversal>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface EmptyTraversalSideEffects extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalSideEffects {
                clone(): Java.TraversalSideEffects;
                cloneP(): Promise<Java.TraversalSideEffects>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getOrCreate(arg0: string_t, arg1: Java.Supplier): object_t;
                getOrCreateP(arg0: string_t, arg1: Java.Supplier): Promise<object_t>;
                getRegisteredSupplier(arg0: string_t): object_t;
                getRegisteredSupplierP(arg0: string_t): Promise<object_t>;
                getSackInitialValue(): object_t;
                getSackInitialValueP(): Promise<object_t>;
                getSackSplitOperator(): object_t;
                getSackSplitOperatorP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                mergeInto(arg0: Java.TraversalSideEffects): void;
                mergeIntoP(arg0: Java.TraversalSideEffects): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                registerSupplier(arg0: string_t, arg1: Java.Supplier): void;
                registerSupplierP(arg0: string_t, arg1: Java.Supplier): Promise<void>;
                registerSupplierIfAbsent(arg0: string_t, arg1: Java.Supplier): void;
                registerSupplierIfAbsentP(arg0: string_t, arg1: Java.Supplier): Promise<void>;
                remove(arg0: string_t): void;
                removeP(arg0: string_t): Promise<void>;
                set(arg0: string_t, arg1: object_t): void;
                setP(arg0: string_t, arg1: object_t): Promise<void>;
                setLocalVertex(arg0: Java.Vertex): void;
                setLocalVertexP(arg0: Java.Vertex): Promise<void>;
                setSack(arg0: Java.Supplier, arg1: object_t): void;
                setSackP(arg0: Java.Supplier, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module EmptyTraversalSideEffects {
                interface Static {
                    SIDE_EFFECTS: string;
                    instance(): Java.EmptyTraversalSideEffects;
                    instanceP(): Promise<Java.EmptyTraversalSideEffects>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface EmptyTraversalStrategies extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.TraversalStrategies {
                addStrategies(...arg0: Java.TraversalStrategy[]): Java.TraversalStrategies;
                addStrategies(arg0: array_t<Java.TraversalStrategy>): Java.TraversalStrategies;
                addStrategiesP(...arg0: Java.TraversalStrategy[]): Promise<Java.TraversalStrategies>;
                addStrategiesP(arg0: array_t<Java.TraversalStrategy>): Promise<Java.TraversalStrategies>;
                applyStrategies(arg0: Java.Traversal$Admin): void;
                applyStrategiesP(arg0: Java.Traversal$Admin): Promise<void>;
                clone(): Java.TraversalStrategies;
                cloneP(): Promise<Java.TraversalStrategies>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraverserGeneratorFactory(): object_t;
                getTraverserGeneratorFactoryP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                removeStrategies(...arg0: Java.Class[]): Java.TraversalStrategies;
                removeStrategies(arg0: array_t<Java.Class>): Java.TraversalStrategies;
                removeStrategiesP(...arg0: Java.Class[]): Promise<Java.TraversalStrategies>;
                removeStrategiesP(arg0: array_t<Java.Class>): Promise<Java.TraversalStrategies>;
                setTraverserGeneratorFactory(arg0: object_t): void;
                setTraverserGeneratorFactoryP(arg0: object_t): Promise<void>;
                toList(): Java.List;
                toListP(): Promise<Java.List>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module EmptyTraversalStrategies {
                interface Static {
                    STRATEGY_CATEGORIES: Java.List;
                    instance(): Java.EmptyTraversalStrategies;
                    instanceP(): Promise<Java.EmptyTraversalStrategies>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface FastNoSuchElementException extends Java.java.util.NoSuchElementException {
                addSuppressed(arg0: object_t): void;
                addSuppressedP(arg0: object_t): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                fillInStackTrace(): object_t;
                fillInStackTraceP(): Promise<object_t>;
                getCause(): object_t;
                getCauseP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getLocalizedMessage(): string;
                getLocalizedMessageP(): Promise<string>;
                getMessage(): string;
                getMessageP(): Promise<string>;
                getStackTrace(): object_t[];
                getStackTraceP(): Promise<object_t[]>;
                getSuppressed(): object_t[];
                getSuppressedP(): Promise<object_t[]>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                initCause(arg0: object_t): object_t;
                initCauseP(arg0: object_t): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                printStackTrace(arg0: object_t): void;
                printStackTraceP(arg0: object_t): Promise<void>;
                printStackTrace(arg0: object_t): void;
                printStackTraceP(arg0: object_t): Promise<void>;
                printStackTrace(): void;
                printStackTraceP(): Promise<void>;
                setStackTrace(arg0: object_array_t): void;
                setStackTraceP(arg0: object_array_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module FastNoSuchElementException {
                interface Static {
                    instance(): Java.NoSuchElementException;
                    instanceP(): Promise<Java.NoSuchElementException>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface ImmutableMetrics extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.util.Metrics {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getAnnotation(arg0: string_t): object_t;
                getAnnotationP(arg0: string_t): Promise<object_t>;
                getAnnotations(): Java.Map;
                getAnnotationsP(): Promise<Java.Map>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getCount(arg0: string_t): longValue_t;
                getCountP(arg0: string_t): Promise<longValue_t>;
                getCounts(): Java.Map;
                getCountsP(): Promise<Java.Map>;
                getDuration(arg0: object_t): longValue_t;
                getDurationP(arg0: object_t): Promise<longValue_t>;
                getId(): string;
                getIdP(): Promise<string>;
                getName(): string;
                getNameP(): Promise<string>;
                getNested(arg0: string_t): Java.ImmutableMetrics;
                getNestedP(arg0: string_t): Promise<Java.ImmutableMetrics>;
                getNested(arg0: string_t): Java.Metrics;
                getNestedP(arg0: string_t): Promise<Java.Metrics>;
                getNested(): Java.Collection;
                getNestedP(): Promise<Java.Collection>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ImmutableMetrics {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface Metrics extends Java.java.lang.Object {
                getAnnotation(arg0: string_t): object_t;
                getAnnotationP(arg0: string_t): Promise<object_t>;
                getAnnotations(): Java.Map;
                getAnnotationsP(): Promise<Java.Map>;
                getCount(arg0: string_t): longValue_t;
                getCountP(arg0: string_t): Promise<longValue_t>;
                getCounts(): Java.Map;
                getCountsP(): Promise<Java.Map>;
                getDuration(arg0: object_t): longValue_t;
                getDurationP(arg0: object_t): Promise<longValue_t>;
                getId(): string;
                getIdP(): Promise<string>;
                getName(): string;
                getNameP(): Promise<string>;
                getNested(arg0: string_t): Java.Metrics;
                getNestedP(arg0: string_t): Promise<Java.Metrics>;
                getNested(): Java.Collection;
                getNestedP(): Promise<Java.Collection>;
            }
            module Metrics {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface MutableMetrics extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.ImmutableMetrics {
                addNested(arg0: Java.MutableMetrics): void;
                addNestedP(arg0: Java.MutableMetrics): Promise<void>;
                aggregate(arg0: Java.MutableMetrics): void;
                aggregateP(arg0: Java.MutableMetrics): Promise<void>;
                clone(): Java.MutableMetrics;
                cloneP(): Promise<Java.MutableMetrics>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getAnnotation(arg0: string_t): object_t;
                getAnnotationP(arg0: string_t): Promise<object_t>;
                getAnnotations(): Java.Map;
                getAnnotationsP(): Promise<Java.Map>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getCount(arg0: string_t): longValue_t;
                getCountP(arg0: string_t): Promise<longValue_t>;
                getCounts(): Java.Map;
                getCountsP(): Promise<Java.Map>;
                getDuration(arg0: object_t): longValue_t;
                getDurationP(arg0: object_t): Promise<longValue_t>;
                getId(): string;
                getIdP(): Promise<string>;
                getImmutableClone(): Java.ImmutableMetrics;
                getImmutableCloneP(): Promise<Java.ImmutableMetrics>;
                getName(): string;
                getNameP(): Promise<string>;
                getNested(arg0: string_t): Java.ImmutableMetrics;
                getNestedP(arg0: string_t): Promise<Java.ImmutableMetrics>;
                getNested(arg0: string_t): Java.MutableMetrics;
                getNestedP(arg0: string_t): Promise<Java.MutableMetrics>;
                getNested(arg0: string_t): Java.Metrics;
                getNestedP(arg0: string_t): Promise<Java.Metrics>;
                getNested(): Java.Collection;
                getNestedP(): Promise<Java.Collection>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                incrementCount(arg0: string_t, arg1: long_t): void;
                incrementCountP(arg0: string_t, arg1: long_t): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setAnnotation(arg0: string_t, arg1: object_t): void;
                setAnnotationP(arg0: string_t, arg1: object_t): Promise<void>;
                start(): void;
                startP(): Promise<void>;
                stop(): void;
                stopP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MutableMetrics {
                interface Static {
                    new (arg0: string_t, arg1: string_t): org.apache.tinkerpop.gremlin.process.traversal.util.MutableMetrics;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface OrP extends Java.org.apache.tinkerpop.gremlin.process.traversal.util.ConjunctionP {
                and(arg0: Java.Traversal): Java.P;
                andP(arg0: Java.Traversal): Promise<Java.P>;
                and(arg0: Java.Predicate): Java.P;
                andP(arg0: Java.Predicate): Promise<Java.P>;
                and(arg0: Java.Predicate): Java.Predicate;
                andP(arg0: Java.Predicate): Promise<Java.Predicate>;
                clone(): Java.ConjunctionP;
                cloneP(): Promise<Java.ConjunctionP>;
                clone(): Java.OrP;
                cloneP(): Promise<Java.OrP>;
                clone(): Java.P;
                cloneP(): Promise<Java.P>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getBiPredicate(): Java.BiPredicate;
                getBiPredicateP(): Promise<Java.BiPredicate>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getPredicates(): Java.List;
                getPredicatesP(): Promise<Java.List>;
                getTraversals(): Java.List;
                getTraversalsP(): Promise<Java.List>;
                getValue(): object_t;
                getValueP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                negate(): Java.P;
                negateP(): Promise<Java.P>;
                negate(): Java.Predicate;
                negateP(): Promise<Java.Predicate>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                or(arg0: Java.Traversal): Java.P;
                orP(arg0: Java.Traversal): Promise<Java.P>;
                or(arg0: Java.Predicate): Java.P;
                orP(arg0: Java.Predicate): Promise<Java.P>;
                or(arg0: Java.Predicate): Java.Predicate;
                orP(arg0: Java.Predicate): Promise<Java.Predicate>;
                setValue(arg0: object_t): void;
                setValueP(arg0: object_t): Promise<void>;
                test(arg0: object_t): boolean;
                testP(arg0: object_t): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module OrP {
                interface Static {
                    new (arg0: Java.P, ...arg1: Java.P[]): org.apache.tinkerpop.gremlin.process.traversal.util.OrP;
                    between(arg0: object_t, arg1: object_t): Java.P;
                    betweenP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    eq(arg0: object_t): Java.P;
                    eqP(arg0: object_t): Promise<Java.P>;
                    gt(arg0: object_t): Java.P;
                    gtP(arg0: object_t): Promise<Java.P>;
                    gte(arg0: object_t): Java.P;
                    gteP(arg0: object_t): Promise<Java.P>;
                    inside(arg0: object_t, arg1: object_t): Java.P;
                    insideP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    lt(arg0: object_t): Java.P;
                    ltP(arg0: object_t): Promise<Java.P>;
                    lte(arg0: object_t): Java.P;
                    lteP(arg0: object_t): Promise<Java.P>;
                    neq(arg0: object_t): Java.P;
                    neqP(arg0: object_t): Promise<Java.P>;
                    not(arg0: Java.Traversal): Java.P;
                    notP(arg0: Java.Traversal): Promise<Java.P>;
                    not(arg0: Java.P): Java.P;
                    notP(arg0: Java.P): Promise<Java.P>;
                    outside(arg0: object_t, arg1: object_t): Java.P;
                    outsideP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    test(arg0: Java.BiPredicate, arg1: object_t): Java.P;
                    testP(arg0: Java.BiPredicate, arg1: object_t): Promise<Java.P>;
                    traversal(arg0: Java.Traversal): Java.P;
                    traversalP(arg0: Java.Traversal): Promise<Java.P>;
                    within(arg0: Java.Collection): Java.P;
                    withinP(arg0: Java.Collection): Promise<Java.P>;
                    within(...arg0: object_t[]): Java.P;
                    within(arg0: object_array_t): Java.P;
                    withinP(...arg0: object_t[]): Promise<Java.P>;
                    withinP(arg0: object_array_t): Promise<Java.P>;
                    without(arg0: Java.Collection): Java.P;
                    withoutP(arg0: Java.Collection): Promise<Java.P>;
                    without(...arg0: object_t[]): Java.P;
                    without(arg0: object_array_t): Java.P;
                    withoutP(...arg0: object_t[]): Promise<Java.P>;
                    withoutP(arg0: object_array_t): Promise<Java.P>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface SideEffectHelper extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module SideEffectHelper {
                interface Static {
                    validateSideEffect(arg0: string_t, arg1: object_t): void;
                    validateSideEffectP(arg0: string_t, arg1: object_t): Promise<void>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface StandardTraversalMetrics extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMetrics {
                addMetrics(arg0: Java.MutableMetrics, arg1: string_t, arg2: integer_t, arg3: boolean_t, arg4: string_t): void;
                addMetricsP(arg0: Java.MutableMetrics, arg1: string_t, arg2: integer_t, arg3: boolean_t, arg4: string_t): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                finish(arg0: string_t, arg1: long_t): void;
                finishP(arg0: string_t, arg1: long_t): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDuration(arg0: object_t): longValue_t;
                getDurationP(arg0: object_t): Promise<longValue_t>;
                getMetrics(arg0: string_t): Java.Metrics;
                getMetricsP(arg0: string_t): Promise<Java.Metrics>;
                getMetrics(arg0: integer_t): Java.Metrics;
                getMetricsP(arg0: integer_t): Promise<Java.Metrics>;
                getMetrics(): Java.Collection;
                getMetricsP(): Promise<Java.Collection>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                start(arg0: string_t): void;
                startP(arg0: string_t): Promise<void>;
                stop(arg0: string_t): void;
                stopP(arg0: string_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module StandardTraversalMetrics {
                interface Static {
                    METRICS_KEY: string;
                    ELEMENT_COUNT_ID: string;
                    TRAVERSER_COUNT_ID: string;
                    PERCENT_DURATION_KEY: string;
                    new (): org.apache.tinkerpop.gremlin.process.traversal.util.StandardTraversalMetrics;
                    merge(arg0: Java.Iterator): Java.StandardTraversalMetrics;
                    mergeP(arg0: Java.Iterator): Promise<Java.StandardTraversalMetrics>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface StepPosition extends Java.java.lang.Object {
                x: number;
                y: number;
                z: number;
                parentId: string;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                nextXId(): string;
                nextXIdP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module StepPosition {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.process.traversal.util.StepPosition;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface TraversalClassFunction extends Java.java.lang.Object, Java.java.util.function_.Function {
                andThen(arg0: Java.Function): Java.Function;
                andThenP(arg0: Java.Function): Promise<Java.Function>;
                apply(arg0: Java.Graph): Java.Traversal$Admin;
                applyP(arg0: Java.Graph): Promise<Java.Traversal$Admin>;
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
                compose(arg0: Java.Function): Java.Function;
                composeP(arg0: Java.Function): Promise<Java.Function>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalClassFunction {
                interface Static {
                    new (arg0: Java.Class): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalClassFunction;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface TraversalHelper extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalHelper {
                interface Static {
                    addToCollection(arg0: Java.Collection, arg1: object_t, arg2: long_t): void;
                    addToCollectionP(arg0: Java.Collection, arg1: object_t, arg2: long_t): Promise<void>;
                    addToCollectionUnrollIterator(arg0: Java.Collection, arg1: object_t, arg2: long_t): void;
                    addToCollectionUnrollIteratorP(arg0: Java.Collection, arg1: object_t, arg2: long_t): Promise<void>;
                    getLastStepOfAssignableClass(arg0: Java.Class, arg1: Java.Traversal$Admin): object_t;
                    getLastStepOfAssignableClassP(arg0: Java.Class, arg1: Java.Traversal$Admin): Promise<object_t>;
                    getRootTraversal(arg0: Java.Traversal$Admin): Java.Traversal$Admin;
                    getRootTraversalP(arg0: Java.Traversal$Admin): Promise<Java.Traversal$Admin>;
                    getShortName(arg0: Java.Step, arg1: integer_t): string;
                    getShortNameP(arg0: Java.Step, arg1: integer_t): Promise<string>;
                    getStepsOfAssignableClass(arg0: Java.Class, arg1: Java.Traversal$Admin): Java.List;
                    getStepsOfAssignableClassP(arg0: Java.Class, arg1: Java.Traversal$Admin): Promise<Java.List>;
                    getStepsOfAssignableClassRecursively(arg0: Java.Class, arg1: Java.Traversal$Admin): Java.List;
                    getStepsOfAssignableClassRecursivelyP(arg0: Java.Class, arg1: Java.Traversal$Admin): Promise<Java.List>;
                    getStepsOfClass(arg0: Java.Class, arg1: Java.Traversal$Admin): Java.List;
                    getStepsOfClassP(arg0: Java.Class, arg1: Java.Traversal$Admin): Promise<Java.List>;
                    hasStepOfAssignableClass(arg0: Java.Class, arg1: Java.Traversal$Admin): boolean;
                    hasStepOfAssignableClassP(arg0: Java.Class, arg1: Java.Traversal$Admin): Promise<boolean>;
                    hasStepOfAssignableClassRecursively(arg0: Java.Collection, arg1: Java.Traversal$Admin): boolean;
                    hasStepOfAssignableClassRecursivelyP(arg0: Java.Collection, arg1: Java.Traversal$Admin): Promise<boolean>;
                    hasStepOfAssignableClassRecursively(arg0: Java.Class, arg1: Java.Traversal$Admin): boolean;
                    hasStepOfAssignableClassRecursivelyP(arg0: Java.Class, arg1: Java.Traversal$Admin): Promise<boolean>;
                    hasStepOfClass(arg0: Java.Class, arg1: Java.Traversal$Admin): boolean;
                    hasStepOfClassP(arg0: Java.Class, arg1: Java.Traversal$Admin): Promise<boolean>;
                    insertAfterStep(arg0: Java.Step, arg1: Java.Step, arg2: Java.Traversal$Admin): void;
                    insertAfterStepP(arg0: Java.Step, arg1: Java.Step, arg2: Java.Traversal$Admin): Promise<void>;
                    insertBeforeStep(arg0: Java.Step, arg1: Java.Step, arg2: Java.Traversal$Admin): void;
                    insertBeforeStepP(arg0: Java.Step, arg1: Java.Step, arg2: Java.Traversal$Admin): Promise<void>;
                    insertTraversal(arg0: Java.Step, arg1: Java.Traversal$Admin, arg2: Java.Traversal$Admin): Java.Step;
                    insertTraversalP(arg0: Java.Step, arg1: Java.Traversal$Admin, arg2: Java.Traversal$Admin): Promise<Java.Step>;
                    insertTraversal(arg0: integer_t, arg1: Java.Traversal$Admin, arg2: Java.Traversal$Admin): Java.Step;
                    insertTraversalP(arg0: integer_t, arg1: Java.Traversal$Admin, arg2: Java.Traversal$Admin): Promise<Java.Step>;
                    isLocalStarGraph(arg0: Java.Traversal$Admin): boolean;
                    isLocalStarGraphP(arg0: Java.Traversal$Admin): Promise<boolean>;
                    reIdSteps(arg0: Java.StepPosition, arg1: Java.Traversal$Admin): void;
                    reIdStepsP(arg0: Java.StepPosition, arg1: Java.Traversal$Admin): Promise<void>;
                    replaceStep(arg0: Java.Step, arg1: Java.Step, arg2: Java.Traversal$Admin): void;
                    replaceStepP(arg0: Java.Step, arg1: Java.Step, arg2: Java.Traversal$Admin): Promise<void>;
                    stepIndex(arg0: Java.Step, arg1: Java.Traversal$Admin): number;
                    stepIndexP(arg0: Java.Step, arg1: Java.Traversal$Admin): Promise<number>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface TraversalMatrix extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getStepById(arg0: string_t): Java.Step;
                getStepByIdP(arg0: string_t): Promise<Java.Step>;
                getTraversal(): Java.Traversal$Admin;
                getTraversalP(): Promise<Java.Traversal$Admin>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalMatrix {
                interface Static {
                    new (arg0: Java.Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalMatrix;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface TraversalMetrics extends Java.java.lang.Object {
                getDuration(arg0: object_t): longValue_t;
                getDurationP(arg0: object_t): Promise<longValue_t>;
                getMetrics(arg0: string_t): Java.Metrics;
                getMetricsP(arg0: string_t): Promise<Java.Metrics>;
                getMetrics(arg0: integer_t): Java.Metrics;
                getMetricsP(arg0: integer_t): Promise<Java.Metrics>;
                getMetrics(): Java.Collection;
                getMetricsP(): Promise<Java.Collection>;
            }
            module TraversalMetrics {
                interface Static {
                    METRICS_KEY: string;
                    ELEMENT_COUNT_ID: string;
                    TRAVERSER_COUNT_ID: string;
                    PERCENT_DURATION_KEY: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface TraversalObjectFunction extends Java.java.lang.Object, Java.java.util.function_.Function {
                andThen(arg0: Java.Function): Java.Function;
                andThenP(arg0: Java.Function): Promise<Java.Function>;
                apply(arg0: Java.Graph): Java.Traversal$Admin;
                applyP(arg0: Java.Graph): Promise<Java.Traversal$Admin>;
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
                compose(arg0: Java.Function): Java.Function;
                composeP(arg0: Java.Function): Promise<Java.Function>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalObjectFunction {
                interface Static {
                    new (arg0: Java.Traversal$Admin): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalObjectFunction;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface TraversalP extends Java.org.apache.tinkerpop.gremlin.process.traversal.P {
                and(arg0: Java.Traversal): Java.P;
                andP(arg0: Java.Traversal): Promise<Java.P>;
                and(arg0: Java.Predicate): Java.P;
                andP(arg0: Java.Predicate): Promise<Java.P>;
                and(arg0: Java.Predicate): Java.Predicate;
                andP(arg0: Java.Predicate): Promise<Java.Predicate>;
                clone(): Java.TraversalP;
                cloneP(): Promise<Java.TraversalP>;
                clone(): Java.P;
                cloneP(): Promise<Java.P>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getBiPredicate(): Java.BiPredicate;
                getBiPredicateP(): Promise<Java.BiPredicate>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraversals(): Java.List;
                getTraversalsP(): Promise<Java.List>;
                getValue(): object_t;
                getValueP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                negate(): Java.TraversalP;
                negateP(): Promise<Java.TraversalP>;
                negate(): Java.P;
                negateP(): Promise<Java.P>;
                negate(): Java.Predicate;
                negateP(): Promise<Java.Predicate>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                or(arg0: Java.Traversal): Java.P;
                orP(arg0: Java.Traversal): Promise<Java.P>;
                or(arg0: Java.Predicate): Java.P;
                orP(arg0: Java.Predicate): Promise<Java.P>;
                or(arg0: Java.Predicate): Java.Predicate;
                orP(arg0: Java.Predicate): Promise<Java.Predicate>;
                setValue(arg0: object_t): void;
                setValueP(arg0: object_t): Promise<void>;
                test(arg0: object_t): boolean;
                testP(arg0: object_t): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalP {
                interface Static {
                    new (arg0: Java.Traversal$Admin, arg1: object_t, arg2: boolean_t): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP;
                    new (arg0: Java.Traversal$Admin, arg1: boolean_t): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalP;
                    andTraversals(...arg0: Java.Traversal[]): Java.P;
                    andTraversals(arg0: array_t<Java.Traversal>): Java.P;
                    andTraversalsP(...arg0: Java.Traversal[]): Promise<Java.P>;
                    andTraversalsP(arg0: array_t<Java.Traversal>): Promise<Java.P>;
                    between(arg0: object_t, arg1: object_t): Java.P;
                    betweenP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    eq(arg0: object_t): Java.P;
                    eqP(arg0: object_t): Promise<Java.P>;
                    gt(arg0: object_t): Java.P;
                    gtP(arg0: object_t): Promise<Java.P>;
                    gte(arg0: object_t): Java.P;
                    gteP(arg0: object_t): Promise<Java.P>;
                    inside(arg0: object_t, arg1: object_t): Java.P;
                    insideP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    lt(arg0: object_t): Java.P;
                    ltP(arg0: object_t): Promise<Java.P>;
                    lte(arg0: object_t): Java.P;
                    lteP(arg0: object_t): Promise<Java.P>;
                    neq(arg0: object_t): Java.P;
                    neqP(arg0: object_t): Promise<Java.P>;
                    not(arg0: Java.Traversal): Java.P;
                    notP(arg0: Java.Traversal): Promise<Java.P>;
                    not(arg0: Java.P): Java.P;
                    notP(arg0: Java.P): Promise<Java.P>;
                    orTraversals(...arg0: Java.Traversal[]): Java.P;
                    orTraversals(arg0: array_t<Java.Traversal>): Java.P;
                    orTraversalsP(...arg0: Java.Traversal[]): Promise<Java.P>;
                    orTraversalsP(arg0: array_t<Java.Traversal>): Promise<Java.P>;
                    outside(arg0: object_t, arg1: object_t): Java.P;
                    outsideP(arg0: object_t, arg1: object_t): Promise<Java.P>;
                    test(arg0: Java.BiPredicate, arg1: object_t): Java.P;
                    testP(arg0: Java.BiPredicate, arg1: object_t): Promise<Java.P>;
                    traversal(arg0: Java.Traversal): Java.P;
                    traversalP(arg0: Java.Traversal): Promise<Java.P>;
                    within(arg0: Java.Collection): Java.P;
                    withinP(arg0: Java.Collection): Promise<Java.P>;
                    within(...arg0: object_t[]): Java.P;
                    within(arg0: object_array_t): Java.P;
                    withinP(...arg0: object_t[]): Promise<Java.P>;
                    withinP(arg0: object_array_t): Promise<Java.P>;
                    without(arg0: Java.Collection): Java.P;
                    withoutP(arg0: Java.Collection): Promise<Java.P>;
                    without(...arg0: object_t[]): Java.P;
                    without(arg0: object_array_t): Java.P;
                    withoutP(...arg0: object_t[]): Promise<Java.P>;
                    withoutP(arg0: object_array_t): Promise<Java.P>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface TraversalRing extends Java.java.lang.Object {
                addTraversal(arg0: Java.Traversal$Admin): void;
                addTraversalP(arg0: Java.Traversal$Admin): Promise<void>;
                clone(): Java.TraversalRing;
                cloneP(): Promise<Java.TraversalRing>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getTraversals(): Java.List;
                getTraversalsP(): Promise<Java.List>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isEmpty(): boolean;
                isEmptyP(): Promise<boolean>;
                next(): Java.Traversal$Admin;
                nextP(): Promise<Java.Traversal$Admin>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reset(): void;
                resetP(): Promise<void>;
                size(): number;
                sizeP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalRing {
                interface Static {
                    new (...arg0: Java.Traversal$Admin[]): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalRing;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface TraversalScriptFunction extends Java.java.lang.Object, Java.java.util.function_.Function {
                andThen(arg0: Java.Function): Java.Function;
                andThenP(arg0: Java.Function): Promise<Java.Function>;
                apply(arg0: Java.Graph): Java.Traversal$Admin;
                applyP(arg0: Java.Graph): Promise<Java.Traversal$Admin>;
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
                compose(arg0: Java.Function): Java.Function;
                composeP(arg0: Java.Function): Promise<Java.Function>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalScriptFunction {
                interface Static {
                    new (arg0: Java.TraversalSource$Builder, arg1: string_t, arg2: string_t, ...arg3: object_t[]): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalScriptFunction;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface TraversalScriptHelper extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalScriptHelper {
                interface Static {
                    compute(arg0: Java.Graph, arg1: Java.TraversalSource$Builder, arg2: string_t, arg3: string_t, ...arg4: object_t[]): Java.Traversal$Admin;
                    compute(arg0: Java.Graph, arg1: Java.TraversalSource$Builder, arg2: string_t, arg3: string_t, arg4: object_array_t): Java.Traversal$Admin;
                    computeP(arg0: Java.Graph, arg1: Java.TraversalSource$Builder, arg2: string_t, arg3: string_t, ...arg4: object_t[]): Promise<Java.Traversal$Admin>;
                    computeP(arg0: Java.Graph, arg1: Java.TraversalSource$Builder, arg2: string_t, arg3: string_t, arg4: object_array_t): Promise<Java.Traversal$Admin>;
                    compute(arg0: string_t, arg1: Java.GraphTraversalSource, ...arg2: object_t[]): Java.Traversal$Admin;
                    compute(arg0: string_t, arg1: Java.GraphTraversalSource, arg2: object_array_t): Java.Traversal$Admin;
                    computeP(arg0: string_t, arg1: Java.GraphTraversalSource, ...arg2: object_t[]): Promise<Java.Traversal$Admin>;
                    computeP(arg0: string_t, arg1: Java.GraphTraversalSource, arg2: object_array_t): Promise<Java.Traversal$Admin>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface TraversalUtil extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalUtil {
                interface Static {
                    apply(arg0: Java.Traverser$Admin, arg1: Java.Traversal$Admin): object_t;
                    applyP(arg0: Java.Traverser$Admin, arg1: Java.Traversal$Admin): Promise<object_t>;
                    apply(arg0: object_t, arg1: Java.Traversal$Admin): object_t;
                    applyP(arg0: object_t, arg1: Java.Traversal$Admin): Promise<object_t>;
                    applyNullable(arg0: Java.Traverser$Admin, arg1: Java.Traversal$Admin): object_t;
                    applyNullableP(arg0: Java.Traverser$Admin, arg1: Java.Traversal$Admin): Promise<object_t>;
                    applyNullable(arg0: object_t, arg1: Java.Traversal$Admin): object_t;
                    applyNullableP(arg0: object_t, arg1: Java.Traversal$Admin): Promise<object_t>;
                    test(arg0: Java.TraversalUtil$Multiple, arg1: Java.Traversal$Admin, arg2: Java.TraversalUtil$Multiple): boolean;
                    testP(arg0: Java.TraversalUtil$Multiple, arg1: Java.Traversal$Admin, arg2: Java.TraversalUtil$Multiple): Promise<boolean>;
                    test(arg0: Java.Traverser$Admin, arg1: Java.Traversal$Admin, arg2: object_t): boolean;
                    testP(arg0: Java.Traverser$Admin, arg1: Java.Traversal$Admin, arg2: object_t): Promise<boolean>;
                    test(arg0: object_t, arg1: Java.Traversal$Admin, arg2: object_t): boolean;
                    testP(arg0: object_t, arg1: Java.Traversal$Admin, arg2: object_t): Promise<boolean>;
                    test(arg0: Java.TraversalUtil$Multiple, arg1: Java.Traversal$Admin): boolean;
                    testP(arg0: Java.TraversalUtil$Multiple, arg1: Java.Traversal$Admin): Promise<boolean>;
                    test(arg0: Java.Traverser$Admin, arg1: Java.Traversal$Admin): boolean;
                    testP(arg0: Java.Traverser$Admin, arg1: Java.Traversal$Admin): Promise<boolean>;
                    test(arg0: object_t, arg1: Java.Traversal$Admin): boolean;
                    testP(arg0: object_t, arg1: Java.Traversal$Admin): Promise<boolean>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.process.traversal.util {
            interface TraversalUtil$Multiple extends Java.java.lang.Object, Java.java.lang.Iterable {
                contains(arg0: object_t): boolean;
                containsP(arg0: object_t): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                spliterator(): object_t;
                spliteratorP(): Promise<object_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TraversalUtil$Multiple {
                interface Static {
                    new (arg0: Java.Collection): org.apache.tinkerpop.gremlin.process.traversal.util.TraversalUtil$Multiple;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Direction extends Java.java.lang.Enum {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                opposite(): Java.Direction;
                oppositeP(): Promise<Java.Direction>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Direction {
                interface Static {
                    OUT: Java.Direction;
                    IN: Java.Direction;
                    BOTH: Java.Direction;
                    proper: Java.Direction[];
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.Direction;
                    valueOfP(arg0: string_t): Promise<Java.Direction>;
                    values(): Java.Direction[];
                    valuesP(): Promise<Java.Direction[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Edge extends Java.org.apache.tinkerpop.gremlin.structure.Element {
                bothVertices(): Java.Iterator;
                bothVerticesP(): Promise<Java.Iterator>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                id(): object_t;
                idP(): Promise<object_t>;
                inVertex(): Java.Vertex;
                inVertexP(): Promise<Java.Vertex>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                outVertex(): Java.Vertex;
                outVertexP(): Promise<Java.Vertex>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                vertices(arg0: Java.Direction): Java.Iterator;
                verticesP(arg0: Java.Direction): Promise<Java.Iterator>;
            }
            module Edge {
                interface Static {
                    DEFAULT_LABEL: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Edge$Exceptions extends Java.org.apache.tinkerpop.gremlin.structure.Element$Exceptions {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Edge$Exceptions {
                interface Static {
                    edgeRemovalNotSupported(): object_t;
                    edgeRemovalNotSupportedP(): Promise<object_t>;
                    elementAlreadyRemoved(arg0: Java.Class, arg1: object_t): object_t;
                    elementAlreadyRemovedP(arg0: Java.Class, arg1: object_t): Promise<object_t>;
                    labelCanNotBeAHiddenKey(arg0: string_t): object_t;
                    labelCanNotBeAHiddenKeyP(arg0: string_t): Promise<object_t>;
                    labelCanNotBeEmpty(): object_t;
                    labelCanNotBeEmptyP(): Promise<object_t>;
                    labelCanNotBeNull(): object_t;
                    labelCanNotBeNullP(): Promise<object_t>;
                    propertyAdditionNotSupported(): object_t;
                    propertyAdditionNotSupportedP(): Promise<object_t>;
                    providedKeyValuesMustBeAMultipleOfTwo(): object_t;
                    providedKeyValuesMustBeAMultipleOfTwoP(): Promise<object_t>;
                    providedKeyValuesMustHaveALegalKeyOnEvenIndices(): object_t;
                    providedKeyValuesMustHaveALegalKeyOnEvenIndicesP(): Promise<object_t>;
                    userSuppliedIdsNotSupported(): object_t;
                    userSuppliedIdsNotSupportedP(): Promise<object_t>;
                    userSuppliedIdsOfThisTypeNotSupported(): object_t;
                    userSuppliedIdsOfThisTypeNotSupportedP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Element extends Java.java.lang.Object {
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                id(): object_t;
                idP(): Promise<object_t>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
            }
            module Element {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Element$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Element$Exceptions {
                interface Static {
                    elementAlreadyRemoved(arg0: Java.Class, arg1: object_t): object_t;
                    elementAlreadyRemovedP(arg0: Java.Class, arg1: object_t): Promise<object_t>;
                    labelCanNotBeAHiddenKey(arg0: string_t): object_t;
                    labelCanNotBeAHiddenKeyP(arg0: string_t): Promise<object_t>;
                    labelCanNotBeEmpty(): object_t;
                    labelCanNotBeEmptyP(): Promise<object_t>;
                    labelCanNotBeNull(): object_t;
                    labelCanNotBeNullP(): Promise<object_t>;
                    propertyAdditionNotSupported(): object_t;
                    propertyAdditionNotSupportedP(): Promise<object_t>;
                    providedKeyValuesMustBeAMultipleOfTwo(): object_t;
                    providedKeyValuesMustBeAMultipleOfTwoP(): Promise<object_t>;
                    providedKeyValuesMustHaveALegalKeyOnEvenIndices(): object_t;
                    providedKeyValuesMustHaveALegalKeyOnEvenIndicesP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph extends Java.org.apache.tinkerpop.gremlin.structure.util.Host {
                addVertex(...arg0: object_t[]): Java.Vertex;
                addVertex(arg0: object_array_t): Java.Vertex;
                addVertexP(...arg0: object_t[]): Promise<Java.Vertex>;
                addVertexP(arg0: object_array_t): Promise<Java.Vertex>;
                addVertex(arg0: string_t): Java.Vertex;
                addVertexP(arg0: string_t): Promise<Java.Vertex>;
                close(): void;
                closeP(): Promise<void>;
                compute(arg0: Java.Class): Java.GraphComputer;
                computeP(arg0: Java.Class): Promise<Java.GraphComputer>;
                compute(): Java.GraphComputer;
                computeP(): Promise<Java.GraphComputer>;
                configuration(): object_t;
                configurationP(): Promise<object_t>;
                edges(...arg0: object_t[]): Java.Iterator;
                edges(arg0: object_array_t): Java.Iterator;
                edgesP(...arg0: object_t[]): Promise<Java.Iterator>;
                edgesP(arg0: object_array_t): Promise<Java.Iterator>;
                features(): Java.Graph$Features;
                featuresP(): Promise<Java.Graph$Features>;
                io(arg0: Java.Io$Builder): Java.Io;
                ioP(arg0: Java.Io$Builder): Promise<Java.Io>;
                traversal(arg0: Java.TraversalSource$Builder): Java.TraversalSource;
                traversalP(arg0: Java.TraversalSource$Builder): Promise<Java.TraversalSource>;
                traversal(): Java.GraphTraversalSource;
                traversalP(): Promise<Java.GraphTraversalSource>;
                tx(): Java.Transaction;
                txP(): Promise<Java.Transaction>;
                variables(): Java.Graph$Variables;
                variablesP(): Promise<Java.Graph$Variables>;
                vertices(...arg0: object_t[]): Java.Iterator;
                vertices(arg0: object_array_t): Java.Iterator;
                verticesP(...arg0: object_t[]): Promise<Java.Iterator>;
                verticesP(arg0: object_array_t): Promise<Java.Iterator>;
            }
            module Graph {
                interface Static {
                    GRAPH: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Graph$Exceptions {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.Graph$Exceptions;
                    argumentCanNotBeNull(arg0: string_t): object_t;
                    argumentCanNotBeNullP(arg0: string_t): Promise<object_t>;
                    edgeWithIdAlreadyExists(arg0: object_t): object_t;
                    edgeWithIdAlreadyExistsP(arg0: object_t): Promise<object_t>;
                    elementNotFound(arg0: Java.Class, arg1: object_t): Java.NoSuchElementException;
                    elementNotFoundP(arg0: Java.Class, arg1: object_t): Promise<Java.NoSuchElementException>;
                    graphComputerNotSupported(): object_t;
                    graphComputerNotSupportedP(): Promise<object_t>;
                    graphDoesNotSupportProvidedGraphComputer(arg0: Java.Class): object_t;
                    graphDoesNotSupportProvidedGraphComputerP(arg0: Java.Class): Promise<object_t>;
                    idArgsMustBeEitherIdOrElement(): object_t;
                    idArgsMustBeEitherIdOrElementP(): Promise<object_t>;
                    transactionsNotSupported(): object_t;
                    transactionsNotSupportedP(): Promise<object_t>;
                    traversalEngineNotSupported(arg0: Java.TraversalEngine): object_t;
                    traversalEngineNotSupportedP(arg0: Java.TraversalEngine): Promise<object_t>;
                    variablesNotSupported(): object_t;
                    variablesNotSupportedP(): Promise<object_t>;
                    vertexAdditionsNotSupported(): object_t;
                    vertexAdditionsNotSupportedP(): Promise<object_t>;
                    vertexWithIdAlreadyExists(arg0: object_t): object_t;
                    vertexWithIdAlreadyExistsP(arg0: object_t): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Features extends Java.java.lang.Object {
                edge(): Java.Graph$Features$EdgeFeatures;
                edgeP(): Promise<Java.Graph$Features$EdgeFeatures>;
                graph(): Java.Graph$Features$GraphFeatures;
                graphP(): Promise<Java.Graph$Features$GraphFeatures>;
                supports(arg0: Java.Class, arg1: string_t): boolean;
                supportsP(arg0: Java.Class, arg1: string_t): Promise<boolean>;
                vertex(): Java.Graph$Features$VertexFeatures;
                vertexP(): Promise<Java.Graph$Features$VertexFeatures>;
            }
            module Graph$Features {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Features$DataTypeFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet {
                supportsBooleanArrayValues(): boolean;
                supportsBooleanArrayValuesP(): Promise<boolean>;
                supportsBooleanValues(): boolean;
                supportsBooleanValuesP(): Promise<boolean>;
                supportsByteArrayValues(): boolean;
                supportsByteArrayValuesP(): Promise<boolean>;
                supportsByteValues(): boolean;
                supportsByteValuesP(): Promise<boolean>;
                supportsDoubleArrayValues(): boolean;
                supportsDoubleArrayValuesP(): Promise<boolean>;
                supportsDoubleValues(): boolean;
                supportsDoubleValuesP(): Promise<boolean>;
                supportsFloatArrayValues(): boolean;
                supportsFloatArrayValuesP(): Promise<boolean>;
                supportsFloatValues(): boolean;
                supportsFloatValuesP(): Promise<boolean>;
                supportsIntegerArrayValues(): boolean;
                supportsIntegerArrayValuesP(): Promise<boolean>;
                supportsIntegerValues(): boolean;
                supportsIntegerValuesP(): Promise<boolean>;
                supportsLongArrayValues(): boolean;
                supportsLongArrayValuesP(): Promise<boolean>;
                supportsLongValues(): boolean;
                supportsLongValuesP(): Promise<boolean>;
                supportsMapValues(): boolean;
                supportsMapValuesP(): Promise<boolean>;
                supportsMixedListValues(): boolean;
                supportsMixedListValuesP(): Promise<boolean>;
                supportsSerializableValues(): boolean;
                supportsSerializableValuesP(): Promise<boolean>;
                supportsStringArrayValues(): boolean;
                supportsStringArrayValuesP(): Promise<boolean>;
                supportsStringValues(): boolean;
                supportsStringValuesP(): Promise<boolean>;
                supportsUniformListValues(): boolean;
                supportsUniformListValuesP(): Promise<boolean>;
            }
            module Graph$Features$DataTypeFeatures {
                interface Static {
                    FEATURE_BOOLEAN_VALUES: string;
                    FEATURE_BYTE_VALUES: string;
                    FEATURE_DOUBLE_VALUES: string;
                    FEATURE_FLOAT_VALUES: string;
                    FEATURE_INTEGER_VALUES: string;
                    FEATURE_LONG_VALUES: string;
                    FEATURE_MAP_VALUES: string;
                    FEATURE_MIXED_LIST_VALUES: string;
                    FEATURE_BOOLEAN_ARRAY_VALUES: string;
                    FEATURE_BYTE_ARRAY_VALUES: string;
                    FEATURE_DOUBLE_ARRAY_VALUES: string;
                    FEATURE_FLOAT_ARRAY_VALUES: string;
                    FEATURE_INTEGER_ARRAY_VALUES: string;
                    FEATURE_LONG_ARRAY_VALUES: string;
                    FEATURE_SERIALIZABLE_VALUES: string;
                    FEATURE_STRING_ARRAY_VALUES: string;
                    FEATURE_STRING_VALUES: string;
                    FEATURE_UNIFORM_LIST_VALUES: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Features$EdgeFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures {
                properties(): Java.Graph$Features$EdgePropertyFeatures;
                propertiesP(): Promise<Java.Graph$Features$EdgePropertyFeatures>;
                supportsAddEdges(): boolean;
                supportsAddEdgesP(): Promise<boolean>;
                supportsAddProperty(): boolean;
                supportsAddPropertyP(): Promise<boolean>;
                supportsAnyIds(): boolean;
                supportsAnyIdsP(): Promise<boolean>;
                supportsCustomIds(): boolean;
                supportsCustomIdsP(): Promise<boolean>;
                supportsNumericIds(): boolean;
                supportsNumericIdsP(): Promise<boolean>;
                supportsRemoveEdges(): boolean;
                supportsRemoveEdgesP(): Promise<boolean>;
                supportsRemoveProperty(): boolean;
                supportsRemovePropertyP(): Promise<boolean>;
                supportsStringIds(): boolean;
                supportsStringIdsP(): Promise<boolean>;
                supportsUserSuppliedIds(): boolean;
                supportsUserSuppliedIdsP(): Promise<boolean>;
                supportsUuidIds(): boolean;
                supportsUuidIdsP(): Promise<boolean>;
            }
            module Graph$Features$EdgeFeatures {
                interface Static {
                    FEATURE_ADD_EDGES: string;
                    FEATURE_REMOVE_EDGES: string;
                    FEATURE_USER_SUPPLIED_IDS: string;
                    FEATURE_NUMERIC_IDS: string;
                    FEATURE_STRING_IDS: string;
                    FEATURE_UUID_IDS: string;
                    FEATURE_CUSTOM_IDS: string;
                    FEATURE_ANY_IDS: string;
                    FEATURE_ADD_PROPERTY: string;
                    FEATURE_REMOVE_PROPERTY: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Features$EdgePropertyFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures {
                supportsBooleanArrayValues(): boolean;
                supportsBooleanArrayValuesP(): Promise<boolean>;
                supportsBooleanValues(): boolean;
                supportsBooleanValuesP(): Promise<boolean>;
                supportsByteArrayValues(): boolean;
                supportsByteArrayValuesP(): Promise<boolean>;
                supportsByteValues(): boolean;
                supportsByteValuesP(): Promise<boolean>;
                supportsDoubleArrayValues(): boolean;
                supportsDoubleArrayValuesP(): Promise<boolean>;
                supportsDoubleValues(): boolean;
                supportsDoubleValuesP(): Promise<boolean>;
                supportsFloatArrayValues(): boolean;
                supportsFloatArrayValuesP(): Promise<boolean>;
                supportsFloatValues(): boolean;
                supportsFloatValuesP(): Promise<boolean>;
                supportsIntegerArrayValues(): boolean;
                supportsIntegerArrayValuesP(): Promise<boolean>;
                supportsIntegerValues(): boolean;
                supportsIntegerValuesP(): Promise<boolean>;
                supportsLongArrayValues(): boolean;
                supportsLongArrayValuesP(): Promise<boolean>;
                supportsLongValues(): boolean;
                supportsLongValuesP(): Promise<boolean>;
                supportsMapValues(): boolean;
                supportsMapValuesP(): Promise<boolean>;
                supportsMixedListValues(): boolean;
                supportsMixedListValuesP(): Promise<boolean>;
                supportsProperties(): boolean;
                supportsPropertiesP(): Promise<boolean>;
                supportsSerializableValues(): boolean;
                supportsSerializableValuesP(): Promise<boolean>;
                supportsStringArrayValues(): boolean;
                supportsStringArrayValuesP(): Promise<boolean>;
                supportsStringValues(): boolean;
                supportsStringValuesP(): Promise<boolean>;
                supportsUniformListValues(): boolean;
                supportsUniformListValuesP(): Promise<boolean>;
            }
            module Graph$Features$EdgePropertyFeatures {
                interface Static {
                    FEATURE_PROPERTIES: string;
                    FEATURE_BOOLEAN_VALUES: string;
                    FEATURE_BYTE_VALUES: string;
                    FEATURE_DOUBLE_VALUES: string;
                    FEATURE_FLOAT_VALUES: string;
                    FEATURE_INTEGER_VALUES: string;
                    FEATURE_LONG_VALUES: string;
                    FEATURE_MAP_VALUES: string;
                    FEATURE_MIXED_LIST_VALUES: string;
                    FEATURE_BOOLEAN_ARRAY_VALUES: string;
                    FEATURE_BYTE_ARRAY_VALUES: string;
                    FEATURE_DOUBLE_ARRAY_VALUES: string;
                    FEATURE_FLOAT_ARRAY_VALUES: string;
                    FEATURE_INTEGER_ARRAY_VALUES: string;
                    FEATURE_LONG_ARRAY_VALUES: string;
                    FEATURE_SERIALIZABLE_VALUES: string;
                    FEATURE_STRING_ARRAY_VALUES: string;
                    FEATURE_STRING_VALUES: string;
                    FEATURE_UNIFORM_LIST_VALUES: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Features$ElementFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet {
                supportsAddProperty(): boolean;
                supportsAddPropertyP(): Promise<boolean>;
                supportsAnyIds(): boolean;
                supportsAnyIdsP(): Promise<boolean>;
                supportsCustomIds(): boolean;
                supportsCustomIdsP(): Promise<boolean>;
                supportsNumericIds(): boolean;
                supportsNumericIdsP(): Promise<boolean>;
                supportsRemoveProperty(): boolean;
                supportsRemovePropertyP(): Promise<boolean>;
                supportsStringIds(): boolean;
                supportsStringIdsP(): Promise<boolean>;
                supportsUserSuppliedIds(): boolean;
                supportsUserSuppliedIdsP(): Promise<boolean>;
                supportsUuidIds(): boolean;
                supportsUuidIdsP(): Promise<boolean>;
            }
            module Graph$Features$ElementFeatures {
                interface Static {
                    FEATURE_USER_SUPPLIED_IDS: string;
                    FEATURE_NUMERIC_IDS: string;
                    FEATURE_STRING_IDS: string;
                    FEATURE_UUID_IDS: string;
                    FEATURE_CUSTOM_IDS: string;
                    FEATURE_ANY_IDS: string;
                    FEATURE_ADD_PROPERTY: string;
                    FEATURE_REMOVE_PROPERTY: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Features$FeatureSet extends Java.java.lang.Object {
            }
            module Graph$Features$FeatureSet {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Features$GraphFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$FeatureSet {
                supportsComputer(): boolean;
                supportsComputerP(): Promise<boolean>;
                supportsPersistence(): boolean;
                supportsPersistenceP(): Promise<boolean>;
                supportsThreadedTransactions(): boolean;
                supportsThreadedTransactionsP(): Promise<boolean>;
                supportsTransactions(): boolean;
                supportsTransactionsP(): Promise<boolean>;
                variables(): Java.Graph$Features$VariableFeatures;
                variablesP(): Promise<Java.Graph$Features$VariableFeatures>;
            }
            module Graph$Features$GraphFeatures {
                interface Static {
                    FEATURE_COMPUTER: string;
                    FEATURE_TRANSACTIONS: string;
                    FEATURE_PERSISTENCE: string;
                    FEATURE_THREADED_TRANSACTIONS: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Features$PropertyFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures {
                supportsBooleanArrayValues(): boolean;
                supportsBooleanArrayValuesP(): Promise<boolean>;
                supportsBooleanValues(): boolean;
                supportsBooleanValuesP(): Promise<boolean>;
                supportsByteArrayValues(): boolean;
                supportsByteArrayValuesP(): Promise<boolean>;
                supportsByteValues(): boolean;
                supportsByteValuesP(): Promise<boolean>;
                supportsDoubleArrayValues(): boolean;
                supportsDoubleArrayValuesP(): Promise<boolean>;
                supportsDoubleValues(): boolean;
                supportsDoubleValuesP(): Promise<boolean>;
                supportsFloatArrayValues(): boolean;
                supportsFloatArrayValuesP(): Promise<boolean>;
                supportsFloatValues(): boolean;
                supportsFloatValuesP(): Promise<boolean>;
                supportsIntegerArrayValues(): boolean;
                supportsIntegerArrayValuesP(): Promise<boolean>;
                supportsIntegerValues(): boolean;
                supportsIntegerValuesP(): Promise<boolean>;
                supportsLongArrayValues(): boolean;
                supportsLongArrayValuesP(): Promise<boolean>;
                supportsLongValues(): boolean;
                supportsLongValuesP(): Promise<boolean>;
                supportsMapValues(): boolean;
                supportsMapValuesP(): Promise<boolean>;
                supportsMixedListValues(): boolean;
                supportsMixedListValuesP(): Promise<boolean>;
                supportsProperties(): boolean;
                supportsPropertiesP(): Promise<boolean>;
                supportsSerializableValues(): boolean;
                supportsSerializableValuesP(): Promise<boolean>;
                supportsStringArrayValues(): boolean;
                supportsStringArrayValuesP(): Promise<boolean>;
                supportsStringValues(): boolean;
                supportsStringValuesP(): Promise<boolean>;
                supportsUniformListValues(): boolean;
                supportsUniformListValuesP(): Promise<boolean>;
            }
            module Graph$Features$PropertyFeatures {
                interface Static {
                    FEATURE_PROPERTIES: string;
                    FEATURE_BOOLEAN_VALUES: string;
                    FEATURE_BYTE_VALUES: string;
                    FEATURE_DOUBLE_VALUES: string;
                    FEATURE_FLOAT_VALUES: string;
                    FEATURE_INTEGER_VALUES: string;
                    FEATURE_LONG_VALUES: string;
                    FEATURE_MAP_VALUES: string;
                    FEATURE_MIXED_LIST_VALUES: string;
                    FEATURE_BOOLEAN_ARRAY_VALUES: string;
                    FEATURE_BYTE_ARRAY_VALUES: string;
                    FEATURE_DOUBLE_ARRAY_VALUES: string;
                    FEATURE_FLOAT_ARRAY_VALUES: string;
                    FEATURE_INTEGER_ARRAY_VALUES: string;
                    FEATURE_LONG_ARRAY_VALUES: string;
                    FEATURE_SERIALIZABLE_VALUES: string;
                    FEATURE_STRING_ARRAY_VALUES: string;
                    FEATURE_STRING_VALUES: string;
                    FEATURE_UNIFORM_LIST_VALUES: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Features$VariableFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures {
                supportsBooleanArrayValues(): boolean;
                supportsBooleanArrayValuesP(): Promise<boolean>;
                supportsBooleanValues(): boolean;
                supportsBooleanValuesP(): Promise<boolean>;
                supportsByteArrayValues(): boolean;
                supportsByteArrayValuesP(): Promise<boolean>;
                supportsByteValues(): boolean;
                supportsByteValuesP(): Promise<boolean>;
                supportsDoubleArrayValues(): boolean;
                supportsDoubleArrayValuesP(): Promise<boolean>;
                supportsDoubleValues(): boolean;
                supportsDoubleValuesP(): Promise<boolean>;
                supportsFloatArrayValues(): boolean;
                supportsFloatArrayValuesP(): Promise<boolean>;
                supportsFloatValues(): boolean;
                supportsFloatValuesP(): Promise<boolean>;
                supportsIntegerArrayValues(): boolean;
                supportsIntegerArrayValuesP(): Promise<boolean>;
                supportsIntegerValues(): boolean;
                supportsIntegerValuesP(): Promise<boolean>;
                supportsLongArrayValues(): boolean;
                supportsLongArrayValuesP(): Promise<boolean>;
                supportsLongValues(): boolean;
                supportsLongValuesP(): Promise<boolean>;
                supportsMapValues(): boolean;
                supportsMapValuesP(): Promise<boolean>;
                supportsMixedListValues(): boolean;
                supportsMixedListValuesP(): Promise<boolean>;
                supportsSerializableValues(): boolean;
                supportsSerializableValuesP(): Promise<boolean>;
                supportsStringArrayValues(): boolean;
                supportsStringArrayValuesP(): Promise<boolean>;
                supportsStringValues(): boolean;
                supportsStringValuesP(): Promise<boolean>;
                supportsUniformListValues(): boolean;
                supportsUniformListValuesP(): Promise<boolean>;
                supportsVariables(): boolean;
                supportsVariablesP(): Promise<boolean>;
            }
            module Graph$Features$VariableFeatures {
                interface Static {
                    FEATURE_VARIABLES: string;
                    FEATURE_BOOLEAN_VALUES: string;
                    FEATURE_BYTE_VALUES: string;
                    FEATURE_DOUBLE_VALUES: string;
                    FEATURE_FLOAT_VALUES: string;
                    FEATURE_INTEGER_VALUES: string;
                    FEATURE_LONG_VALUES: string;
                    FEATURE_MAP_VALUES: string;
                    FEATURE_MIXED_LIST_VALUES: string;
                    FEATURE_BOOLEAN_ARRAY_VALUES: string;
                    FEATURE_BYTE_ARRAY_VALUES: string;
                    FEATURE_DOUBLE_ARRAY_VALUES: string;
                    FEATURE_FLOAT_ARRAY_VALUES: string;
                    FEATURE_INTEGER_ARRAY_VALUES: string;
                    FEATURE_LONG_ARRAY_VALUES: string;
                    FEATURE_SERIALIZABLE_VALUES: string;
                    FEATURE_STRING_ARRAY_VALUES: string;
                    FEATURE_STRING_VALUES: string;
                    FEATURE_UNIFORM_LIST_VALUES: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Features$VertexFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures {
                getCardinality(arg0: string_t): Java.VertexProperty$Cardinality;
                getCardinalityP(arg0: string_t): Promise<Java.VertexProperty$Cardinality>;
                properties(): Java.Graph$Features$VertexPropertyFeatures;
                propertiesP(): Promise<Java.Graph$Features$VertexPropertyFeatures>;
                supportsAddProperty(): boolean;
                supportsAddPropertyP(): Promise<boolean>;
                supportsAddVertices(): boolean;
                supportsAddVerticesP(): Promise<boolean>;
                supportsAnyIds(): boolean;
                supportsAnyIdsP(): Promise<boolean>;
                supportsCustomIds(): boolean;
                supportsCustomIdsP(): Promise<boolean>;
                supportsMetaProperties(): boolean;
                supportsMetaPropertiesP(): Promise<boolean>;
                supportsMultiProperties(): boolean;
                supportsMultiPropertiesP(): Promise<boolean>;
                supportsNumericIds(): boolean;
                supportsNumericIdsP(): Promise<boolean>;
                supportsRemoveProperty(): boolean;
                supportsRemovePropertyP(): Promise<boolean>;
                supportsRemoveVertices(): boolean;
                supportsRemoveVerticesP(): Promise<boolean>;
                supportsStringIds(): boolean;
                supportsStringIdsP(): Promise<boolean>;
                supportsUserSuppliedIds(): boolean;
                supportsUserSuppliedIdsP(): Promise<boolean>;
                supportsUuidIds(): boolean;
                supportsUuidIdsP(): Promise<boolean>;
            }
            module Graph$Features$VertexFeatures {
                interface Static {
                    FEATURE_ADD_VERTICES: string;
                    FEATURE_MULTI_PROPERTIES: string;
                    FEATURE_META_PROPERTIES: string;
                    FEATURE_REMOVE_VERTICES: string;
                    FEATURE_USER_SUPPLIED_IDS: string;
                    FEATURE_NUMERIC_IDS: string;
                    FEATURE_STRING_IDS: string;
                    FEATURE_UUID_IDS: string;
                    FEATURE_CUSTOM_IDS: string;
                    FEATURE_ANY_IDS: string;
                    FEATURE_ADD_PROPERTY: string;
                    FEATURE_REMOVE_PROPERTY: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Features$VertexPropertyFeatures extends Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures {
                supportsAddProperty(): boolean;
                supportsAddPropertyP(): Promise<boolean>;
                supportsAnyIds(): boolean;
                supportsAnyIdsP(): Promise<boolean>;
                supportsBooleanArrayValues(): boolean;
                supportsBooleanArrayValuesP(): Promise<boolean>;
                supportsBooleanValues(): boolean;
                supportsBooleanValuesP(): Promise<boolean>;
                supportsByteArrayValues(): boolean;
                supportsByteArrayValuesP(): Promise<boolean>;
                supportsByteValues(): boolean;
                supportsByteValuesP(): Promise<boolean>;
                supportsCustomIds(): boolean;
                supportsCustomIdsP(): Promise<boolean>;
                supportsDoubleArrayValues(): boolean;
                supportsDoubleArrayValuesP(): Promise<boolean>;
                supportsDoubleValues(): boolean;
                supportsDoubleValuesP(): Promise<boolean>;
                supportsFloatArrayValues(): boolean;
                supportsFloatArrayValuesP(): Promise<boolean>;
                supportsFloatValues(): boolean;
                supportsFloatValuesP(): Promise<boolean>;
                supportsIntegerArrayValues(): boolean;
                supportsIntegerArrayValuesP(): Promise<boolean>;
                supportsIntegerValues(): boolean;
                supportsIntegerValuesP(): Promise<boolean>;
                supportsLongArrayValues(): boolean;
                supportsLongArrayValuesP(): Promise<boolean>;
                supportsLongValues(): boolean;
                supportsLongValuesP(): Promise<boolean>;
                supportsMapValues(): boolean;
                supportsMapValuesP(): Promise<boolean>;
                supportsMixedListValues(): boolean;
                supportsMixedListValuesP(): Promise<boolean>;
                supportsNumericIds(): boolean;
                supportsNumericIdsP(): Promise<boolean>;
                supportsProperties(): boolean;
                supportsPropertiesP(): Promise<boolean>;
                supportsRemoveProperty(): boolean;
                supportsRemovePropertyP(): Promise<boolean>;
                supportsSerializableValues(): boolean;
                supportsSerializableValuesP(): Promise<boolean>;
                supportsStringArrayValues(): boolean;
                supportsStringArrayValuesP(): Promise<boolean>;
                supportsStringIds(): boolean;
                supportsStringIdsP(): Promise<boolean>;
                supportsStringValues(): boolean;
                supportsStringValuesP(): Promise<boolean>;
                supportsUniformListValues(): boolean;
                supportsUniformListValuesP(): Promise<boolean>;
                supportsUserSuppliedIds(): boolean;
                supportsUserSuppliedIdsP(): Promise<boolean>;
                supportsUuidIds(): boolean;
                supportsUuidIdsP(): Promise<boolean>;
            }
            module Graph$Features$VertexPropertyFeatures {
                interface Static {
                    FEATURE_ADD_PROPERTY: string;
                    FEATURE_REMOVE_PROPERTY: string;
                    FEATURE_USER_SUPPLIED_IDS: string;
                    FEATURE_NUMERIC_IDS: string;
                    FEATURE_STRING_IDS: string;
                    FEATURE_UUID_IDS: string;
                    FEATURE_CUSTOM_IDS: string;
                    FEATURE_ANY_IDS: string;
                    FEATURE_PROPERTIES: string;
                    FEATURE_BOOLEAN_VALUES: string;
                    FEATURE_BYTE_VALUES: string;
                    FEATURE_DOUBLE_VALUES: string;
                    FEATURE_FLOAT_VALUES: string;
                    FEATURE_INTEGER_VALUES: string;
                    FEATURE_LONG_VALUES: string;
                    FEATURE_MAP_VALUES: string;
                    FEATURE_MIXED_LIST_VALUES: string;
                    FEATURE_BOOLEAN_ARRAY_VALUES: string;
                    FEATURE_BYTE_ARRAY_VALUES: string;
                    FEATURE_DOUBLE_ARRAY_VALUES: string;
                    FEATURE_FLOAT_ARRAY_VALUES: string;
                    FEATURE_INTEGER_ARRAY_VALUES: string;
                    FEATURE_LONG_ARRAY_VALUES: string;
                    FEATURE_SERIALIZABLE_VALUES: string;
                    FEATURE_STRING_ARRAY_VALUES: string;
                    FEATURE_STRING_VALUES: string;
                    FEATURE_UNIFORM_LIST_VALUES: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Hidden extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Graph$Hidden {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.Graph$Hidden;
                    hide(arg0: string_t): string;
                    hideP(arg0: string_t): Promise<string>;
                    isHidden(arg0: string_t): boolean;
                    isHiddenP(arg0: string_t): Promise<boolean>;
                    unHide(arg0: string_t): string;
                    unHideP(arg0: string_t): Promise<string>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$OptIn extends Java.java.lang.Object {
                annotationType(): Java.Class;
                annotationTypeP(): Promise<Java.Class>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                value(): string;
                valueP(): Promise<string>;
            }
            module Graph$OptIn {
                interface Static {
                    SUITE_STRUCTURE_STANDARD: string;
                    SUITE_STRUCTURE_INTEGRATE: string;
                    SUITE_STRUCTURE_PERFORMANCE: string;
                    SUITE_PROCESS_COMPUTER: string;
                    SUITE_PROCESS_STANDARD: string;
                    SUITE_PROCESS_PERFORMANCE: string;
                    SUITE_GROOVY_PROCESS_STANDARD: string;
                    SUITE_GROOVY_PROCESS_COMPUTER: string;
                    SUITE_GROOVY_ENVIRONMENT: string;
                    SUITE_GROOVY_ENVIRONMENT_INTEGRATE: string;
                    SUITE_GROOVY_ENVIRONMENT_PERFORMANCE: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$OptIns extends Java.java.lang.Object {
                annotationType(): Java.Class;
                annotationTypeP(): Promise<Java.Class>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                value(): Java.Graph$OptIn[];
                valueP(): Promise<Java.Graph$OptIn[]>;
            }
            module Graph$OptIns {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$OptOut extends Java.java.lang.Object {
                annotationType(): Java.Class;
                annotationTypeP(): Promise<Java.Class>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                method(): string;
                methodP(): Promise<string>;
                reason(): string;
                reasonP(): Promise<string>;
                specific(): string;
                specificP(): Promise<string>;
                test(): string;
                testP(): Promise<string>;
                toString(): string;
                toStringP(): Promise<string>;
            }
            module Graph$OptOut {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$OptOuts extends Java.java.lang.Object {
                annotationType(): Java.Class;
                annotationTypeP(): Promise<Java.Class>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                value(): Java.Graph$OptOut[];
                valueP(): Promise<Java.Graph$OptOut[]>;
            }
            module Graph$OptOuts {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Variables extends Java.java.lang.Object {
                asMap(): Java.Map;
                asMapP(): Promise<Java.Map>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                remove(arg0: string_t): void;
                removeP(arg0: string_t): Promise<void>;
                set(arg0: string_t, arg1: object_t): void;
                setP(arg0: string_t, arg1: object_t): Promise<void>;
            }
            module Graph$Variables {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Graph$Variables$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Graph$Variables$Exceptions {
                interface Static {
                    dataTypeOfVariableValueNotSupported(arg0: object_t): object_t;
                    dataTypeOfVariableValueNotSupportedP(arg0: object_t): Promise<object_t>;
                    variableKeyCanNotBeEmpty(): object_t;
                    variableKeyCanNotBeEmptyP(): Promise<object_t>;
                    variableKeyCanNotBeNull(): object_t;
                    variableKeyCanNotBeNullP(): Promise<object_t>;
                    variableValueCanNotBeNull(): object_t;
                    variableValueCanNotBeNullP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface AbstractIoRegistry extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.IoRegistry {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                find(arg0: Java.Class, arg1: Java.Class): Java.List;
                findP(arg0: Java.Class, arg1: Java.Class): Promise<Java.List>;
                find(arg0: Java.Class): Java.List;
                findP(arg0: Java.Class): Promise<Java.List>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module AbstractIoRegistry {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.io.AbstractIoRegistry;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface GraphMigrator extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphMigrator {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.io.GraphMigrator;
                    migrateGraph(arg0: Java.Graph, arg1: Java.Graph, arg2: Java.GraphReader, arg3: Java.GraphWriter): void;
                    migrateGraphP(arg0: Java.Graph, arg1: Java.Graph, arg2: Java.GraphReader, arg3: Java.GraphWriter): Promise<void>;
                    migrateGraph(arg0: Java.Graph, arg1: Java.Graph): void;
                    migrateGraphP(arg0: Java.Graph, arg1: Java.Graph): Promise<void>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphml {
            interface GraphMLIo extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Io {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mapper(): Java.GraphMLMapper$Builder;
                mapperP(): Promise<Java.GraphMLMapper$Builder>;
                mapper(): Java.Mapper$Builder;
                mapperP(): Promise<Java.Mapper$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reader(): Java.GraphMLReader$Builder;
                readerP(): Promise<Java.GraphMLReader$Builder>;
                reader(): Java.GraphReader$ReaderBuilder;
                readerP(): Promise<Java.GraphReader$ReaderBuilder>;
                readGraph(arg0: string_t): void;
                readGraphP(arg0: string_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                writeGraph(arg0: string_t): void;
                writeGraphP(arg0: string_t): Promise<void>;
                writer(): Java.GraphMLWriter$Builder;
                writerP(): Promise<Java.GraphMLWriter$Builder>;
                writer(): Java.GraphWriter$WriterBuilder;
                writerP(): Promise<Java.GraphWriter$WriterBuilder>;
            }
            module GraphMLIo {
                interface Static {
                    new (arg0: Java.Graph): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo;
                    build(): Java.Io$Builder;
                    buildP(): Promise<Java.Io$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphml {
            interface GraphMLIo$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Io$Builder {
                create(): Java.GraphMLIo;
                createP(): Promise<Java.GraphMLIo>;
                create(): Java.Io;
                createP(): Promise<Java.Io>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(arg0: Java.Graph): Java.Io$Builder;
                graphP(arg0: Java.Graph): Promise<Java.Io$Builder>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                registry(arg0: Java.IoRegistry): Java.Io$Builder;
                registryP(arg0: Java.IoRegistry): Promise<Java.Io$Builder>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphMLIo$Builder {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLIo$Builder;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphml {
            interface GraphMLMapper extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Mapper {
                createMapper(): object_t;
                createMapperP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphMLMapper {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper;
                    build(): Java.GraphMLMapper$Builder;
                    buildP(): Promise<Java.GraphMLMapper$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphml {
            interface GraphMLMapper$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder {
                addRegistry(arg0: Java.IoRegistry): Java.GraphMLMapper$Builder;
                addRegistryP(arg0: Java.IoRegistry): Promise<Java.GraphMLMapper$Builder>;
                addRegistry(arg0: Java.IoRegistry): Java.Mapper$Builder;
                addRegistryP(arg0: Java.IoRegistry): Promise<Java.Mapper$Builder>;
                create(): Java.GraphMLMapper;
                createP(): Promise<Java.GraphMLMapper>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphMLMapper$Builder {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLMapper$Builder;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphml {
            interface GraphMLReader extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                readEdge(arg0: Java.InputStream, arg1: Java.Function): Java.Edge;
                readEdgeP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Edge>;
                readGraph(arg0: Java.InputStream, arg1: Java.Graph): void;
                readGraphP(arg0: Java.InputStream, arg1: Java.Graph): Promise<void>;
                readObject(arg0: Java.InputStream, arg1: Java.Class): object_t;
                readObjectP(arg0: Java.InputStream, arg1: Java.Class): Promise<object_t>;
                readProperty(arg0: Java.InputStream, arg1: Java.Function): Java.Property;
                readPropertyP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Property>;
                readVertex(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Java.Vertex;
                readVertexP(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Promise<Java.Vertex>;
                readVertex(arg0: Java.InputStream, arg1: Java.Function): Java.Vertex;
                readVertexP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Vertex>;
                readVertexProperty(arg0: Java.InputStream, arg1: Java.Function): Java.VertexProperty;
                readVertexPropertyP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.VertexProperty>;
                readVertices(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Java.Iterator;
                readVerticesP(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Promise<Java.Iterator>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphMLReader {
                interface Static {
                    build(): Java.GraphMLReader$Builder;
                    buildP(): Promise<Java.GraphMLReader$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphml {
            interface GraphMLReader$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder {
                batchSize(arg0: long_t): Java.GraphMLReader$Builder;
                batchSizeP(arg0: long_t): Promise<Java.GraphMLReader$Builder>;
                create(): Java.GraphMLReader;
                createP(): Promise<Java.GraphMLReader>;
                create(): Java.GraphReader;
                createP(): Promise<Java.GraphReader>;
                edgeLabelKey(arg0: string_t): Java.GraphMLReader$Builder;
                edgeLabelKeyP(arg0: string_t): Promise<Java.GraphMLReader$Builder>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                vertexLabelKey(arg0: string_t): Java.GraphMLReader$Builder;
                vertexLabelKeyP(arg0: string_t): Promise<Java.GraphMLReader$Builder>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphMLReader$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphml {
            interface GraphMLWriter extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                writeEdge(arg0: Java.OutputStream, arg1: Java.Edge): void;
                writeEdgeP(arg0: Java.OutputStream, arg1: Java.Edge): Promise<void>;
                writeGraph(arg0: Java.OutputStream, arg1: Java.Graph): void;
                writeGraphP(arg0: Java.OutputStream, arg1: Java.Graph): Promise<void>;
                writeObject(arg0: Java.OutputStream, arg1: object_t): void;
                writeObjectP(arg0: Java.OutputStream, arg1: object_t): Promise<void>;
                writeProperty(arg0: Java.OutputStream, arg1: Java.Property): void;
                writePropertyP(arg0: Java.OutputStream, arg1: Java.Property): Promise<void>;
                writeVertex(arg0: Java.OutputStream, arg1: Java.Vertex, arg2: Java.Direction): void;
                writeVertexP(arg0: Java.OutputStream, arg1: Java.Vertex, arg2: Java.Direction): Promise<void>;
                writeVertex(arg0: Java.OutputStream, arg1: Java.Vertex): void;
                writeVertexP(arg0: Java.OutputStream, arg1: Java.Vertex): Promise<void>;
                writeVertexProperty(arg0: Java.OutputStream, arg1: Java.VertexProperty): void;
                writeVertexPropertyP(arg0: Java.OutputStream, arg1: Java.VertexProperty): Promise<void>;
                writeVertices(arg0: Java.OutputStream, arg1: Java.Iterator, arg2: Java.Direction): void;
                writeVerticesP(arg0: Java.OutputStream, arg1: Java.Iterator, arg2: Java.Direction): Promise<void>;
                writeVertices(arg0: Java.OutputStream, arg1: Java.Iterator): void;
                writeVerticesP(arg0: Java.OutputStream, arg1: Java.Iterator): Promise<void>;
            }
            module GraphMLWriter {
                interface Static {
                    build(): Java.GraphMLWriter$Builder;
                    buildP(): Promise<Java.GraphMLWriter$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphml {
            interface GraphMLWriter$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder {
                create(): Java.GraphMLWriter;
                createP(): Promise<Java.GraphMLWriter>;
                create(): Java.GraphWriter;
                createP(): Promise<Java.GraphWriter>;
                edgeKeyTypes(arg0: Java.Map): Java.GraphMLWriter$Builder;
                edgeKeyTypesP(arg0: Java.Map): Promise<Java.GraphMLWriter$Builder>;
                edgeLabelKey(arg0: string_t): Java.GraphMLWriter$Builder;
                edgeLabelKeyP(arg0: string_t): Promise<Java.GraphMLWriter$Builder>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                normalize(arg0: boolean_t): Java.GraphMLWriter$Builder;
                normalizeP(arg0: boolean_t): Promise<Java.GraphMLWriter$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                vertexKeyTypes(arg0: Java.Map): Java.GraphMLWriter$Builder;
                vertexKeyTypesP(arg0: Java.Map): Promise<Java.GraphMLWriter$Builder>;
                vertexLabelKey(arg0: string_t): Java.GraphMLWriter$Builder;
                vertexLabelKeyP(arg0: string_t): Promise<Java.GraphMLWriter$Builder>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                xmlSchemaLocation(arg0: string_t): Java.GraphMLWriter$Builder;
                xmlSchemaLocationP(arg0: string_t): Promise<Java.GraphMLWriter$Builder>;
            }
            module GraphMLWriter$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphml {
            interface GraphMLWriterHelper$IndentingXMLStreamWriter extends Java.java.lang.Object {
                close(): void;
                closeP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                flush(): void;
                flushP(): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getIndentStep(): number;
                getIndentStepP(): Promise<number>;
                getNamespaceContext(): object_t;
                getNamespaceContextP(): Promise<object_t>;
                getPrefix(arg0: string_t): string;
                getPrefixP(arg0: string_t): Promise<string>;
                getProperty(arg0: string_t): object_t;
                getPropertyP(arg0: string_t): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setDefaultNamespace(arg0: string_t): void;
                setDefaultNamespaceP(arg0: string_t): Promise<void>;
                setIndentStep(arg0: string_t): void;
                setIndentStepP(arg0: string_t): Promise<void>;
                setIndentStep(arg0: integer_t): void;
                setIndentStepP(arg0: integer_t): Promise<void>;
                setNamespaceContext(arg0: object_t): void;
                setNamespaceContextP(arg0: object_t): Promise<void>;
                setPrefix(arg0: string_t, arg1: string_t): void;
                setPrefixP(arg0: string_t, arg1: string_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                writeAttribute(arg0: string_t, arg1: string_t, arg2: string_t, arg3: string_t): void;
                writeAttributeP(arg0: string_t, arg1: string_t, arg2: string_t, arg3: string_t): Promise<void>;
                writeAttribute(arg0: string_t, arg1: string_t, arg2: string_t): void;
                writeAttributeP(arg0: string_t, arg1: string_t, arg2: string_t): Promise<void>;
                writeAttribute(arg0: string_t, arg1: string_t): void;
                writeAttributeP(arg0: string_t, arg1: string_t): Promise<void>;
                writeCData(arg0: string_t): void;
                writeCDataP(arg0: string_t): Promise<void>;
                writeCharacters(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
                writeCharactersP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
                writeCharacters(arg0: string_t): void;
                writeCharactersP(arg0: string_t): Promise<void>;
                writeComment(arg0: string_t): void;
                writeCommentP(arg0: string_t): Promise<void>;
                writeDefaultNamespace(arg0: string_t): void;
                writeDefaultNamespaceP(arg0: string_t): Promise<void>;
                writeDTD(arg0: string_t): void;
                writeDTDP(arg0: string_t): Promise<void>;
                writeEmptyElement(arg0: string_t, arg1: string_t, arg2: string_t): void;
                writeEmptyElementP(arg0: string_t, arg1: string_t, arg2: string_t): Promise<void>;
                writeEmptyElement(arg0: string_t, arg1: string_t): void;
                writeEmptyElementP(arg0: string_t, arg1: string_t): Promise<void>;
                writeEmptyElement(arg0: string_t): void;
                writeEmptyElementP(arg0: string_t): Promise<void>;
                writeEndDocument(): void;
                writeEndDocumentP(): Promise<void>;
                writeEndElement(): void;
                writeEndElementP(): Promise<void>;
                writeEntityRef(arg0: string_t): void;
                writeEntityRefP(arg0: string_t): Promise<void>;
                writeNamespace(arg0: string_t, arg1: string_t): void;
                writeNamespaceP(arg0: string_t, arg1: string_t): Promise<void>;
                writeProcessingInstruction(arg0: string_t, arg1: string_t): void;
                writeProcessingInstructionP(arg0: string_t, arg1: string_t): Promise<void>;
                writeProcessingInstruction(arg0: string_t): void;
                writeProcessingInstructionP(arg0: string_t): Promise<void>;
                writeStartDocument(arg0: string_t, arg1: string_t): void;
                writeStartDocumentP(arg0: string_t, arg1: string_t): Promise<void>;
                writeStartDocument(arg0: string_t): void;
                writeStartDocumentP(arg0: string_t): Promise<void>;
                writeStartDocument(): void;
                writeStartDocumentP(): Promise<void>;
                writeStartElement(arg0: string_t, arg1: string_t, arg2: string_t): void;
                writeStartElementP(arg0: string_t, arg1: string_t, arg2: string_t): Promise<void>;
                writeStartElement(arg0: string_t, arg1: string_t): void;
                writeStartElementP(arg0: string_t, arg1: string_t): Promise<void>;
                writeStartElement(arg0: string_t): void;
                writeStartElementP(arg0: string_t): Promise<void>;
            }
            module GraphMLWriterHelper$IndentingXMLStreamWriter {
                interface Static {
                    new (arg0: object_t): org.apache.tinkerpop.gremlin.structure.io.graphml.GraphMLWriterHelper$IndentingXMLStreamWriter;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface GraphReader extends Java.java.lang.Object {
                readEdge(arg0: Java.InputStream, arg1: Java.Function): Java.Edge;
                readEdgeP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Edge>;
                readGraph(arg0: Java.InputStream, arg1: Java.Graph): void;
                readGraphP(arg0: Java.InputStream, arg1: Java.Graph): Promise<void>;
                readObject(arg0: Java.InputStream, arg1: Java.Class): object_t;
                readObjectP(arg0: Java.InputStream, arg1: Java.Class): Promise<object_t>;
                readProperty(arg0: Java.InputStream, arg1: Java.Function): Java.Property;
                readPropertyP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Property>;
                readVertex(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Java.Vertex;
                readVertexP(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Promise<Java.Vertex>;
                readVertex(arg0: Java.InputStream, arg1: Java.Function): Java.Vertex;
                readVertexP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Vertex>;
                readVertexProperty(arg0: Java.InputStream, arg1: Java.Function): Java.VertexProperty;
                readVertexPropertyP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.VertexProperty>;
                readVertices(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Java.Iterator;
                readVerticesP(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Promise<Java.Iterator>;
            }
            module GraphReader {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface GraphReader$ReaderBuilder extends Java.java.lang.Object {
                create(): Java.GraphReader;
                createP(): Promise<Java.GraphReader>;
            }
            module GraphReader$ReaderBuilder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface GraphSONIo extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Io {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mapper(): Java.GraphSONMapper$Builder;
                mapperP(): Promise<Java.GraphSONMapper$Builder>;
                mapper(): Java.Mapper$Builder;
                mapperP(): Promise<Java.Mapper$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reader(): Java.GraphSONReader$Builder;
                readerP(): Promise<Java.GraphSONReader$Builder>;
                reader(): Java.GraphReader$ReaderBuilder;
                readerP(): Promise<Java.GraphReader$ReaderBuilder>;
                readGraph(arg0: string_t): void;
                readGraphP(arg0: string_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                writeGraph(arg0: string_t): void;
                writeGraphP(arg0: string_t): Promise<void>;
                writer(): Java.GraphSONWriter$Builder;
                writerP(): Promise<Java.GraphSONWriter$Builder>;
                writer(): Java.GraphWriter$WriterBuilder;
                writerP(): Promise<Java.GraphWriter$WriterBuilder>;
            }
            module GraphSONIo {
                interface Static {
                    new (arg0: Java.IoRegistry, arg1: Java.Graph): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo;
                    build(): Java.Io$Builder;
                    buildP(): Promise<Java.Io$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface GraphSONIo$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Io$Builder {
                create(): Java.GraphSONIo;
                createP(): Promise<Java.GraphSONIo>;
                create(): Java.Io;
                createP(): Promise<Java.Io>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(arg0: Java.Graph): Java.Io$Builder;
                graphP(arg0: Java.Graph): Promise<Java.Io$Builder>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                registry(arg0: Java.IoRegistry): Java.Io$Builder;
                registryP(arg0: Java.IoRegistry): Promise<Java.Io$Builder>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphSONIo$Builder {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONIo$Builder;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface GraphSONMapper extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Mapper {
                createMapper(): object_t;
                createMapperP(): Promise<object_t>;
                createMapper(): object_t;
                createMapperP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getVersion(): Java.GraphSONVersion;
                getVersionP(): Promise<Java.GraphSONVersion>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphSONMapper {
                interface Static {
                    build(): Java.GraphSONMapper$Builder;
                    buildP(): Promise<Java.GraphSONMapper$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface GraphSONMapper$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder {
                addCustomModule(arg0: object_t): Java.GraphSONMapper$Builder;
                addCustomModuleP(arg0: object_t): Promise<Java.GraphSONMapper$Builder>;
                addRegistry(arg0: Java.IoRegistry): Java.GraphSONMapper$Builder;
                addRegistryP(arg0: Java.IoRegistry): Promise<Java.GraphSONMapper$Builder>;
                addRegistry(arg0: Java.IoRegistry): Java.Mapper$Builder;
                addRegistryP(arg0: Java.IoRegistry): Promise<Java.Mapper$Builder>;
                create(): Java.GraphSONMapper;
                createP(): Promise<Java.GraphSONMapper>;
                embedTypes(arg0: boolean_t): Java.GraphSONMapper$Builder;
                embedTypesP(arg0: boolean_t): Promise<Java.GraphSONMapper$Builder>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                loadCustomModules(arg0: boolean_t): Java.GraphSONMapper$Builder;
                loadCustomModulesP(arg0: boolean_t): Promise<Java.GraphSONMapper$Builder>;
                normalize(arg0: boolean_t): Java.GraphSONMapper$Builder;
                normalizeP(arg0: boolean_t): Promise<Java.GraphSONMapper$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                version(arg0: Java.GraphSONVersion): Java.GraphSONMapper$Builder;
                versionP(arg0: Java.GraphSONVersion): Promise<Java.GraphSONMapper$Builder>;
                version(arg0: string_t): Java.GraphSONMapper$Builder;
                versionP(arg0: string_t): Promise<Java.GraphSONMapper$Builder>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphSONMapper$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface GraphSONReader extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                readEdge(arg0: Java.InputStream, arg1: Java.Function): Java.Edge;
                readEdgeP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Edge>;
                readGraph(arg0: Java.InputStream, arg1: Java.Graph): void;
                readGraphP(arg0: Java.InputStream, arg1: Java.Graph): Promise<void>;
                readObject(arg0: Java.InputStream, arg1: Java.Class): object_t;
                readObjectP(arg0: Java.InputStream, arg1: Java.Class): Promise<object_t>;
                readProperty(arg0: Java.InputStream, arg1: Java.Function): Java.Property;
                readPropertyP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Property>;
                readVertex(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Java.Vertex;
                readVertexP(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Promise<Java.Vertex>;
                readVertex(arg0: Java.InputStream, arg1: Java.Function): Java.Vertex;
                readVertexP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Vertex>;
                readVertexProperty(arg0: Java.InputStream, arg1: Java.Function): Java.VertexProperty;
                readVertexPropertyP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.VertexProperty>;
                readVertices(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Java.Iterator;
                readVerticesP(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Promise<Java.Iterator>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphSONReader {
                interface Static {
                    new (arg0: Java.GraphSONMapper, arg1: long_t): org.apache.tinkerpop.gremlin.structure.io.graphson.GraphSONReader;
                    build(): Java.GraphSONReader$Builder;
                    buildP(): Promise<Java.GraphSONReader$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface GraphSONReader$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder {
                batchSize(arg0: long_t): Java.GraphSONReader$Builder;
                batchSizeP(arg0: long_t): Promise<Java.GraphSONReader$Builder>;
                create(): Java.GraphSONReader;
                createP(): Promise<Java.GraphSONReader>;
                create(): Java.GraphReader;
                createP(): Promise<Java.GraphReader>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mapper(arg0: Java.GraphSONMapper): Java.GraphSONReader$Builder;
                mapperP(arg0: Java.GraphSONMapper): Promise<Java.GraphSONReader$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphSONReader$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface GraphSONTokens extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphSONTokens {
                interface Static {
                    CLASS: string;
                    ID: string;
                    TYPE: string;
                    VALUE: string;
                    PROPERTIES: string;
                    KEY: string;
                    EDGE: string;
                    VERTEX: string;
                    IN: string;
                    OUT: string;
                    IN_E: string;
                    OUT_E: string;
                    LABEL: string;
                    LABELS: string;
                    OBJECTS: string;
                    IN_LABEL: string;
                    OUT_LABEL: string;
                    METRICS: string;
                    DURATION: string;
                    NAME: string;
                    COUNTS: string;
                    ANNOTATIONS: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface GraphSONUtil extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphSONUtil {
                interface Static {
                    writeWithType(arg0: string_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t): void;
                    writeWithTypeP(arg0: string_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t): Promise<void>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface GraphSONVersion extends Java.java.lang.Enum {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getBuilder(): object_t;
                getBuilderP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                getVersion(): string;
                getVersionP(): Promise<string>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphSONVersion {
                interface Static {
                    V1_0: Java.GraphSONVersion;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.GraphSONVersion;
                    valueOfP(arg0: string_t): Promise<Java.GraphSONVersion>;
                    values(): Java.GraphSONVersion[];
                    valuesP(): Promise<Java.GraphSONVersion[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface GraphSONWriter extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                writeEdge(arg0: Java.OutputStream, arg1: Java.Edge): void;
                writeEdgeP(arg0: Java.OutputStream, arg1: Java.Edge): Promise<void>;
                writeGraph(arg0: Java.OutputStream, arg1: Java.Graph): void;
                writeGraphP(arg0: Java.OutputStream, arg1: Java.Graph): Promise<void>;
                writeObject(arg0: Java.OutputStream, arg1: object_t): void;
                writeObjectP(arg0: Java.OutputStream, arg1: object_t): Promise<void>;
                writeProperty(arg0: Java.OutputStream, arg1: Java.Property): void;
                writePropertyP(arg0: Java.OutputStream, arg1: Java.Property): Promise<void>;
                writeVertex(arg0: Java.OutputStream, arg1: Java.Vertex, arg2: Java.Direction): void;
                writeVertexP(arg0: Java.OutputStream, arg1: Java.Vertex, arg2: Java.Direction): Promise<void>;
                writeVertex(arg0: Java.OutputStream, arg1: Java.Vertex): void;
                writeVertexP(arg0: Java.OutputStream, arg1: Java.Vertex): Promise<void>;
                writeVertexProperty(arg0: Java.OutputStream, arg1: Java.VertexProperty): void;
                writeVertexPropertyP(arg0: Java.OutputStream, arg1: Java.VertexProperty): Promise<void>;
                writeVertices(arg0: Java.OutputStream, arg1: Java.Iterator, arg2: Java.Direction): void;
                writeVerticesP(arg0: Java.OutputStream, arg1: Java.Iterator, arg2: Java.Direction): Promise<void>;
                writeVertices(arg0: Java.OutputStream, arg1: Java.Iterator): void;
                writeVerticesP(arg0: Java.OutputStream, arg1: Java.Iterator): Promise<void>;
            }
            module GraphSONWriter {
                interface Static {
                    build(): Java.GraphSONWriter$Builder;
                    buildP(): Promise<Java.GraphSONWriter$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface GraphSONWriter$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder {
                create(): Java.GraphSONWriter;
                createP(): Promise<Java.GraphSONWriter>;
                create(): Java.GraphWriter;
                createP(): Promise<Java.GraphWriter>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mapper(arg0: Java.GraphSONMapper): Java.GraphSONWriter$Builder;
                mapperP(arg0: Java.GraphSONMapper): Promise<Java.GraphSONWriter$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphSONWriter$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface LegacyGraphSONReader extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                readEdge(arg0: Java.InputStream, arg1: Java.Function): Java.Edge;
                readEdgeP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Edge>;
                readGraph(arg0: Java.InputStream, arg1: Java.Graph): void;
                readGraphP(arg0: Java.InputStream, arg1: Java.Graph): Promise<void>;
                readObject(arg0: Java.InputStream, arg1: Java.Class): object_t;
                readObjectP(arg0: Java.InputStream, arg1: Java.Class): Promise<object_t>;
                readProperty(arg0: Java.InputStream, arg1: Java.Function): Java.Property;
                readPropertyP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Property>;
                readVertex(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Java.Vertex;
                readVertexP(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Promise<Java.Vertex>;
                readVertex(arg0: Java.InputStream, arg1: Java.Function): Java.Vertex;
                readVertexP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Vertex>;
                readVertexProperty(arg0: Java.InputStream, arg1: Java.Function): Java.VertexProperty;
                readVertexPropertyP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.VertexProperty>;
                readVertices(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Java.Iterator;
                readVerticesP(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Promise<Java.Iterator>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module LegacyGraphSONReader {
                interface Static {
                    new (arg0: object_t, arg1: long_t): org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader;
                    build(): Java.LegacyGraphSONReader$Builder;
                    buildP(): Promise<Java.LegacyGraphSONReader$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface LegacyGraphSONReader$Builder extends Java.java.lang.Object {
                addCustomModule(arg0: object_t): Java.LegacyGraphSONReader$Builder;
                addCustomModuleP(arg0: object_t): Promise<Java.LegacyGraphSONReader$Builder>;
                batchSize(arg0: long_t): Java.LegacyGraphSONReader$Builder;
                batchSizeP(arg0: long_t): Promise<Java.LegacyGraphSONReader$Builder>;
                create(): Java.LegacyGraphSONReader;
                createP(): Promise<Java.LegacyGraphSONReader>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                loadCustomModules(arg0: boolean_t): Java.LegacyGraphSONReader$Builder;
                loadCustomModulesP(arg0: boolean_t): Promise<Java.LegacyGraphSONReader$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module LegacyGraphSONReader$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.graphson {
            interface LegacyGraphSONReader$GraphSONTokens extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module LegacyGraphSONReader$GraphSONTokens {
                interface Static {
                    _ID: string;
                    _LABEL: string;
                    _TYPE: string;
                    _OUT_V: string;
                    _IN_V: string;
                    VALUE: string;
                    TYPE: string;
                    TYPE_LIST: string;
                    TYPE_STRING: string;
                    TYPE_DOUBLE: string;
                    TYPE_INTEGER: string;
                    TYPE_FLOAT: string;
                    TYPE_MAP: string;
                    TYPE_BOOLEAN: string;
                    TYPE_LONG: string;
                    TYPE_SHORT: string;
                    TYPE_BYTE: string;
                    TYPE_UNKNOWN: string;
                    VERTICES: string;
                    EDGES: string;
                    MODE: string;
                    new (): org.apache.tinkerpop.gremlin.structure.io.graphson.LegacyGraphSONReader$GraphSONTokens;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface GraphWriter extends Java.java.lang.Object {
                writeEdge(arg0: Java.OutputStream, arg1: Java.Edge): void;
                writeEdgeP(arg0: Java.OutputStream, arg1: Java.Edge): Promise<void>;
                writeGraph(arg0: Java.OutputStream, arg1: Java.Graph): void;
                writeGraphP(arg0: Java.OutputStream, arg1: Java.Graph): Promise<void>;
                writeObject(arg0: Java.OutputStream, arg1: object_t): void;
                writeObjectP(arg0: Java.OutputStream, arg1: object_t): Promise<void>;
                writeProperty(arg0: Java.OutputStream, arg1: Java.Property): void;
                writePropertyP(arg0: Java.OutputStream, arg1: Java.Property): Promise<void>;
                writeVertex(arg0: Java.OutputStream, arg1: Java.Vertex, arg2: Java.Direction): void;
                writeVertexP(arg0: Java.OutputStream, arg1: Java.Vertex, arg2: Java.Direction): Promise<void>;
                writeVertex(arg0: Java.OutputStream, arg1: Java.Vertex): void;
                writeVertexP(arg0: Java.OutputStream, arg1: Java.Vertex): Promise<void>;
                writeVertexProperty(arg0: Java.OutputStream, arg1: Java.VertexProperty): void;
                writeVertexPropertyP(arg0: Java.OutputStream, arg1: Java.VertexProperty): Promise<void>;
                writeVertices(arg0: Java.OutputStream, arg1: Java.Iterator, arg2: Java.Direction): void;
                writeVerticesP(arg0: Java.OutputStream, arg1: Java.Iterator, arg2: Java.Direction): Promise<void>;
                writeVertices(arg0: Java.OutputStream, arg1: Java.Iterator): void;
                writeVerticesP(arg0: Java.OutputStream, arg1: Java.Iterator): Promise<void>;
            }
            module GraphWriter {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface GraphWriter$WriterBuilder extends Java.java.lang.Object {
                create(): Java.GraphWriter;
                createP(): Promise<Java.GraphWriter>;
            }
            module GraphWriter$WriterBuilder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface GryoIo extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Io {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mapper(): Java.GryoMapper$Builder;
                mapperP(): Promise<Java.GryoMapper$Builder>;
                mapper(): Java.Mapper$Builder;
                mapperP(): Promise<Java.Mapper$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reader(): Java.GraphReader$ReaderBuilder;
                readerP(): Promise<Java.GraphReader$ReaderBuilder>;
                reader(): Java.GryoReader$Builder;
                readerP(): Promise<Java.GryoReader$Builder>;
                readGraph(arg0: string_t): void;
                readGraphP(arg0: string_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                writeGraph(arg0: string_t): void;
                writeGraphP(arg0: string_t): Promise<void>;
                writer(): Java.GraphWriter$WriterBuilder;
                writerP(): Promise<Java.GraphWriter$WriterBuilder>;
                writer(): Java.GryoWriter$Builder;
                writerP(): Promise<Java.GryoWriter$Builder>;
            }
            module GryoIo {
                interface Static {
                    new (arg0: Java.IoRegistry, arg1: Java.Graph): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo;
                    build(): Java.Io$Builder;
                    buildP(): Promise<Java.Io$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface GryoIo$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Io$Builder {
                create(): Java.GryoIo;
                createP(): Promise<Java.GryoIo>;
                create(): Java.Io;
                createP(): Promise<Java.Io>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(arg0: Java.Graph): Java.Io$Builder;
                graphP(arg0: Java.Graph): Promise<Java.Io$Builder>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                registry(arg0: Java.IoRegistry): Java.Io$Builder;
                registryP(arg0: Java.IoRegistry): Promise<Java.Io$Builder>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GryoIo$Builder {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoIo$Builder;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface GryoMapper extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Mapper {
                createMapper(): object_t;
                createMapperP(): Promise<object_t>;
                createMapper(): object_t;
                createMapperP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getRegisteredClasses(): Java.List;
                getRegisteredClassesP(): Promise<Java.List>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GryoMapper {
                interface Static {
                    GIO: object_t[];
                    HEADER: object_t[];
                    build(): Java.GryoMapper$Builder;
                    buildP(): Promise<Java.GryoMapper$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface GryoMapper$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.Mapper$Builder {
                addCustom(arg0: Java.Class, arg1: object_t): Java.GryoMapper$Builder;
                addCustomP(arg0: Java.Class, arg1: object_t): Promise<Java.GryoMapper$Builder>;
                addCustom(arg0: Java.Class, arg1: Java.Function): Java.GryoMapper$Builder;
                addCustomP(arg0: Java.Class, arg1: Java.Function): Promise<Java.GryoMapper$Builder>;
                addCustom(...arg0: Java.Class[]): Java.GryoMapper$Builder;
                addCustom(arg0: array_t<Java.Class>): Java.GryoMapper$Builder;
                addCustomP(...arg0: Java.Class[]): Promise<Java.GryoMapper$Builder>;
                addCustomP(arg0: array_t<Java.Class>): Promise<Java.GryoMapper$Builder>;
                addRegistry(arg0: Java.IoRegistry): Java.GryoMapper$Builder;
                addRegistryP(arg0: Java.IoRegistry): Promise<Java.GryoMapper$Builder>;
                addRegistry(arg0: Java.IoRegistry): Java.Mapper$Builder;
                addRegistryP(arg0: Java.IoRegistry): Promise<Java.Mapper$Builder>;
                create(): Java.GryoMapper;
                createP(): Promise<Java.GryoMapper>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GryoMapper$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface GryoPool extends Java.java.lang.Object {
                doWithReader(arg0: Java.Function): object_t;
                doWithReaderP(arg0: Java.Function): Promise<object_t>;
                doWithWriter(arg0: Java.Consumer): void;
                doWithWriterP(arg0: Java.Consumer): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                offerReader(arg0: Java.GryoReader): void;
                offerReaderP(arg0: Java.GryoReader): Promise<void>;
                offerWriter(arg0: Java.GryoWriter): void;
                offerWriterP(arg0: Java.GryoWriter): Promise<void>;
                takeReader(): Java.GryoReader;
                takeReaderP(): Promise<Java.GryoReader>;
                takeWriter(): Java.GryoWriter;
                takeWriterP(): Promise<Java.GryoWriter>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GryoPool {
                interface Static {
                    CONFIG_IO_REGISTRY: string;
                    CONFIG_IO_GRYO_POOL_SIZE: string;
                    new (arg0: integer_t, arg1: Java.GryoPool$Type, arg2: object_t): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool;
                    new (arg0: object_t): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool;
                    new (arg0: integer_t): org.apache.tinkerpop.gremlin.structure.io.gryo.GryoPool;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface GryoPool$Type extends Java.java.lang.Enum {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GryoPool$Type {
                interface Static {
                    READER: Java.GryoPool$Type;
                    WRITER: Java.GryoPool$Type;
                    READER_WRITER: Java.GryoPool$Type;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.GryoPool$Type;
                    valueOfP(arg0: string_t): Promise<Java.GryoPool$Type>;
                    values(): Java.GryoPool$Type[];
                    valuesP(): Promise<Java.GryoPool$Type[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface GryoReader extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                readEdge(arg0: Java.InputStream, arg1: Java.Function): Java.Edge;
                readEdgeP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Edge>;
                readGraph(arg0: Java.InputStream, arg1: Java.Graph): void;
                readGraphP(arg0: Java.InputStream, arg1: Java.Graph): Promise<void>;
                readObject(arg0: Java.InputStream, arg1: Java.Class): object_t;
                readObjectP(arg0: Java.InputStream, arg1: Java.Class): Promise<object_t>;
                readProperty(arg0: Java.InputStream, arg1: Java.Function): Java.Property;
                readPropertyP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Property>;
                readVertex(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Java.Vertex;
                readVertexP(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Promise<Java.Vertex>;
                readVertex(arg0: Java.InputStream, arg1: Java.Function): Java.Vertex;
                readVertexP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.Vertex>;
                readVertexProperty(arg0: Java.InputStream, arg1: Java.Function): Java.VertexProperty;
                readVertexPropertyP(arg0: Java.InputStream, arg1: Java.Function): Promise<Java.VertexProperty>;
                readVertices(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Java.Iterator;
                readVerticesP(arg0: Java.InputStream, arg1: Java.Function, arg2: Java.Function, arg3: Java.Direction): Promise<Java.Iterator>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GryoReader {
                interface Static {
                    build(): Java.GryoReader$Builder;
                    buildP(): Promise<Java.GryoReader$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface GryoReader$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphReader$ReaderBuilder {
                batchSize(arg0: long_t): Java.GryoReader$Builder;
                batchSizeP(arg0: long_t): Promise<Java.GryoReader$Builder>;
                create(): Java.GryoReader;
                createP(): Promise<Java.GryoReader>;
                create(): Java.GraphReader;
                createP(): Promise<Java.GraphReader>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mapper(arg0: Java.GryoMapper): Java.GryoReader$Builder;
                mapperP(arg0: Java.GryoMapper): Promise<Java.GryoReader$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GryoReader$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface GryoWriter extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                writeEdge(arg0: Java.OutputStream, arg1: Java.Edge): void;
                writeEdgeP(arg0: Java.OutputStream, arg1: Java.Edge): Promise<void>;
                writeGraph(arg0: Java.OutputStream, arg1: Java.Graph): void;
                writeGraphP(arg0: Java.OutputStream, arg1: Java.Graph): Promise<void>;
                writeObject(arg0: Java.OutputStream, arg1: object_t): void;
                writeObjectP(arg0: Java.OutputStream, arg1: object_t): Promise<void>;
                writeProperty(arg0: Java.OutputStream, arg1: Java.Property): void;
                writePropertyP(arg0: Java.OutputStream, arg1: Java.Property): Promise<void>;
                writeVertex(arg0: Java.OutputStream, arg1: Java.Vertex, arg2: Java.Direction): void;
                writeVertexP(arg0: Java.OutputStream, arg1: Java.Vertex, arg2: Java.Direction): Promise<void>;
                writeVertex(arg0: Java.OutputStream, arg1: Java.Vertex): void;
                writeVertexP(arg0: Java.OutputStream, arg1: Java.Vertex): Promise<void>;
                writeVertexProperty(arg0: Java.OutputStream, arg1: Java.VertexProperty): void;
                writeVertexPropertyP(arg0: Java.OutputStream, arg1: Java.VertexProperty): Promise<void>;
                writeVertices(arg0: Java.OutputStream, arg1: Java.Iterator, arg2: Java.Direction): void;
                writeVerticesP(arg0: Java.OutputStream, arg1: Java.Iterator, arg2: Java.Direction): Promise<void>;
                writeVertices(arg0: Java.OutputStream, arg1: Java.Iterator): void;
                writeVerticesP(arg0: Java.OutputStream, arg1: Java.Iterator): Promise<void>;
            }
            module GryoWriter {
                interface Static {
                    build(): Java.GryoWriter$Builder;
                    buildP(): Promise<Java.GryoWriter$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface GryoWriter$Builder extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.io.GraphWriter$WriterBuilder {
                create(): Java.GryoWriter;
                createP(): Promise<Java.GryoWriter>;
                create(): Java.GraphWriter;
                createP(): Promise<Java.GraphWriter>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mapper(arg0: Java.GryoMapper): Java.GryoWriter$Builder;
                mapperP(arg0: Java.GryoMapper): Promise<Java.GryoWriter$Builder>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GryoWriter$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface VertexByteArrayInputStream extends Java.java.io.InputStream {
                available(): number;
                availableP(): Promise<number>;
                close(): void;
                closeP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mark(arg0: integer_t): void;
                markP(arg0: integer_t): Promise<void>;
                markSupported(): boolean;
                markSupportedP(): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                read(arg0: object_array_t, arg1: integer_t, arg2: integer_t): number;
                readP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<number>;
                read(arg0: object_array_t): number;
                readP(arg0: object_array_t): Promise<number>;
                read(): number;
                readP(): Promise<number>;
                readVertexBytes(): Java.ByteArrayOutputStream;
                readVertexBytesP(): Promise<Java.ByteArrayOutputStream>;
                reset(): void;
                resetP(): Promise<void>;
                skip(arg0: long_t): longValue_t;
                skipP(arg0: long_t): Promise<longValue_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module VertexByteArrayInputStream {
                interface Static {
                    new (arg0: Java.InputStream): org.apache.tinkerpop.gremlin.structure.io.gryo.VertexByteArrayInputStream;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io.gryo {
            interface VertexTerminator extends Java.java.lang.Object {
                terminal: object_t[];
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module VertexTerminator {
                interface Static {
                    INSTANCE: Java.VertexTerminator;
                    instance(): Java.VertexTerminator;
                    instanceP(): Promise<Java.VertexTerminator>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface Io extends Java.java.lang.Object {
                mapper(): Java.Mapper$Builder;
                mapperP(): Promise<Java.Mapper$Builder>;
                reader(): Java.GraphReader$ReaderBuilder;
                readerP(): Promise<Java.GraphReader$ReaderBuilder>;
                readGraph(arg0: string_t): void;
                readGraphP(arg0: string_t): Promise<void>;
                writeGraph(arg0: string_t): void;
                writeGraphP(arg0: string_t): Promise<void>;
                writer(): Java.GraphWriter$WriterBuilder;
                writerP(): Promise<Java.GraphWriter$WriterBuilder>;
            }
            module Io {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface Io$Builder extends Java.java.lang.Object {
                create(): Java.Io;
                createP(): Promise<Java.Io>;
                graph(arg0: Java.Graph): Java.Io$Builder;
                graphP(arg0: Java.Graph): Promise<Java.Io$Builder>;
                registry(arg0: Java.IoRegistry): Java.Io$Builder;
                registryP(arg0: Java.IoRegistry): Promise<Java.Io$Builder>;
            }
            module Io$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface Io$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Io$Exceptions {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.io.Io$Exceptions;
                    readerFormatIsForFullGraphSerializationOnly(arg0: Java.Class): object_t;
                    readerFormatIsForFullGraphSerializationOnlyP(arg0: Java.Class): Promise<object_t>;
                    writerFormatIsForFullGraphSerializationOnly(arg0: Java.Class): object_t;
                    writerFormatIsForFullGraphSerializationOnlyP(arg0: Java.Class): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface IoCore extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module IoCore {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.io.IoCore;
                    graphml(): Java.Io$Builder;
                    graphmlP(): Promise<Java.Io$Builder>;
                    graphson(): Java.Io$Builder;
                    graphsonP(): Promise<Java.Io$Builder>;
                    gryo(): Java.Io$Builder;
                    gryoP(): Promise<Java.Io$Builder>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface IoRegistry extends Java.java.lang.Object {
                find(arg0: Java.Class, arg1: Java.Class): Java.List;
                findP(arg0: Java.Class, arg1: Java.Class): Promise<Java.List>;
                find(arg0: Java.Class): Java.List;
                findP(arg0: Java.Class): Promise<Java.List>;
            }
            module IoRegistry {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface Mapper extends Java.java.lang.Object {
                createMapper(): object_t;
                createMapperP(): Promise<object_t>;
            }
            module Mapper {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.io {
            interface Mapper$Builder extends Java.java.lang.Object {
                addRegistry(arg0: Java.IoRegistry): Java.Mapper$Builder;
                addRegistryP(arg0: Java.IoRegistry): Promise<Java.Mapper$Builder>;
            }
            module Mapper$Builder {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Property extends Java.java.lang.Object {
                element(): Java.Element;
                elementP(): Promise<Java.Element>;
                ifPresent(arg0: Java.Consumer): void;
                ifPresentP(arg0: Java.Consumer): Promise<void>;
                isPresent(): boolean;
                isPresentP(): Promise<boolean>;
                key(): string;
                keyP(): Promise<string>;
                orElse(arg0: object_t): object_t;
                orElseP(arg0: object_t): Promise<object_t>;
                orElseGet(arg0: Java.Supplier): object_t;
                orElseGetP(arg0: Java.Supplier): Promise<object_t>;
                orElseThrow(arg0: Java.Supplier): object_t;
                orElseThrowP(arg0: Java.Supplier): Promise<object_t>;
                remove(): void;
                removeP(): Promise<void>;
                value(): object_t;
                valueP(): Promise<object_t>;
            }
            module Property {
                interface Static {
                    empty(): Java.Property;
                    emptyP(): Promise<Java.Property>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Property$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Property$Exceptions {
                interface Static {
                    dataTypeOfPropertyValueNotSupported(arg0: object_t): object_t;
                    dataTypeOfPropertyValueNotSupportedP(arg0: object_t): Promise<object_t>;
                    propertyDoesNotExist(arg0: Java.Element, arg1: string_t): object_t;
                    propertyDoesNotExistP(arg0: Java.Element, arg1: string_t): Promise<object_t>;
                    propertyDoesNotExist(): object_t;
                    propertyDoesNotExistP(): Promise<object_t>;
                    propertyKeyCanNotBeAHiddenKey(arg0: string_t): object_t;
                    propertyKeyCanNotBeAHiddenKeyP(arg0: string_t): Promise<object_t>;
                    propertyKeyCanNotBeEmpty(): object_t;
                    propertyKeyCanNotBeEmptyP(): Promise<object_t>;
                    propertyKeyCanNotBeNull(): object_t;
                    propertyKeyCanNotBeNullP(): Promise<object_t>;
                    propertyRemovalNotSupported(): object_t;
                    propertyRemovalNotSupportedP(): Promise<object_t>;
                    propertyValueCanNotBeNull(): object_t;
                    propertyValueCanNotBeNullP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface PropertyType extends Java.java.lang.Enum {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                forProperties(): boolean;
                forPropertiesP(): Promise<boolean>;
                forValues(): boolean;
                forValuesP(): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module PropertyType {
                interface Static {
                    PROPERTY: Java.PropertyType;
                    VALUE: Java.PropertyType;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.PropertyType;
                    valueOfP(arg0: string_t): Promise<Java.PropertyType>;
                    values(): Java.PropertyType[];
                    valuesP(): Promise<Java.PropertyType[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface T extends Java.java.lang.Enum, Java.java.util.function_.Function {
                andThen(arg0: Java.Function): Java.Function;
                andThenP(arg0: Java.Function): Promise<Java.Function>;
                apply(arg0: Java.Element): object_t;
                applyP(arg0: Java.Element): Promise<object_t>;
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                compose(arg0: Java.Function): Java.Function;
                composeP(arg0: Java.Function): Promise<Java.Function>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getAccessor(): string;
                getAccessorP(): Promise<string>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module T {
                interface Static {
                    label: Java.T;
                    id: Java.T;
                    key: Java.T;
                    value: Java.T;
                    fromString(arg0: string_t): Java.T;
                    fromStringP(arg0: string_t): Promise<Java.T>;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.T;
                    valueOfP(arg0: string_t): Promise<Java.T>;
                    values(): Java.T[];
                    valuesP(): Promise<Java.T[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Transaction extends Java.java.lang.Object {
                addTransactionListener(arg0: Java.Consumer): void;
                addTransactionListenerP(arg0: Java.Consumer): Promise<void>;
                clearTransactionListeners(): void;
                clearTransactionListenersP(): Promise<void>;
                close(): void;
                closeP(): Promise<void>;
                commit(): void;
                commitP(): Promise<void>;
                create(): Java.Graph;
                createP(): Promise<Java.Graph>;
                isOpen(): boolean;
                isOpenP(): Promise<boolean>;
                onClose(arg0: Java.Consumer): Java.Transaction;
                onCloseP(arg0: Java.Consumer): Promise<Java.Transaction>;
                onReadWrite(arg0: Java.Consumer): Java.Transaction;
                onReadWriteP(arg0: Java.Consumer): Promise<Java.Transaction>;
                open(): void;
                openP(): Promise<void>;
                readWrite(): void;
                readWriteP(): Promise<void>;
                removeTransactionListener(arg0: Java.Consumer): void;
                removeTransactionListenerP(arg0: Java.Consumer): Promise<void>;
                rollback(): void;
                rollbackP(): Promise<void>;
                submit(arg0: Java.Function): Java.Transaction$Workload;
                submitP(arg0: Java.Function): Promise<Java.Transaction$Workload>;
            }
            module Transaction {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Transaction$CLOSE_BEHAVIOR extends Java.java.lang.Enum, Java.java.util.function_.Consumer {
                accept(arg0: object_t): void;
                acceptP(arg0: object_t): Promise<void>;
                andThen(arg0: Java.Consumer): Java.Consumer;
                andThenP(arg0: Java.Consumer): Promise<Java.Consumer>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Transaction$CLOSE_BEHAVIOR {
                interface Static {
                    COMMIT: Java.Transaction$CLOSE_BEHAVIOR;
                    ROLLBACK: Java.Transaction$CLOSE_BEHAVIOR;
                    MANUAL: Java.Transaction$CLOSE_BEHAVIOR;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.Transaction$CLOSE_BEHAVIOR;
                    valueOfP(arg0: string_t): Promise<Java.Transaction$CLOSE_BEHAVIOR>;
                    values(): Java.Transaction$CLOSE_BEHAVIOR[];
                    valuesP(): Promise<Java.Transaction$CLOSE_BEHAVIOR[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Transaction$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Transaction$Exceptions {
                interface Static {
                    onCloseBehaviorCannotBeNull(): object_t;
                    onCloseBehaviorCannotBeNullP(): Promise<object_t>;
                    onReadWriteBehaviorCannotBeNull(): object_t;
                    onReadWriteBehaviorCannotBeNullP(): Promise<object_t>;
                    openTransactionsOnClose(): object_t;
                    openTransactionsOnCloseP(): Promise<object_t>;
                    threadedTransactionsNotSupported(): object_t;
                    threadedTransactionsNotSupportedP(): Promise<object_t>;
                    transactionAlreadyOpen(): object_t;
                    transactionAlreadyOpenP(): Promise<object_t>;
                    transactionMustBeOpenToReadWrite(): object_t;
                    transactionMustBeOpenToReadWriteP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Transaction$READ_WRITE_BEHAVIOR extends Java.java.lang.Enum, Java.java.util.function_.Consumer {
                accept(arg0: object_t): void;
                acceptP(arg0: object_t): Promise<void>;
                andThen(arg0: Java.Consumer): Java.Consumer;
                andThenP(arg0: Java.Consumer): Promise<Java.Consumer>;
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Transaction$READ_WRITE_BEHAVIOR {
                interface Static {
                    AUTO: Java.Transaction$READ_WRITE_BEHAVIOR;
                    MANUAL: Java.Transaction$READ_WRITE_BEHAVIOR;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.Transaction$READ_WRITE_BEHAVIOR;
                    valueOfP(arg0: string_t): Promise<Java.Transaction$READ_WRITE_BEHAVIOR>;
                    values(): Java.Transaction$READ_WRITE_BEHAVIOR[];
                    valuesP(): Promise<Java.Transaction$READ_WRITE_BEHAVIOR[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Transaction$Status extends Java.java.lang.Enum {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Transaction$Status {
                interface Static {
                    COMMIT: Java.Transaction$Status;
                    ROLLBACK: Java.Transaction$Status;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.Transaction$Status;
                    valueOfP(arg0: string_t): Promise<Java.Transaction$Status>;
                    values(): Java.Transaction$Status[];
                    valuesP(): Promise<Java.Transaction$Status[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Transaction$Workload extends Java.java.lang.Object {
                attempt(arg0: Java.BiFunction): object_t;
                attemptP(arg0: Java.BiFunction): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                exponentialBackoff(arg0: integer_t, arg1: long_t, arg2: Java.Set): object_t;
                exponentialBackoffP(arg0: integer_t, arg1: long_t, arg2: Java.Set): Promise<object_t>;
                exponentialBackoff(arg0: integer_t, arg1: long_t): object_t;
                exponentialBackoffP(arg0: integer_t, arg1: long_t): Promise<object_t>;
                exponentialBackoff(arg0: integer_t): object_t;
                exponentialBackoffP(arg0: integer_t): Promise<object_t>;
                exponentialBackoff(): object_t;
                exponentialBackoffP(): Promise<object_t>;
                fireAndForget(): object_t;
                fireAndForgetP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                oneAndDone(): object_t;
                oneAndDoneP(): Promise<object_t>;
                retry(arg0: integer_t, arg1: long_t, arg2: Java.Set): object_t;
                retryP(arg0: integer_t, arg1: long_t, arg2: Java.Set): Promise<object_t>;
                retry(arg0: integer_t, arg1: long_t): object_t;
                retryP(arg0: integer_t, arg1: long_t): Promise<object_t>;
                retry(arg0: integer_t): object_t;
                retryP(arg0: integer_t): Promise<object_t>;
                retry(): object_t;
                retryP(): Promise<object_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Transaction$Workload {
                interface Static {
                    DEFAULT_DELAY_MS: longValue_t;
                    DEFAULT_TRIES: number;
                    new (arg0: Java.Graph, arg1: Java.Function): org.apache.tinkerpop.gremlin.structure.Transaction$Workload;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface AbstractTransaction extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.Transaction {
                addTransactionListener(arg0: Java.Consumer): void;
                addTransactionListenerP(arg0: Java.Consumer): Promise<void>;
                clearTransactionListeners(): void;
                clearTransactionListenersP(): Promise<void>;
                close(): void;
                closeP(): Promise<void>;
                commit(): void;
                commitP(): Promise<void>;
                create(): Java.Graph;
                createP(): Promise<Java.Graph>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isOpen(): boolean;
                isOpenP(): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                onClose(arg0: Java.Consumer): Java.Transaction;
                onCloseP(arg0: Java.Consumer): Promise<Java.Transaction>;
                onReadWrite(arg0: Java.Consumer): Java.Transaction;
                onReadWriteP(arg0: Java.Consumer): Promise<Java.Transaction>;
                open(): void;
                openP(): Promise<void>;
                readWrite(): void;
                readWriteP(): Promise<void>;
                removeTransactionListener(arg0: Java.Consumer): void;
                removeTransactionListenerP(arg0: Java.Consumer): Promise<void>;
                rollback(): void;
                rollbackP(): Promise<void>;
                submit(arg0: Java.Function): Java.Transaction$Workload;
                submitP(arg0: Java.Function): Promise<Java.Transaction$Workload>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module AbstractTransaction {
                interface Static {
                    new (arg0: Java.Graph): org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface AbstractTransaction$TransactionException extends Java.java.lang.Object {
                addSuppressed(arg0: object_t): void;
                addSuppressedP(arg0: object_t): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                fillInStackTrace(): object_t;
                fillInStackTraceP(): Promise<object_t>;
                getCause(): object_t;
                getCauseP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getLocalizedMessage(): string;
                getLocalizedMessageP(): Promise<string>;
                getMessage(): string;
                getMessageP(): Promise<string>;
                getStackTrace(): object_t[];
                getStackTraceP(): Promise<object_t[]>;
                getSuppressed(): object_t[];
                getSuppressedP(): Promise<object_t[]>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                initCause(arg0: object_t): object_t;
                initCauseP(arg0: object_t): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                printStackTrace(arg0: object_t): void;
                printStackTraceP(arg0: object_t): Promise<void>;
                printStackTrace(arg0: object_t): void;
                printStackTraceP(arg0: object_t): Promise<void>;
                printStackTrace(): void;
                printStackTraceP(): Promise<void>;
                setStackTrace(arg0: object_array_t): void;
                setStackTraceP(arg0: object_array_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module AbstractTransaction$TransactionException {
                interface Static {
                    new (arg0: string_t, arg1: object_t): org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException;
                    new (arg0: object_t): org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException;
                    new (arg0: string_t): org.apache.tinkerpop.gremlin.structure.util.AbstractTransaction$TransactionException;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface Attachable extends Java.java.lang.Object {
                attach(arg0: Java.Function): object_t;
                attachP(arg0: Java.Function): Promise<object_t>;
                get(): object_t;
                getP(): Promise<object_t>;
            }
            module Attachable {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface Attachable$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Attachable$Exceptions {
                interface Static {
                    canNotGetAttachableFromHostGraph(arg0: Java.Attachable, arg1: Java.Graph): object_t;
                    canNotGetAttachableFromHostGraphP(arg0: Java.Attachable, arg1: Java.Graph): Promise<object_t>;
                    canNotGetAttachableFromHostVertex(arg0: Java.Attachable, arg1: Java.Vertex): object_t;
                    canNotGetAttachableFromHostVertexP(arg0: Java.Attachable, arg1: Java.Vertex): Promise<object_t>;
                    providedAttachableMustContainAGraphObject(arg0: Java.Attachable): object_t;
                    providedAttachableMustContainAGraphObjectP(arg0: Java.Attachable): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface Attachable$Method extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Attachable$Method {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.util.Attachable$Method;
                    create(arg0: Java.Host): Java.Function;
                    createP(arg0: Java.Host): Promise<Java.Function>;
                    createEdge(arg0: Java.Attachable, arg1: Java.Vertex): Java.Edge;
                    createEdgeP(arg0: Java.Attachable, arg1: Java.Vertex): Promise<Java.Edge>;
                    createEdge(arg0: Java.Attachable, arg1: Java.Graph): Java.Edge;
                    createEdgeP(arg0: Java.Attachable, arg1: Java.Graph): Promise<Java.Edge>;
                    createProperty(arg0: Java.Attachable, arg1: Java.Vertex): Java.Property;
                    createPropertyP(arg0: Java.Attachable, arg1: Java.Vertex): Promise<Java.Property>;
                    createProperty(arg0: Java.Attachable, arg1: Java.Graph): Java.Property;
                    createPropertyP(arg0: Java.Attachable, arg1: Java.Graph): Promise<Java.Property>;
                    createVertex(arg0: Java.Attachable, arg1: Java.Vertex): Java.Vertex;
                    createVertexP(arg0: Java.Attachable, arg1: Java.Vertex): Promise<Java.Vertex>;
                    createVertex(arg0: Java.Attachable, arg1: Java.Graph): Java.Vertex;
                    createVertexP(arg0: Java.Attachable, arg1: Java.Graph): Promise<Java.Vertex>;
                    createVertexProperty(arg0: Java.Attachable, arg1: Java.Vertex): Java.VertexProperty;
                    createVertexPropertyP(arg0: Java.Attachable, arg1: Java.Vertex): Promise<Java.VertexProperty>;
                    createVertexProperty(arg0: Java.Attachable, arg1: Java.Graph): Java.VertexProperty;
                    createVertexPropertyP(arg0: Java.Attachable, arg1: Java.Graph): Promise<Java.VertexProperty>;
                    get(arg0: Java.Host): Java.Function;
                    getP(arg0: Java.Host): Promise<Java.Function>;
                    getEdge(arg0: Java.Attachable, arg1: Java.Vertex): object_t;
                    getEdgeP(arg0: Java.Attachable, arg1: Java.Vertex): Promise<object_t>;
                    getEdge(arg0: Java.Attachable, arg1: Java.Graph): object_t;
                    getEdgeP(arg0: Java.Attachable, arg1: Java.Graph): Promise<object_t>;
                    getOrCreate(arg0: Java.Host): Java.Function;
                    getOrCreateP(arg0: Java.Host): Promise<Java.Function>;
                    getProperty(arg0: Java.Attachable, arg1: Java.Vertex): object_t;
                    getPropertyP(arg0: Java.Attachable, arg1: Java.Vertex): Promise<object_t>;
                    getProperty(arg0: Java.Attachable, arg1: Java.Graph): object_t;
                    getPropertyP(arg0: Java.Attachable, arg1: Java.Graph): Promise<object_t>;
                    getVertex(arg0: Java.Attachable, arg1: Java.Vertex): object_t;
                    getVertexP(arg0: Java.Attachable, arg1: Java.Vertex): Promise<object_t>;
                    getVertex(arg0: Java.Attachable, arg1: Java.Graph): object_t;
                    getVertexP(arg0: Java.Attachable, arg1: Java.Graph): Promise<object_t>;
                    getVertexProperty(arg0: Java.Attachable, arg1: Java.Vertex): object_t;
                    getVertexPropertyP(arg0: Java.Attachable, arg1: Java.Vertex): Promise<object_t>;
                    getVertexProperty(arg0: Java.Attachable, arg1: Java.Graph): object_t;
                    getVertexPropertyP(arg0: Java.Attachable, arg1: Java.Graph): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface Comparators extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Comparators {
                interface Static {
                    ELEMENT_COMPARATOR: Java.Comparator;
                    VERTEX_COMPARATOR: Java.Comparator;
                    EDGE_COMPARATOR: Java.Comparator;
                    PROPERTY_COMPARATOR: Java.Comparator;
                    PROPERTY_ENTRY_COMPARATOR: Java.Comparator;
                    OBJECT_ENTRY_COMPARATOR: Java.Comparator;
                    new (): org.apache.tinkerpop.gremlin.structure.util.Comparators;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util.detached {
            interface DetachedEdge extends Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement, Java.org.apache.tinkerpop.gremlin.structure.Edge {
                attach(arg0: Java.Function): object_t;
                attachP(arg0: Java.Function): Promise<object_t>;
                bothVertices(): Java.Iterator;
                bothVerticesP(): Promise<Java.Iterator>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                id(): object_t;
                idP(): Promise<object_t>;
                inVertex(): Java.Vertex;
                inVertexP(): Promise<Java.Vertex>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                outVertex(): Java.Vertex;
                outVertexP(): Promise<Java.Vertex>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                vertices(arg0: Java.Direction): Java.Iterator;
                verticesP(arg0: Java.Direction): Promise<Java.Iterator>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DetachedEdge {
                interface Static {
                    DEFAULT_LABEL: string;
                    new (arg0: object_t, arg1: string_t, arg2: Java.Map, arg3: object_t, arg4: object_t): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util.detached {
            interface DetachedElement extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.Element, Java.org.apache.tinkerpop.gremlin.structure.util.Attachable {
                attach(arg0: Java.Function): object_t;
                attachP(arg0: Java.Function): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                id(): object_t;
                idP(): Promise<object_t>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DetachedElement {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util.detached {
            interface DetachedFactory extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DetachedFactory {
                interface Static {
                    detach(arg0: Java.VertexProperty, arg1: boolean_t): Java.DetachedVertexProperty;
                    detachP(arg0: Java.VertexProperty, arg1: boolean_t): Promise<Java.DetachedVertexProperty>;
                    detach(arg0: Java.Path, arg1: boolean_t): Java.DetachedPath;
                    detachP(arg0: Java.Path, arg1: boolean_t): Promise<Java.DetachedPath>;
                    detach(arg0: Java.Element, arg1: boolean_t): Java.DetachedElement;
                    detachP(arg0: Java.Element, arg1: boolean_t): Promise<Java.DetachedElement>;
                    detach(arg0: Java.Vertex, arg1: boolean_t): Java.DetachedVertex;
                    detachP(arg0: Java.Vertex, arg1: boolean_t): Promise<Java.DetachedVertex>;
                    detach(arg0: Java.Edge, arg1: boolean_t): Java.DetachedEdge;
                    detachP(arg0: Java.Edge, arg1: boolean_t): Promise<Java.DetachedEdge>;
                    detach(arg0: object_t, arg1: boolean_t): object_t;
                    detachP(arg0: object_t, arg1: boolean_t): Promise<object_t>;
                    detach(arg0: Java.Property): Java.DetachedProperty;
                    detachP(arg0: Java.Property): Promise<Java.DetachedProperty>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util.detached {
            interface DetachedPath extends Java.org.apache.tinkerpop.gremlin.process.traversal.step.util.MutablePath, Java.org.apache.tinkerpop.gremlin.structure.util.Attachable {
                addLabel(arg0: string_t): void;
                addLabelP(arg0: string_t): Promise<void>;
                attach(arg0: Java.Function): Java.Path;
                attachP(arg0: Java.Function): Promise<Java.Path>;
                attach(arg0: Java.Function): object_t;
                attachP(arg0: Java.Function): Promise<object_t>;
                clone(): Java.MutablePath;
                cloneP(): Promise<Java.MutablePath>;
                clone(): Java.Path;
                cloneP(): Promise<Java.Path>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                extend(arg0: object_t, ...arg1: string_t[]): Java.Path;
                extend(arg0: object_t, arg1: array_t<string_t>): Java.Path;
                extendP(arg0: object_t, ...arg1: string_t[]): Promise<Java.Path>;
                extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Java.Path>;
                extend(arg0: object_t, arg1: Java.Set): Java.Path;
                extendP(arg0: object_t, arg1: Java.Set): Promise<Java.Path>;
                forEach(arg0: Java.BiConsumer): void;
                forEachP(arg0: Java.BiConsumer): Promise<void>;
                forEach(arg0: Java.Consumer): void;
                forEachP(arg0: Java.Consumer): Promise<void>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                get(arg0: integer_t): object_t;
                getP(arg0: integer_t): Promise<object_t>;
                get(): Java.Path;
                getP(): Promise<Java.Path>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasLabel(arg0: string_t): boolean;
                hasLabelP(arg0: string_t): Promise<boolean>;
                isSimple(): boolean;
                isSimpleP(): Promise<boolean>;
                labels(): Java.List;
                labelsP(): Promise<Java.List>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                objects(): Java.List;
                objectsP(): Promise<Java.List>;
                size(): number;
                sizeP(): Promise<number>;
                stream(): object_t;
                streamP(): Promise<object_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DetachedPath {
                interface Static {
                    make(): Java.Path;
                    makeP(): Promise<Java.Path>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util.detached {
            interface DetachedProperty extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.Property, Java.org.apache.tinkerpop.gremlin.structure.util.Attachable {
                attach(arg0: Java.Function): object_t;
                attachP(arg0: Java.Function): Promise<object_t>;
                element(): Java.Element;
                elementP(): Promise<Java.Element>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): Java.Property;
                getP(): Promise<Java.Property>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                ifPresent(arg0: Java.Consumer): void;
                ifPresentP(arg0: Java.Consumer): Promise<void>;
                isPresent(): boolean;
                isPresentP(): Promise<boolean>;
                key(): string;
                keyP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                orElse(arg0: object_t): object_t;
                orElseP(arg0: object_t): Promise<object_t>;
                orElseGet(arg0: Java.Supplier): object_t;
                orElseGetP(arg0: Java.Supplier): Promise<object_t>;
                orElseThrow(arg0: Java.Supplier): object_t;
                orElseThrowP(arg0: Java.Supplier): Promise<object_t>;
                remove(): void;
                removeP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                value(): object_t;
                valueP(): Promise<object_t>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DetachedProperty {
                interface Static {
                    new (arg0: string_t, arg1: object_t, arg2: Java.Element): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty;
                    new (arg0: string_t, arg1: object_t): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedProperty;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util.detached {
            interface DetachedVertex extends Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement, Java.org.apache.tinkerpop.gremlin.structure.Vertex {
                addEdge(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.Edge;
                addEdge(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.Edge;
                addEdgeP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.Edge>;
                addEdgeP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.Edge>;
                attach(arg0: Java.Function): object_t;
                attachP(arg0: Java.Function): Promise<object_t>;
                edges(arg0: Java.Direction, ...arg1: string_t[]): Java.Iterator;
                edges(arg0: Java.Direction, arg1: array_t<string_t>): Java.Iterator;
                edgesP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.Iterator>;
                edgesP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.Iterator>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                id(): object_t;
                idP(): Promise<object_t>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Java.VertexProperty;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Java.VertexProperty;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<Java.VertexProperty>;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<Java.VertexProperty>;
                property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Java.VertexProperty;
                property(arg0: string_t, arg1: object_t, arg2: object_array_t): Java.VertexProperty;
                propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<Java.VertexProperty>;
                propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<Java.VertexProperty>;
                property(arg0: string_t, arg1: object_t): Java.VertexProperty;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.VertexProperty>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.VertexProperty;
                propertyP(arg0: string_t): Promise<Java.VertexProperty>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                vertices(arg0: Java.Direction, ...arg1: string_t[]): Java.Iterator;
                vertices(arg0: Java.Direction, arg1: array_t<string_t>): Java.Iterator;
                verticesP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.Iterator>;
                verticesP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.Iterator>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DetachedVertex {
                interface Static {
                    DEFAULT_LABEL: string;
                    EMPTY_ARGS: object_t[];
                    new (arg0: object_t, arg1: string_t, arg2: Java.Map): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util.detached {
            interface DetachedVertexProperty extends Java.org.apache.tinkerpop.gremlin.structure.util.detached.DetachedElement, Java.org.apache.tinkerpop.gremlin.structure.VertexProperty {
                attach(arg0: Java.Function): object_t;
                attachP(arg0: Java.Function): Promise<object_t>;
                element(): Java.Element;
                elementP(): Promise<Java.Element>;
                element(): Java.Vertex;
                elementP(): Promise<Java.Vertex>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                id(): object_t;
                idP(): Promise<object_t>;
                ifPresent(arg0: Java.Consumer): void;
                ifPresentP(arg0: Java.Consumer): Promise<void>;
                isPresent(): boolean;
                isPresentP(): Promise<boolean>;
                key(): string;
                keyP(): Promise<string>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                orElse(arg0: object_t): object_t;
                orElseP(arg0: object_t): Promise<object_t>;
                orElseGet(arg0: Java.Supplier): object_t;
                orElseGetP(arg0: Java.Supplier): Promise<object_t>;
                orElseThrow(arg0: Java.Supplier): object_t;
                orElseThrowP(arg0: Java.Supplier): Promise<object_t>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                value(): object_t;
                valueP(): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module DetachedVertexProperty {
                interface Static {
                    DEFAULT_LABEL: string;
                    new (arg0: object_t, arg1: string_t, arg2: object_t, arg3: Java.Map, arg4: Java.Vertex): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty;
                    new (arg0: object_t, arg1: string_t, arg2: object_t, arg3: Java.Map): org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertexProperty;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface ElementHelper extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ElementHelper {
                interface Static {
                    areEqual(arg0: Java.VertexProperty, arg1: Java.VertexProperty): boolean;
                    areEqualP(arg0: Java.VertexProperty, arg1: Java.VertexProperty): Promise<boolean>;
                    areEqual(arg0: Java.Vertex, arg1: Java.Vertex): boolean;
                    areEqualP(arg0: Java.Vertex, arg1: Java.Vertex): Promise<boolean>;
                    areEqual(arg0: Java.Edge, arg1: Java.Edge): boolean;
                    areEqualP(arg0: Java.Edge, arg1: Java.Edge): Promise<boolean>;
                    areEqual(arg0: Java.VertexProperty, arg1: object_t): boolean;
                    areEqualP(arg0: Java.VertexProperty, arg1: object_t): Promise<boolean>;
                    areEqual(arg0: Java.Property, arg1: object_t): boolean;
                    areEqualP(arg0: Java.Property, arg1: object_t): Promise<boolean>;
                    areEqual(arg0: Java.Element, arg1: object_t): boolean;
                    areEqualP(arg0: Java.Element, arg1: object_t): Promise<boolean>;
                    asMap(...arg0: object_t[]): Java.Map;
                    asMap(arg0: object_array_t): Java.Map;
                    asMapP(...arg0: object_t[]): Promise<Java.Map>;
                    asMapP(arg0: object_array_t): Promise<Java.Map>;
                    asPairs(...arg0: object_t[]): Java.List;
                    asPairs(arg0: object_array_t): Java.List;
                    asPairsP(...arg0: object_t[]): Promise<Java.List>;
                    asPairsP(arg0: object_array_t): Promise<Java.List>;
                    attachProperties(arg0: Java.Vertex, arg1: Java.VertexProperty$Cardinality, ...arg2: object_t[]): void;
                    attachProperties(arg0: Java.Vertex, arg1: Java.VertexProperty$Cardinality, arg2: object_array_t): void;
                    attachPropertiesP(arg0: Java.Vertex, arg1: Java.VertexProperty$Cardinality, ...arg2: object_t[]): Promise<void>;
                    attachPropertiesP(arg0: Java.Vertex, arg1: Java.VertexProperty$Cardinality, arg2: object_array_t): Promise<void>;
                    attachProperties(arg0: Java.Element, ...arg1: object_t[]): void;
                    attachProperties(arg0: Java.Element, arg1: object_array_t): void;
                    attachPropertiesP(arg0: Java.Element, ...arg1: object_t[]): Promise<void>;
                    attachPropertiesP(arg0: Java.Element, arg1: object_array_t): Promise<void>;
                    getIdValue(...arg0: object_t[]): object_t;
                    getIdValue(arg0: object_array_t): object_t;
                    getIdValueP(...arg0: object_t[]): Promise<object_t>;
                    getIdValueP(arg0: object_array_t): Promise<object_t>;
                    getKeys(...arg0: object_t[]): Java.Set;
                    getKeys(arg0: object_array_t): Java.Set;
                    getKeysP(...arg0: object_t[]): Promise<Java.Set>;
                    getKeysP(arg0: object_array_t): Promise<Java.Set>;
                    getLabelValue(...arg0: object_t[]): object_t;
                    getLabelValue(arg0: object_array_t): object_t;
                    getLabelValueP(...arg0: object_t[]): Promise<object_t>;
                    getLabelValueP(arg0: object_array_t): Promise<object_t>;
                    getOrAddVertex(arg0: Java.Graph, arg1: object_t, arg2: string_t): Java.Vertex;
                    getOrAddVertexP(arg0: Java.Graph, arg1: object_t, arg2: string_t): Promise<Java.Vertex>;
                    getProperties(arg0: Java.Element, arg1: boolean_t, arg2: boolean_t, arg3: Java.Set): object_t[];
                    getPropertiesP(arg0: Java.Element, arg1: boolean_t, arg2: boolean_t, arg3: Java.Set): Promise<object_t[]>;
                    hashCode(arg0: Java.Property): number;
                    hashCodeP(arg0: Java.Property): Promise<number>;
                    hashCode(arg0: Java.Element): number;
                    hashCodeP(arg0: Java.Element): Promise<number>;
                    haveEqualIds(arg0: Java.Element, arg1: Java.Element): boolean;
                    haveEqualIdsP(arg0: Java.Element, arg1: Java.Element): Promise<boolean>;
                    idExists(arg0: object_t, ...arg1: object_t[]): boolean;
                    idExists(arg0: object_t, arg1: object_array_t): boolean;
                    idExistsP(arg0: object_t, ...arg1: object_t[]): Promise<boolean>;
                    idExistsP(arg0: object_t, arg1: object_array_t): Promise<boolean>;
                    keyExists(arg0: string_t, ...arg1: string_t[]): boolean;
                    keyExists(arg0: string_t, arg1: array_t<string_t>): boolean;
                    keyExistsP(arg0: string_t, ...arg1: string_t[]): Promise<boolean>;
                    keyExistsP(arg0: string_t, arg1: array_t<string_t>): Promise<boolean>;
                    legalPropertyKeyValueArray(...arg0: object_t[]): void;
                    legalPropertyKeyValueArray(arg0: object_array_t): void;
                    legalPropertyKeyValueArrayP(...arg0: object_t[]): Promise<void>;
                    legalPropertyKeyValueArrayP(arg0: object_array_t): Promise<void>;
                    propertyMap(arg0: Java.Element, ...arg1: string_t[]): Java.Map;
                    propertyMap(arg0: Java.Element, arg1: array_t<string_t>): Java.Map;
                    propertyMapP(arg0: Java.Element, ...arg1: string_t[]): Promise<Java.Map>;
                    propertyMapP(arg0: Java.Element, arg1: array_t<string_t>): Promise<Java.Map>;
                    propertyValueMap(arg0: Java.Element, ...arg1: string_t[]): Java.Map;
                    propertyValueMap(arg0: Java.Element, arg1: array_t<string_t>): Java.Map;
                    propertyValueMapP(arg0: Java.Element, ...arg1: string_t[]): Promise<Java.Map>;
                    propertyValueMapP(arg0: Java.Element, arg1: array_t<string_t>): Promise<Java.Map>;
                    remove(arg0: Java.T, ...arg1: object_t[]): object_t;
                    remove(arg0: Java.T, arg1: object_array_t): object_t;
                    removeP(arg0: Java.T, ...arg1: object_t[]): Promise<object_t>;
                    removeP(arg0: Java.T, arg1: object_array_t): Promise<object_t>;
                    remove(arg0: string_t, ...arg1: object_t[]): object_t;
                    remove(arg0: string_t, arg1: object_array_t): object_t;
                    removeP(arg0: string_t, ...arg1: object_t[]): Promise<object_t>;
                    removeP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
                    replaceKey(arg0: object_array_t, arg1: object_t, arg2: object_t): object_t[];
                    replaceKeyP(arg0: object_array_t, arg1: object_t, arg2: object_t): Promise<object_t[]>;
                    stageVertexProperty(arg0: Java.Vertex, arg1: Java.VertexProperty$Cardinality, arg2: string_t, arg3: object_t, ...arg4: object_t[]): object_t;
                    stageVertexProperty(arg0: Java.Vertex, arg1: Java.VertexProperty$Cardinality, arg2: string_t, arg3: object_t, arg4: object_array_t): object_t;
                    stageVertexPropertyP(arg0: Java.Vertex, arg1: Java.VertexProperty$Cardinality, arg2: string_t, arg3: object_t, ...arg4: object_t[]): Promise<object_t>;
                    stageVertexPropertyP(arg0: Java.Vertex, arg1: Java.VertexProperty$Cardinality, arg2: string_t, arg3: object_t, arg4: object_array_t): Promise<object_t>;
                    upsert(arg0: object_array_t, arg1: object_t, arg2: object_t): object_t[];
                    upsertP(arg0: object_array_t, arg1: object_t, arg2: object_t): Promise<object_t[]>;
                    validateLabel(arg0: string_t): void;
                    validateLabelP(arg0: string_t): Promise<void>;
                    validateProperty(arg0: string_t, arg1: object_t): void;
                    validatePropertyP(arg0: string_t, arg1: object_t): Promise<void>;
                    vertexPropertyMap(arg0: Java.Vertex, ...arg1: string_t[]): Java.Map;
                    vertexPropertyMap(arg0: Java.Vertex, arg1: array_t<string_t>): Java.Map;
                    vertexPropertyMapP(arg0: Java.Vertex, ...arg1: string_t[]): Promise<Java.Map>;
                    vertexPropertyMapP(arg0: Java.Vertex, arg1: array_t<string_t>): Promise<Java.Map>;
                    vertexPropertyValueMap(arg0: Java.Vertex, ...arg1: string_t[]): Java.Map;
                    vertexPropertyValueMap(arg0: Java.Vertex, arg1: array_t<string_t>): Java.Map;
                    vertexPropertyValueMapP(arg0: Java.Vertex, ...arg1: string_t[]): Promise<Java.Map>;
                    vertexPropertyValueMapP(arg0: Java.Vertex, arg1: array_t<string_t>): Promise<Java.Map>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface FeatureDescriptor extends Java.java.lang.Object {
                annotationType(): Java.Class;
                annotationTypeP(): Promise<Java.Class>;
                description(): string;
                descriptionP(): Promise<string>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                toString(): string;
                toStringP(): Promise<string>;
            }
            module FeatureDescriptor {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface GraphFactory extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphFactory {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.util.GraphFactory;
                    open(arg0: object_t): Java.Graph;
                    openP(arg0: object_t): Promise<Java.Graph>;
                    open(arg0: string_t): Java.Graph;
                    openP(arg0: string_t): Promise<Java.Graph>;
                    open(arg0: Java.Map): Java.Graph;
                    openP(arg0: Java.Map): Promise<Java.Graph>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface GraphVariableHelper extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module GraphVariableHelper {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.structure.util.GraphVariableHelper;
                    validateVariable(arg0: string_t, arg1: object_t): void;
                    validateVariableP(arg0: string_t, arg1: object_t): Promise<void>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface Host extends Java.java.lang.Object {
            }
            module Host {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure.util {
            interface StringFactory extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module StringFactory {
                interface Static {
                    computeResultString(arg0: Java.ComputerResult): string;
                    computeResultStringP(arg0: Java.ComputerResult): Promise<string>;
                    edgeString(arg0: Java.Edge): string;
                    edgeStringP(arg0: Java.Edge): Promise<string>;
                    featureString(arg0: Java.Graph$Features): string;
                    featureStringP(arg0: Java.Graph$Features): Promise<string>;
                    graphComputerString(arg0: Java.GraphComputer): string;
                    graphComputerStringP(arg0: Java.GraphComputer): Promise<string>;
                    graphString(arg0: Java.Graph, arg1: string_t): string;
                    graphStringP(arg0: Java.Graph, arg1: string_t): Promise<string>;
                    graphVariablesString(arg0: Java.Graph$Variables): string;
                    graphVariablesStringP(arg0: Java.Graph$Variables): Promise<string>;
                    mapReduceString(arg0: Java.MapReduce, arg1: string_t): string;
                    mapReduceStringP(arg0: Java.MapReduce, arg1: string_t): Promise<string>;
                    mapReduceString(arg0: Java.MapReduce): string;
                    mapReduceStringP(arg0: Java.MapReduce): Promise<string>;
                    memoryString(arg0: Java.Memory): string;
                    memoryStringP(arg0: Java.Memory): Promise<string>;
                    propertyString(arg0: Java.Property): string;
                    propertyStringP(arg0: Java.Property): Promise<string>;
                    stepString(arg0: Java.Step, ...arg1: object_t[]): string;
                    stepString(arg0: Java.Step, arg1: object_array_t): string;
                    stepStringP(arg0: Java.Step, ...arg1: object_t[]): Promise<string>;
                    stepStringP(arg0: Java.Step, arg1: object_array_t): Promise<string>;
                    traversalEngineString(arg0: Java.TraversalEngine): string;
                    traversalEngineStringP(arg0: Java.TraversalEngine): Promise<string>;
                    traversalSideEffectsString(arg0: Java.TraversalSideEffects): string;
                    traversalSideEffectsStringP(arg0: Java.TraversalSideEffects): Promise<string>;
                    traversalSourceString(arg0: Java.TraversalSource): string;
                    traversalSourceStringP(arg0: Java.TraversalSource): Promise<string>;
                    traversalStrategiesString(arg0: Java.TraversalStrategies): string;
                    traversalStrategiesStringP(arg0: Java.TraversalStrategies): Promise<string>;
                    traversalStrategyString(arg0: Java.TraversalStrategy): string;
                    traversalStrategyStringP(arg0: Java.TraversalStrategy): Promise<string>;
                    traversalString(arg0: Java.Traversal$Admin): string;
                    traversalStringP(arg0: Java.Traversal$Admin): Promise<string>;
                    vertexProgramString(arg0: Java.VertexProgram, arg1: string_t): string;
                    vertexProgramStringP(arg0: Java.VertexProgram, arg1: string_t): Promise<string>;
                    vertexProgramString(arg0: Java.VertexProgram): string;
                    vertexProgramStringP(arg0: Java.VertexProgram): Promise<string>;
                    vertexString(arg0: Java.Vertex): string;
                    vertexStringP(arg0: Java.Vertex): Promise<string>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Vertex extends Java.org.apache.tinkerpop.gremlin.structure.Element, Java.org.apache.tinkerpop.gremlin.structure.util.Host {
                addEdge(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.Edge;
                addEdge(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.Edge;
                addEdgeP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.Edge>;
                addEdgeP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.Edge>;
                edges(arg0: Java.Direction, ...arg1: string_t[]): Java.Iterator;
                edges(arg0: Java.Direction, arg1: array_t<string_t>): Java.Iterator;
                edgesP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.Iterator>;
                edgesP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.Iterator>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                id(): object_t;
                idP(): Promise<object_t>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Java.VertexProperty;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Java.VertexProperty;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<Java.VertexProperty>;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<Java.VertexProperty>;
                property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Java.VertexProperty;
                property(arg0: string_t, arg1: object_t, arg2: object_array_t): Java.VertexProperty;
                propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<Java.VertexProperty>;
                propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<Java.VertexProperty>;
                property(arg0: string_t, arg1: object_t): Java.VertexProperty;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.VertexProperty>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.VertexProperty;
                propertyP(arg0: string_t): Promise<Java.VertexProperty>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                vertices(arg0: Java.Direction, ...arg1: string_t[]): Java.Iterator;
                vertices(arg0: Java.Direction, arg1: array_t<string_t>): Java.Iterator;
                verticesP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.Iterator>;
                verticesP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.Iterator>;
            }
            module Vertex {
                interface Static {
                    DEFAULT_LABEL: string;
                    EMPTY_ARGS: object_t[];
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface Vertex$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Vertex$Exceptions {
                interface Static {
                    edgeAdditionsNotSupported(): object_t;
                    edgeAdditionsNotSupportedP(): Promise<object_t>;
                    multiplePropertiesExistForProvidedKey(arg0: string_t): object_t;
                    multiplePropertiesExistForProvidedKeyP(arg0: string_t): Promise<object_t>;
                    userSuppliedIdsNotSupported(): object_t;
                    userSuppliedIdsNotSupportedP(): Promise<object_t>;
                    userSuppliedIdsOfThisTypeNotSupported(): object_t;
                    userSuppliedIdsOfThisTypeNotSupportedP(): Promise<object_t>;
                    vertexRemovalNotSupported(): object_t;
                    vertexRemovalNotSupportedP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface VertexProperty extends Java.org.apache.tinkerpop.gremlin.structure.Element, Java.org.apache.tinkerpop.gremlin.structure.Property {
                element(): Java.Element;
                elementP(): Promise<Java.Element>;
                element(): Java.Vertex;
                elementP(): Promise<Java.Vertex>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                id(): object_t;
                idP(): Promise<object_t>;
                ifPresent(arg0: Java.Consumer): void;
                ifPresentP(arg0: Java.Consumer): Promise<void>;
                isPresent(): boolean;
                isPresentP(): Promise<boolean>;
                key(): string;
                keyP(): Promise<string>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                orElse(arg0: object_t): object_t;
                orElseP(arg0: object_t): Promise<object_t>;
                orElseGet(arg0: Java.Supplier): object_t;
                orElseGetP(arg0: Java.Supplier): Promise<object_t>;
                orElseThrow(arg0: Java.Supplier): object_t;
                orElseThrowP(arg0: Java.Supplier): Promise<object_t>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                value(): object_t;
                valueP(): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
            }
            module VertexProperty {
                interface Static {
                    DEFAULT_LABEL: string;
                    empty(): Java.VertexProperty;
                    emptyP(): Promise<Java.VertexProperty>;
                    empty(): Java.Property;
                    emptyP(): Promise<Java.Property>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface VertexProperty$Cardinality extends Java.java.lang.Enum {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module VertexProperty$Cardinality {
                interface Static {
                    single: Java.VertexProperty$Cardinality;
                    list: Java.VertexProperty$Cardinality;
                    set: Java.VertexProperty$Cardinality;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.VertexProperty$Cardinality;
                    valueOfP(arg0: string_t): Promise<Java.VertexProperty$Cardinality>;
                    values(): Java.VertexProperty$Cardinality[];
                    valuesP(): Promise<Java.VertexProperty$Cardinality[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.structure {
            interface VertexProperty$Exceptions extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module VertexProperty$Exceptions {
                interface Static {
                    metaPropertiesNotSupported(): object_t;
                    metaPropertiesNotSupportedP(): Promise<object_t>;
                    multiPropertiesNotSupported(): object_t;
                    multiPropertiesNotSupportedP(): Promise<object_t>;
                    userSuppliedIdsNotSupported(): object_t;
                    userSuppliedIdsNotSupportedP(): Promise<object_t>;
                    userSuppliedIdsOfThisTypeNotSupported(): object_t;
                    userSuppliedIdsOfThisTypeNotSupportedP(): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
            interface TinkerComputerResult extends Java.java.lang.Object {
                close(): void;
                closeP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                memory(): Java.Memory;
                memoryP(): Promise<Java.Memory>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerComputerResult {
                interface Static {
                    new (arg0: Java.Graph, arg1: Java.Memory): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerComputerResult;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
            interface TinkerGraphComputer extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.computer.GraphComputer {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                features(): Java.GraphComputer$Features;
                featuresP(): Promise<Java.GraphComputer$Features>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mapReduce(arg0: Java.MapReduce): Java.GraphComputer;
                mapReduceP(arg0: Java.MapReduce): Promise<Java.GraphComputer>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                persist(arg0: Java.GraphComputer$Persist): Java.GraphComputer;
                persistP(arg0: Java.GraphComputer$Persist): Promise<Java.GraphComputer>;
                program(arg0: Java.VertexProgram): Java.GraphComputer;
                programP(arg0: Java.VertexProgram): Promise<Java.GraphComputer>;
                result(arg0: Java.GraphComputer$ResultGraph): Java.GraphComputer;
                resultP(arg0: Java.GraphComputer$ResultGraph): Promise<Java.GraphComputer>;
                submit(): object_t;
                submitP(): Promise<object_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerGraphComputer {
                interface Static {
                    new (arg0: Java.TinkerGraph): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphComputer;
                    engine(): Java.TraversalEngine;
                    engineP(): Promise<Java.TraversalEngine>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
            interface TinkerGraphView extends Java.java.lang.Object {
                addProperty(arg0: Java.TinkerVertex, arg1: string_t, arg2: object_t): Java.Property;
                addPropertyP(arg0: Java.TinkerVertex, arg1: string_t, arg2: object_t): Promise<Java.Property>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getProperties(arg0: Java.TinkerVertex): Java.List;
                getPropertiesP(arg0: Java.TinkerVertex): Promise<Java.List>;
                getProperty(arg0: Java.TinkerVertex, arg1: string_t): Java.List;
                getPropertyP(arg0: Java.TinkerVertex, arg1: string_t): Promise<Java.List>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                isComputeKey(arg0: string_t): boolean;
                isComputeKeyP(arg0: string_t): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                removeProperty(arg0: Java.TinkerVertex, arg1: string_t, arg2: Java.VertexProperty): void;
                removePropertyP(arg0: Java.TinkerVertex, arg1: string_t, arg2: Java.VertexProperty): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerGraphView {
                interface Static {
                    new (arg0: Java.Set): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
            interface TinkerMapEmitter extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$MapEmitter {
                reduceMap: Java.Map;
                mapQueue: object_t;
                emit(arg0: object_t, arg1: object_t): void;
                emitP(arg0: object_t, arg1: object_t): Promise<void>;
                emit(arg0: object_t): void;
                emitP(arg0: object_t): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerMapEmitter {
                interface Static {
                    new (arg0: boolean_t): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMapEmitter;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
            interface TinkerMemory extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.computer.Memory$Admin {
                memoryKeys: Java.Set;
                previousMap: Java.Map;
                currentMap: Java.Map;
                and(arg0: string_t, arg1: boolean_t): void;
                andP(arg0: string_t, arg1: boolean_t): Promise<void>;
                asImmutable(): Java.Memory;
                asImmutableP(): Promise<Java.Memory>;
                asMap(): Java.Map;
                asMapP(): Promise<Java.Map>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                exists(arg0: string_t): boolean;
                existsP(arg0: string_t): Promise<boolean>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getIteration(): number;
                getIterationP(): Promise<number>;
                getRuntime(): longValue_t;
                getRuntimeP(): Promise<longValue_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                incr(arg0: string_t, arg1: long_t): void;
                incrP(arg0: string_t, arg1: long_t): Promise<void>;
                incrIteration(): void;
                incrIterationP(): Promise<void>;
                isInitialIteration(): boolean;
                isInitialIterationP(): Promise<boolean>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                or(arg0: string_t, arg1: boolean_t): void;
                orP(arg0: string_t, arg1: boolean_t): Promise<void>;
                set(arg0: string_t, arg1: object_t): void;
                setP(arg0: string_t, arg1: object_t): Promise<void>;
                setIteration(arg0: integer_t): void;
                setIterationP(arg0: integer_t): Promise<void>;
                setRuntime(arg0: long_t): void;
                setRuntimeP(arg0: long_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerMemory {
                interface Static {
                    new (arg0: Java.VertexProgram, arg1: Java.Set): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMemory;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
            interface TinkerMessenger extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.computer.Messenger {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                receiveMessages(): Java.Iterator;
                receiveMessagesP(): Promise<Java.Iterator>;
                sendMessage(arg0: Java.MessageScope, arg1: object_t): void;
                sendMessageP(arg0: Java.MessageScope, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerMessenger {
                interface Static {
                    new (arg0: Java.Vertex, arg1: object_t, arg2: object_t): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerMessenger;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
            interface TinkerReduceEmitter extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.process.computer.MapReduce$ReduceEmitter {
                emit(arg0: object_t, arg1: object_t): void;
                emitP(arg0: object_t, arg1: object_t): Promise<void>;
                emit(arg0: object_t): void;
                emitP(arg0: object_t): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerReduceEmitter {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerReduceEmitter;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.process.computer {
            interface TinkerWorkerPool extends Java.java.lang.Object {
                close(): void;
                closeP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                executeMapReduce(arg0: Java.Consumer): void;
                executeMapReduceP(arg0: Java.Consumer): Promise<void>;
                executeVertexProgram(arg0: Java.Consumer): void;
                executeVertexProgramP(arg0: Java.Consumer): Promise<void>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                mapReduceWorkerEnd(arg0: Java.MapReduce$Stage): void;
                mapReduceWorkerEndP(arg0: Java.MapReduce$Stage): Promise<void>;
                mapReduceWorkerStart(arg0: Java.MapReduce$Stage): void;
                mapReduceWorkerStartP(arg0: Java.MapReduce$Stage): Promise<void>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setMapReduce(arg0: Java.MapReduce): void;
                setMapReduceP(arg0: Java.MapReduce): Promise<void>;
                setVertexProgram(arg0: Java.VertexProgram): void;
                setVertexProgramP(arg0: Java.VertexProgram): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                vertexProgramWorkerIterationEnd(arg0: Java.Memory): void;
                vertexProgramWorkerIterationEndP(arg0: Java.Memory): Promise<void>;
                vertexProgramWorkerIterationStart(arg0: Java.Memory): void;
                vertexProgramWorkerIterationStartP(arg0: Java.Memory): Promise<void>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerWorkerPool {
                interface Static {
                    new (arg0: integer_t): org.apache.tinkerpop.gremlin.tinkergraph.process.computer.TinkerWorkerPool;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerEdge extends Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement, Java.org.apache.tinkerpop.gremlin.structure.Edge {
                bothVertices(): Java.Iterator;
                bothVerticesP(): Promise<Java.Iterator>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                id(): object_t;
                idP(): Promise<object_t>;
                inVertex(): Java.Vertex;
                inVertexP(): Promise<Java.Vertex>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                outVertex(): Java.Vertex;
                outVertexP(): Promise<Java.Vertex>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                vertices(arg0: Java.Direction): Java.Iterator;
                verticesP(arg0: Java.Direction): Promise<Java.Iterator>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerEdge {
                interface Static {
                    DEFAULT_LABEL: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerElement extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.Element {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                id(): object_t;
                idP(): Promise<object_t>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerElement {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerFactory extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerFactory {
                interface Static {
                    createClassic(): Java.TinkerGraph;
                    createClassicP(): Promise<Java.TinkerGraph>;
                    createModern(): Java.TinkerGraph;
                    createModernP(): Promise<Java.TinkerGraph>;
                    createTheCrew(): Java.TinkerGraph;
                    createTheCrewP(): Promise<Java.TinkerGraph>;
                    generateClassic(arg0: Java.TinkerGraph): void;
                    generateClassicP(arg0: Java.TinkerGraph): Promise<void>;
                    generateModern(arg0: Java.TinkerGraph): void;
                    generateModernP(arg0: Java.TinkerGraph): Promise<void>;
                    generateTheCrew(arg0: Java.TinkerGraph): void;
                    generateTheCrewP(arg0: Java.TinkerGraph): Promise<void>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerGraph extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.Graph {
                addVertex(...arg0: object_t[]): Java.Vertex;
                addVertex(arg0: object_array_t): Java.Vertex;
                addVertexP(...arg0: object_t[]): Promise<Java.Vertex>;
                addVertexP(arg0: object_array_t): Promise<Java.Vertex>;
                addVertex(arg0: string_t): Java.Vertex;
                addVertexP(arg0: string_t): Promise<Java.Vertex>;
                clear(): void;
                clearP(): Promise<void>;
                close(): void;
                closeP(): Promise<void>;
                compute(arg0: Java.Class): Java.GraphComputer;
                computeP(arg0: Java.Class): Promise<Java.GraphComputer>;
                compute(): Java.GraphComputer;
                computeP(): Promise<Java.GraphComputer>;
                configuration(): object_t;
                configurationP(): Promise<object_t>;
                createIndex(arg0: string_t, arg1: Java.Class): void;
                createIndexP(arg0: string_t, arg1: Java.Class): Promise<void>;
                dropIndex(arg0: string_t, arg1: Java.Class): void;
                dropIndexP(arg0: string_t, arg1: Java.Class): Promise<void>;
                edges(...arg0: object_t[]): Java.Iterator;
                edges(arg0: object_array_t): Java.Iterator;
                edgesP(...arg0: object_t[]): Promise<Java.Iterator>;
                edgesP(arg0: object_array_t): Promise<Java.Iterator>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                features(): Java.Graph$Features;
                featuresP(): Promise<Java.Graph$Features>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getIndexedKeys(arg0: Java.Class): Java.Set;
                getIndexedKeysP(arg0: Java.Class): Promise<Java.Set>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                io(arg0: Java.Io$Builder): Java.Io;
                ioP(arg0: Java.Io$Builder): Promise<Java.Io>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                traversal(arg0: Java.TraversalSource$Builder): Java.TraversalSource;
                traversalP(arg0: Java.TraversalSource$Builder): Promise<Java.TraversalSource>;
                traversal(): Java.GraphTraversalSource;
                traversalP(): Promise<Java.GraphTraversalSource>;
                tx(): Java.Transaction;
                txP(): Promise<Java.Transaction>;
                variables(): Java.Graph$Variables;
                variablesP(): Promise<Java.Graph$Variables>;
                vertices(...arg0: object_t[]): Java.Iterator;
                vertices(arg0: object_array_t): Java.Iterator;
                verticesP(...arg0: object_t[]): Promise<Java.Iterator>;
                verticesP(arg0: object_array_t): Promise<Java.Iterator>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerGraph {
                interface Static {
                    CONFIG_VERTEX_ID: string;
                    CONFIG_EDGE_ID: string;
                    CONFIG_VERTEX_PROPERTY_ID: string;
                    GRAPH: string;
                    empty(): Java.TinkerGraph;
                    emptyP(): Promise<Java.TinkerGraph>;
                    open(arg0: object_t): Java.TinkerGraph;
                    openP(arg0: object_t): Promise<Java.TinkerGraph>;
                    open(): Java.TinkerGraph;
                    openP(): Promise<Java.TinkerGraph>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerGraph$DefaultIdManager extends Java.java.lang.Enum, Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$IdManager {
                compareTo(arg0: object_t): number;
                compareToP(arg0: object_t): Promise<number>;
                compareTo(arg0: Java.Enum): number;
                compareToP(arg0: Java.Enum): Promise<number>;
                convert(arg0: object_t): object_t;
                convertP(arg0: object_t): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDeclaringClass(): Java.Class;
                getDeclaringClassP(): Promise<Java.Class>;
                getNextId(arg0: Java.TinkerGraph): object_t;
                getNextIdP(arg0: Java.TinkerGraph): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                name(): string;
                nameP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                ordinal(): number;
                ordinalP(): Promise<number>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerGraph$DefaultIdManager {
                interface Static {
                    LONG: Java.TinkerGraph$DefaultIdManager;
                    INTEGER: Java.TinkerGraph$DefaultIdManager;
                    UUID: Java.TinkerGraph$DefaultIdManager;
                    ANY: Java.TinkerGraph$DefaultIdManager;
                    valueOf(arg0: Java.Class, arg1: string_t): Java.Enum;
                    valueOfP(arg0: Java.Class, arg1: string_t): Promise<Java.Enum>;
                    valueOf(arg0: string_t): Java.TinkerGraph$DefaultIdManager;
                    valueOfP(arg0: string_t): Promise<Java.TinkerGraph$DefaultIdManager>;
                    values(): Java.TinkerGraph$DefaultIdManager[];
                    valuesP(): Promise<Java.TinkerGraph$DefaultIdManager[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerGraph$IdManager extends Java.java.lang.Object {
                convert(arg0: object_t): object_t;
                convertP(arg0: object_t): Promise<object_t>;
                getNextId(arg0: Java.TinkerGraph): object_t;
                getNextIdP(arg0: Java.TinkerGraph): Promise<object_t>;
            }
            module TinkerGraph$IdManager {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerGraph$TinkerGraphEdgeFeatures extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                properties(): Java.Graph$Features$EdgePropertyFeatures;
                propertiesP(): Promise<Java.Graph$Features$EdgePropertyFeatures>;
                supportsAddEdges(): boolean;
                supportsAddEdgesP(): Promise<boolean>;
                supportsAddProperty(): boolean;
                supportsAddPropertyP(): Promise<boolean>;
                supportsAnyIds(): boolean;
                supportsAnyIdsP(): Promise<boolean>;
                supportsCustomIds(): boolean;
                supportsCustomIdsP(): Promise<boolean>;
                supportsNumericIds(): boolean;
                supportsNumericIdsP(): Promise<boolean>;
                supportsRemoveEdges(): boolean;
                supportsRemoveEdgesP(): Promise<boolean>;
                supportsRemoveProperty(): boolean;
                supportsRemovePropertyP(): Promise<boolean>;
                supportsStringIds(): boolean;
                supportsStringIdsP(): Promise<boolean>;
                supportsUserSuppliedIds(): boolean;
                supportsUserSuppliedIdsP(): Promise<boolean>;
                supportsUuidIds(): boolean;
                supportsUuidIdsP(): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerGraph$TinkerGraphEdgeFeatures {
                interface Static {
                    FEATURE_ADD_EDGES: string;
                    FEATURE_REMOVE_EDGES: string;
                    FEATURE_USER_SUPPLIED_IDS: string;
                    FEATURE_NUMERIC_IDS: string;
                    FEATURE_STRING_IDS: string;
                    FEATURE_UUID_IDS: string;
                    FEATURE_CUSTOM_IDS: string;
                    FEATURE_ANY_IDS: string;
                    FEATURE_ADD_PROPERTY: string;
                    FEATURE_REMOVE_PROPERTY: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerGraph$TinkerGraphFeatures extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.Graph$Features {
                edge(): Java.Graph$Features$EdgeFeatures;
                edgeP(): Promise<Java.Graph$Features$EdgeFeatures>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(): Java.Graph$Features$GraphFeatures;
                graphP(): Promise<Java.Graph$Features$GraphFeatures>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                supports(arg0: Java.Class, arg1: string_t): boolean;
                supportsP(arg0: Java.Class, arg1: string_t): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                vertex(): Java.Graph$Features$VertexFeatures;
                vertexP(): Promise<Java.Graph$Features$VertexFeatures>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerGraph$TinkerGraphFeatures {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerGraph$TinkerGraphGraphFeatures extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                supportsComputer(): boolean;
                supportsComputerP(): Promise<boolean>;
                supportsPersistence(): boolean;
                supportsPersistenceP(): Promise<boolean>;
                supportsThreadedTransactions(): boolean;
                supportsThreadedTransactionsP(): Promise<boolean>;
                supportsTransactions(): boolean;
                supportsTransactionsP(): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                variables(): Java.Graph$Features$VariableFeatures;
                variablesP(): Promise<Java.Graph$Features$VariableFeatures>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerGraph$TinkerGraphGraphFeatures {
                interface Static {
                    FEATURE_COMPUTER: string;
                    FEATURE_TRANSACTIONS: string;
                    FEATURE_PERSISTENCE: string;
                    FEATURE_THREADED_TRANSACTIONS: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerGraph$TinkerGraphVertexFeatures extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getCardinality(arg0: string_t): Java.VertexProperty$Cardinality;
                getCardinalityP(arg0: string_t): Promise<Java.VertexProperty$Cardinality>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                properties(): Java.Graph$Features$VertexPropertyFeatures;
                propertiesP(): Promise<Java.Graph$Features$VertexPropertyFeatures>;
                supportsAddProperty(): boolean;
                supportsAddPropertyP(): Promise<boolean>;
                supportsAddVertices(): boolean;
                supportsAddVerticesP(): Promise<boolean>;
                supportsAnyIds(): boolean;
                supportsAnyIdsP(): Promise<boolean>;
                supportsCustomIds(): boolean;
                supportsCustomIdsP(): Promise<boolean>;
                supportsMetaProperties(): boolean;
                supportsMetaPropertiesP(): Promise<boolean>;
                supportsMultiProperties(): boolean;
                supportsMultiPropertiesP(): Promise<boolean>;
                supportsNumericIds(): boolean;
                supportsNumericIdsP(): Promise<boolean>;
                supportsRemoveProperty(): boolean;
                supportsRemovePropertyP(): Promise<boolean>;
                supportsRemoveVertices(): boolean;
                supportsRemoveVerticesP(): Promise<boolean>;
                supportsStringIds(): boolean;
                supportsStringIdsP(): Promise<boolean>;
                supportsUserSuppliedIds(): boolean;
                supportsUserSuppliedIdsP(): Promise<boolean>;
                supportsUuidIds(): boolean;
                supportsUuidIdsP(): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerGraph$TinkerGraphVertexFeatures {
                interface Static {
                    FEATURE_ADD_VERTICES: string;
                    FEATURE_MULTI_PROPERTIES: string;
                    FEATURE_META_PROPERTIES: string;
                    FEATURE_REMOVE_VERTICES: string;
                    FEATURE_USER_SUPPLIED_IDS: string;
                    FEATURE_NUMERIC_IDS: string;
                    FEATURE_STRING_IDS: string;
                    FEATURE_UUID_IDS: string;
                    FEATURE_CUSTOM_IDS: string;
                    FEATURE_ANY_IDS: string;
                    FEATURE_ADD_PROPERTY: string;
                    FEATURE_REMOVE_PROPERTY: string;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerGraphVariables extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.Graph$Variables {
                asMap(): Java.Map;
                asMapP(): Promise<Java.Map>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(arg0: string_t): object_t;
                getP(arg0: string_t): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                remove(arg0: string_t): void;
                removeP(arg0: string_t): Promise<void>;
                set(arg0: string_t, arg1: object_t): void;
                setP(arg0: string_t, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerGraphVariables {
                interface Static {
                    new (): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerHelper extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerHelper {
                interface Static {
                    autoUpdateIndex(arg0: Java.TinkerVertex, arg1: string_t, arg2: object_t, arg3: object_t): void;
                    autoUpdateIndexP(arg0: Java.TinkerVertex, arg1: string_t, arg2: object_t, arg3: object_t): Promise<void>;
                    autoUpdateIndex(arg0: Java.TinkerEdge, arg1: string_t, arg2: object_t, arg3: object_t): void;
                    autoUpdateIndexP(arg0: Java.TinkerEdge, arg1: string_t, arg2: object_t, arg3: object_t): Promise<void>;
                    createGraphView(arg0: Java.TinkerGraph, arg1: Java.Set): Java.TinkerGraphView;
                    createGraphViewP(arg0: Java.TinkerGraph, arg1: Java.Set): Promise<Java.TinkerGraphView>;
                    getEdges(arg0: Java.TinkerVertex, arg1: Java.Direction, ...arg2: string_t[]): Java.Iterator;
                    getEdges(arg0: Java.TinkerVertex, arg1: Java.Direction, arg2: array_t<string_t>): Java.Iterator;
                    getEdgesP(arg0: Java.TinkerVertex, arg1: Java.Direction, ...arg2: string_t[]): Promise<Java.Iterator>;
                    getEdgesP(arg0: Java.TinkerVertex, arg1: Java.Direction, arg2: array_t<string_t>): Promise<Java.Iterator>;
                    getProperties(arg0: Java.TinkerVertex): Java.Map;
                    getPropertiesP(arg0: Java.TinkerVertex): Promise<Java.Map>;
                    getVertices(arg0: Java.TinkerVertex, arg1: Java.Direction, ...arg2: string_t[]): Java.Iterator;
                    getVertices(arg0: Java.TinkerVertex, arg1: Java.Direction, arg2: array_t<string_t>): Java.Iterator;
                    getVerticesP(arg0: Java.TinkerVertex, arg1: Java.Direction, ...arg2: string_t[]): Promise<Java.Iterator>;
                    getVerticesP(arg0: Java.TinkerVertex, arg1: Java.Direction, arg2: array_t<string_t>): Promise<Java.Iterator>;
                    inComputerMode(arg0: Java.TinkerGraph): boolean;
                    inComputerModeP(arg0: Java.TinkerGraph): Promise<boolean>;
                    queryEdgeIndex(arg0: Java.TinkerGraph, arg1: string_t, arg2: object_t): Java.List;
                    queryEdgeIndexP(arg0: Java.TinkerGraph, arg1: string_t, arg2: object_t): Promise<Java.List>;
                    queryVertexIndex(arg0: Java.TinkerGraph, arg1: string_t, arg2: object_t): Java.List;
                    queryVertexIndexP(arg0: Java.TinkerGraph, arg1: string_t, arg2: object_t): Promise<Java.List>;
                    removeElementIndex(arg0: Java.TinkerVertex): void;
                    removeElementIndexP(arg0: Java.TinkerVertex): Promise<void>;
                    removeElementIndex(arg0: Java.TinkerEdge): void;
                    removeElementIndexP(arg0: Java.TinkerEdge): Promise<void>;
                    removeIndex(arg0: Java.TinkerVertex, arg1: string_t, arg2: object_t): void;
                    removeIndexP(arg0: Java.TinkerVertex, arg1: string_t, arg2: object_t): Promise<void>;
                    removeIndex(arg0: Java.TinkerEdge, arg1: string_t, arg2: object_t): void;
                    removeIndexP(arg0: Java.TinkerEdge, arg1: string_t, arg2: object_t): Promise<void>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerProperty extends Java.java.lang.Object, Java.org.apache.tinkerpop.gremlin.structure.Property {
                element(): Java.Element;
                elementP(): Promise<Java.Element>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                ifPresent(arg0: Java.Consumer): void;
                ifPresentP(arg0: Java.Consumer): Promise<void>;
                isPresent(): boolean;
                isPresentP(): Promise<boolean>;
                key(): string;
                keyP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                orElse(arg0: object_t): object_t;
                orElseP(arg0: object_t): Promise<object_t>;
                orElseGet(arg0: Java.Supplier): object_t;
                orElseGetP(arg0: Java.Supplier): Promise<object_t>;
                orElseThrow(arg0: Java.Supplier): object_t;
                orElseThrowP(arg0: Java.Supplier): Promise<object_t>;
                remove(): void;
                removeP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                value(): object_t;
                valueP(): Promise<object_t>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerProperty {
                interface Static {
                    new (arg0: Java.Element, arg1: string_t, arg2: object_t): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerVertex extends Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement, Java.org.apache.tinkerpop.gremlin.structure.Vertex {
                addEdge(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Java.Edge;
                addEdge(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Java.Edge;
                addEdgeP(arg0: string_t, arg1: Java.Vertex, ...arg2: object_t[]): Promise<Java.Edge>;
                addEdgeP(arg0: string_t, arg1: Java.Vertex, arg2: object_array_t): Promise<Java.Edge>;
                edges(arg0: Java.Direction, ...arg1: string_t[]): Java.Iterator;
                edges(arg0: Java.Direction, arg1: array_t<string_t>): Java.Iterator;
                edgesP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.Iterator>;
                edgesP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.Iterator>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                id(): object_t;
                idP(): Promise<object_t>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Java.VertexProperty;
                property(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Java.VertexProperty;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, ...arg3: object_t[]): Promise<Java.VertexProperty>;
                propertyP(arg0: Java.VertexProperty$Cardinality, arg1: string_t, arg2: object_t, arg3: object_array_t): Promise<Java.VertexProperty>;
                property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Java.VertexProperty;
                property(arg0: string_t, arg1: object_t, arg2: object_array_t): Java.VertexProperty;
                propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<Java.VertexProperty>;
                propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<Java.VertexProperty>;
                property(arg0: string_t, arg1: object_t): Java.VertexProperty;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.VertexProperty>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.VertexProperty;
                propertyP(arg0: string_t): Promise<Java.VertexProperty>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                vertices(arg0: Java.Direction, ...arg1: string_t[]): Java.Iterator;
                vertices(arg0: Java.Direction, arg1: array_t<string_t>): Java.Iterator;
                verticesP(arg0: Java.Direction, ...arg1: string_t[]): Promise<Java.Iterator>;
                verticesP(arg0: Java.Direction, arg1: array_t<string_t>): Promise<Java.Iterator>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerVertex {
                interface Static {
                    DEFAULT_LABEL: string;
                    EMPTY_ARGS: object_t[];
                }
            }
        }
        module org.apache.tinkerpop.gremlin.tinkergraph.structure {
            interface TinkerVertexProperty extends Java.org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerElement, Java.org.apache.tinkerpop.gremlin.structure.VertexProperty {
                element(): Java.Element;
                elementP(): Promise<Java.Element>;
                element(): Java.Vertex;
                elementP(): Promise<Java.Vertex>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                graph(): Java.Graph;
                graphP(): Promise<Java.Graph>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                id(): object_t;
                idP(): Promise<object_t>;
                ifPresent(arg0: Java.Consumer): void;
                ifPresentP(arg0: Java.Consumer): Promise<void>;
                isPresent(): boolean;
                isPresentP(): Promise<boolean>;
                key(): string;
                keyP(): Promise<string>;
                keys(): Java.Set;
                keysP(): Promise<Java.Set>;
                label(): string;
                labelP(): Promise<string>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                orElse(arg0: object_t): object_t;
                orElseP(arg0: object_t): Promise<object_t>;
                orElseGet(arg0: Java.Supplier): object_t;
                orElseGetP(arg0: Java.Supplier): Promise<object_t>;
                orElseThrow(arg0: Java.Supplier): object_t;
                orElseThrowP(arg0: Java.Supplier): Promise<object_t>;
                properties(...arg0: string_t[]): Java.Iterator;
                properties(arg0: array_t<string_t>): Java.Iterator;
                propertiesP(...arg0: string_t[]): Promise<Java.Iterator>;
                propertiesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                property(arg0: string_t, arg1: object_t): Java.Property;
                propertyP(arg0: string_t, arg1: object_t): Promise<Java.Property>;
                property(arg0: string_t): Java.Property;
                propertyP(arg0: string_t): Promise<Java.Property>;
                remove(): void;
                removeP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                value(arg0: string_t): object_t;
                valueP(arg0: string_t): Promise<object_t>;
                value(): object_t;
                valueP(): Promise<object_t>;
                values(...arg0: string_t[]): Java.Iterator;
                values(arg0: array_t<string_t>): Java.Iterator;
                valuesP(...arg0: string_t[]): Promise<Java.Iterator>;
                valuesP(arg0: array_t<string_t>): Promise<Java.Iterator>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TinkerVertexProperty {
                interface Static {
                    DEFAULT_LABEL: string;
                    new (arg0: object_t, arg1: Java.TinkerVertex, arg2: string_t, arg3: object_t, ...arg4: object_t[]): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty;
                    new (arg0: Java.TinkerVertex, arg1: string_t, arg2: object_t, ...arg3: object_t[]): org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface ArrayListSupplier extends Java.java.lang.Object, Java.java.util.function_.Supplier {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): Java.ArrayList;
                getP(): Promise<Java.ArrayList>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ArrayListSupplier {
                interface Static {
                    instance(): Java.ArrayListSupplier;
                    instanceP(): Promise<Java.ArrayListSupplier>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface BulkSetSupplier extends Java.java.lang.Object, Java.java.util.function_.Supplier {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): Java.BulkSet;
                getP(): Promise<Java.BulkSet>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module BulkSetSupplier {
                interface Static {
                    instance(): Java.BulkSetSupplier;
                    instanceP(): Promise<Java.BulkSetSupplier>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface ChainedComparator extends Java.java.lang.Object, Java.java.util.Comparator {
                compare(arg0: object_t, arg1: object_t): number;
                compareP(arg0: object_t, arg1: object_t): Promise<number>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                reversed(): Java.Comparator;
                reversedP(): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function, arg1: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Function): Java.Comparator;
                thenComparingP(arg0: Java.Function): Promise<Java.Comparator>;
                thenComparing(arg0: Java.Comparator): Java.Comparator;
                thenComparingP(arg0: Java.Comparator): Promise<Java.Comparator>;
                thenComparingDouble(arg0: object_t): Java.Comparator;
                thenComparingDoubleP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingInt(arg0: object_t): Java.Comparator;
                thenComparingIntP(arg0: object_t): Promise<Java.Comparator>;
                thenComparingLong(arg0: object_t): Java.Comparator;
                thenComparingLongP(arg0: object_t): Promise<Java.Comparator>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ChainedComparator {
                interface Static {
                    new (arg0: Java.List): org.apache.tinkerpop.gremlin.util.function_.ChainedComparator;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface ConstantSupplier extends Java.java.lang.Object, Java.java.util.function_.Supplier {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ConstantSupplier {
                interface Static {
                    new (arg0: object_t): org.apache.tinkerpop.gremlin.util.function_.ConstantSupplier;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface FunctionUtils extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module FunctionUtils {
                interface Static {
                    wrapBiConsumer(arg0: Java.ThrowingBiConsumer): Java.BiConsumer;
                    wrapBiConsumerP(arg0: Java.ThrowingBiConsumer): Promise<Java.BiConsumer>;
                    wrapConsumer(arg0: Java.ThrowingConsumer): Java.Consumer;
                    wrapConsumerP(arg0: Java.ThrowingConsumer): Promise<Java.Consumer>;
                    wrapFunction(arg0: Java.ThrowingFunction): Java.Function;
                    wrapFunctionP(arg0: Java.ThrowingFunction): Promise<Java.Function>;
                    wrapSupplier(arg0: Java.ThrowingSupplier): Java.Supplier;
                    wrapSupplierP(arg0: Java.ThrowingSupplier): Promise<Java.Supplier>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface HashMapSupplier extends Java.java.lang.Object, Java.java.util.function_.Supplier {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): Java.HashMap;
                getP(): Promise<Java.HashMap>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module HashMapSupplier {
                interface Static {
                    instance(): Java.HashMapSupplier;
                    instanceP(): Promise<Java.HashMapSupplier>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface HashSetSupplier extends Java.java.lang.Object, Java.java.util.function_.Supplier {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): Java.HashSet;
                getP(): Promise<Java.HashSet>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module HashSetSupplier {
                interface Static {
                    instance(): Java.HashSetSupplier;
                    instanceP(): Promise<Java.HashSetSupplier>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface MeanNumberSupplier extends Java.java.lang.Object, Java.java.util.function_.Supplier {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): object_t;
                getP(): Promise<object_t>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module MeanNumberSupplier {
                interface Static {
                    instance(): Java.MeanNumberSupplier;
                    instanceP(): Promise<Java.MeanNumberSupplier>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface ScriptEngineLambda extends Java.java.lang.Object, Java.java.util.function_.BiConsumer, Java.java.util.function_.Consumer, Java.java.util.function_.Function, Java.java.util.function_.Predicate, Java.java.util.function_.Supplier, Java.org.apache.tinkerpop.gremlin.util.function_.TriConsumer {
                accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
                acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
                accept(arg0: object_t, arg1: object_t): void;
                acceptP(arg0: object_t, arg1: object_t): Promise<void>;
                accept(arg0: object_t): void;
                acceptP(arg0: object_t): Promise<void>;
                and(arg0: Java.Predicate): Java.Predicate;
                andP(arg0: Java.Predicate): Promise<Java.Predicate>;
                andThen(arg0: Java.TriConsumer): Java.TriConsumer;
                andThenP(arg0: Java.TriConsumer): Promise<Java.TriConsumer>;
                andThen(arg0: Java.BiConsumer): Java.BiConsumer;
                andThenP(arg0: Java.BiConsumer): Promise<Java.BiConsumer>;
                andThen(arg0: Java.Function): Java.Function;
                andThenP(arg0: Java.Function): Promise<Java.Function>;
                andThen(arg0: Java.Consumer): Java.Consumer;
                andThenP(arg0: Java.Consumer): Promise<Java.Consumer>;
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
                compose(arg0: Java.Function): Java.Function;
                composeP(arg0: Java.Function): Promise<Java.Function>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                negate(): Java.Predicate;
                negateP(): Promise<Java.Predicate>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                or(arg0: Java.Predicate): Java.Predicate;
                orP(arg0: Java.Predicate): Promise<Java.Predicate>;
                test(arg0: object_t): boolean;
                testP(arg0: object_t): Promise<boolean>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ScriptEngineLambda {
                interface Static {
                    new (arg0: string_t, arg1: string_t): org.apache.tinkerpop.gremlin.util.function_.ScriptEngineLambda;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface ThrowingBiConsumer extends Java.java.lang.Object {
                accept(arg0: object_t, arg1: object_t): void;
                acceptP(arg0: object_t, arg1: object_t): Promise<void>;
            }
            module ThrowingBiConsumer {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface ThrowingConsumer extends Java.java.lang.Object {
                accept(arg0: object_t): void;
                acceptP(arg0: object_t): Promise<void>;
            }
            module ThrowingConsumer {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface ThrowingFunction extends Java.java.lang.Object {
                apply(arg0: object_t): object_t;
                applyP(arg0: object_t): Promise<object_t>;
            }
            module ThrowingFunction {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface ThrowingSupplier extends Java.java.lang.Object {
                get(): object_t;
                getP(): Promise<object_t>;
            }
            module ThrowingSupplier {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface TraversableLambda extends Java.java.lang.Object {
                clone(): Java.TraversableLambda;
                cloneP(): Promise<Java.TraversableLambda>;
                getTraversal(): Java.Traversal;
                getTraversalP(): Promise<Java.Traversal>;
            }
            module TraversableLambda {
                interface Static {
                    tryAndClone(arg0: object_t): object_t;
                    tryAndCloneP(arg0: object_t): Promise<object_t>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface TreeSupplier extends Java.java.lang.Object, Java.java.util.function_.Supplier {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                get(): Java.Tree;
                getP(): Promise<Java.Tree>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TreeSupplier {
                interface Static {
                    instance(): Java.TreeSupplier;
                    instanceP(): Promise<Java.TreeSupplier>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface TriConsumer extends Java.java.lang.Object {
                accept(arg0: object_t, arg1: object_t, arg2: object_t): void;
                acceptP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<void>;
                andThen(arg0: Java.TriConsumer): Java.TriConsumer;
                andThenP(arg0: Java.TriConsumer): Promise<Java.TriConsumer>;
            }
            module TriConsumer {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util.function_ {
            interface TriFunction extends Java.java.lang.Object {
                andThen(arg0: Java.Function): Java.TriFunction;
                andThenP(arg0: Java.Function): Promise<Java.TriFunction>;
                apply(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
                applyP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
            }
            module TriFunction {
                interface Static {
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util {
            interface Gremlin extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Gremlin {
                interface Static {
                    main(arg0: array_t<string_t>): void;
                    mainP(arg0: array_t<string_t>): Promise<void>;
                    version(): string;
                    versionP(): Promise<string>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util {
            interface ScriptEngineCache extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ScriptEngineCache {
                interface Static {
                    DEFAULT_SCRIPT_ENGINE: string;
                    get(arg0: string_t): Java.ScriptEngine;
                    getP(arg0: string_t): Promise<Java.ScriptEngine>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util {
            interface Serializer extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Serializer {
                interface Static {
                    deserializeObject(arg0: object_array_t): object_t;
                    deserializeObjectP(arg0: object_array_t): Promise<object_t>;
                    serializeObject(arg0: object_t): object_t[];
                    serializeObjectP(arg0: object_t): Promise<object_t[]>;
                }
            }
        }
        module org.apache.tinkerpop.gremlin.util {
            interface TimeUtil extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module TimeUtil {
                interface Static {
                    clock(arg0: integer_t, arg1: object_t): number;
                    clockP(arg0: integer_t, arg1: object_t): Promise<number>;
                    clock(arg0: object_t): number;
                    clockP(arg0: object_t): Promise<number>;
                    millisSince(arg0: long_t): longValue_t;
                    millisSinceP(arg0: long_t): Promise<longValue_t>;
                    minutesSince(arg0: long_t): longValue_t;
                    minutesSinceP(arg0: long_t): Promise<longValue_t>;
                    secondsSince(arg0: long_t): longValue_t;
                    secondsSinceP(arg0: long_t): Promise<longValue_t>;
                    timeSince(arg0: long_t, arg1: object_t): longValue_t;
                    timeSinceP(arg0: long_t, arg1: object_t): Promise<longValue_t>;
                }
            }
        }
        module org.codehaus.groovy.ast {
            interface ClassNode extends Java.java.lang.Object {
                addAnnotation(arg0: object_t): void;
                addAnnotationP(arg0: object_t): Promise<void>;
                addAnnotations(arg0: Java.List): void;
                addAnnotationsP(arg0: Java.List): Promise<void>;
                addConstructor(arg0: integer_t, arg1: object_array_t, arg2: array_t<Java.ClassNode>, arg3: object_t): object_t;
                addConstructorP(arg0: integer_t, arg1: object_array_t, arg2: array_t<Java.ClassNode>, arg3: object_t): Promise<object_t>;
                addConstructor(arg0: object_t): void;
                addConstructorP(arg0: object_t): Promise<void>;
                addField(arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: object_t): object_t;
                addFieldP(arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: object_t): Promise<object_t>;
                addField(arg0: object_t): void;
                addFieldP(arg0: object_t): Promise<void>;
                addFieldFirst(arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: object_t): object_t;
                addFieldFirstP(arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: object_t): Promise<object_t>;
                addFieldFirst(arg0: object_t): void;
                addFieldFirstP(arg0: object_t): Promise<void>;
                addInterface(arg0: Java.ClassNode): void;
                addInterfaceP(arg0: Java.ClassNode): Promise<void>;
                addMethod(arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: object_array_t, arg4: array_t<Java.ClassNode>, arg5: object_t): object_t;
                addMethodP(arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: object_array_t, arg4: array_t<Java.ClassNode>, arg5: object_t): Promise<object_t>;
                addMethod(arg0: object_t): void;
                addMethodP(arg0: object_t): Promise<void>;
                addMixin(arg0: object_t): void;
                addMixinP(arg0: object_t): Promise<void>;
                addObjectInitializerStatements(arg0: object_t): void;
                addObjectInitializerStatementsP(arg0: object_t): Promise<void>;
                addProperty(arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: object_t, arg4: object_t, arg5: object_t): object_t;
                addPropertyP(arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: object_t, arg4: object_t, arg5: object_t): Promise<object_t>;
                addProperty(arg0: object_t): void;
                addPropertyP(arg0: object_t): Promise<void>;
                addStaticInitializerStatements(arg0: Java.List, arg1: boolean_t): void;
                addStaticInitializerStatementsP(arg0: Java.List, arg1: boolean_t): Promise<void>;
                addSyntheticMethod(arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: object_array_t, arg4: array_t<Java.ClassNode>, arg5: object_t): object_t;
                addSyntheticMethodP(arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: object_array_t, arg4: array_t<Java.ClassNode>, arg5: object_t): Promise<object_t>;
                addTransform(arg0: Java.Class, arg1: object_t): void;
                addTransformP(arg0: Java.Class, arg1: object_t): Promise<void>;
                copyNodeMetaData(arg0: object_t): void;
                copyNodeMetaDataP(arg0: object_t): Promise<void>;
                declaresInterface(arg0: Java.ClassNode): boolean;
                declaresInterfaceP(arg0: Java.ClassNode): Promise<boolean>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getAbstractMethods(): Java.List;
                getAbstractMethodsP(): Promise<Java.List>;
                getAllDeclaredMethods(): Java.List;
                getAllDeclaredMethodsP(): Promise<Java.List>;
                getAllInterfaces(): Java.Set;
                getAllInterfacesP(): Promise<Java.Set>;
                getAnnotations(arg0: Java.ClassNode): Java.List;
                getAnnotationsP(arg0: Java.ClassNode): Promise<Java.List>;
                getAnnotations(): Java.List;
                getAnnotationsP(): Promise<Java.List>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getColumnNumber(): number;
                getColumnNumberP(): Promise<number>;
                getCompileUnit(): object_t;
                getCompileUnitP(): Promise<object_t>;
                getComponentType(): Java.ClassNode;
                getComponentTypeP(): Promise<Java.ClassNode>;
                getDeclaredConstructor(arg0: object_array_t): object_t;
                getDeclaredConstructorP(arg0: object_array_t): Promise<object_t>;
                getDeclaredConstructors(): Java.List;
                getDeclaredConstructorsP(): Promise<Java.List>;
                getDeclaredField(arg0: string_t): object_t;
                getDeclaredFieldP(arg0: string_t): Promise<object_t>;
                getDeclaredMethod(arg0: string_t, arg1: object_array_t): object_t;
                getDeclaredMethodP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
                getDeclaredMethods(arg0: string_t): Java.List;
                getDeclaredMethodsP(arg0: string_t): Promise<Java.List>;
                getDeclaredMethodsMap(): Java.Map;
                getDeclaredMethodsMapP(): Promise<Java.Map>;
                getDeclaringClass(): Java.ClassNode;
                getDeclaringClassP(): Promise<Java.ClassNode>;
                getEnclosingMethod(): object_t;
                getEnclosingMethodP(): Promise<object_t>;
                getField(arg0: string_t): object_t;
                getFieldP(arg0: string_t): Promise<object_t>;
                getFields(): Java.List;
                getFieldsP(): Promise<Java.List>;
                getGenericsTypes(): object_t[];
                getGenericsTypesP(): Promise<object_t[]>;
                getGetterMethod(arg0: string_t): object_t;
                getGetterMethodP(arg0: string_t): Promise<object_t>;
                getInnerClasses(): Java.Iterator;
                getInnerClassesP(): Promise<Java.Iterator>;
                getInterfaces(): Java.ClassNode[];
                getInterfacesP(): Promise<Java.ClassNode[]>;
                getLastColumnNumber(): number;
                getLastColumnNumberP(): Promise<number>;
                getLastLineNumber(): number;
                getLastLineNumberP(): Promise<number>;
                getLineNumber(): number;
                getLineNumberP(): Promise<number>;
                getMethod(arg0: string_t, arg1: object_array_t): object_t;
                getMethodP(arg0: string_t, arg1: object_array_t): Promise<object_t>;
                getMethods(arg0: string_t): Java.List;
                getMethodsP(arg0: string_t): Promise<Java.List>;
                getMethods(): Java.List;
                getMethodsP(): Promise<Java.List>;
                getMixins(): object_t[];
                getMixinsP(): Promise<object_t[]>;
                getModifiers(): number;
                getModifiersP(): Promise<number>;
                getModule(): object_t;
                getModuleP(): Promise<object_t>;
                getName(): string;
                getNameP(): Promise<string>;
                getNameWithoutPackage(): string;
                getNameWithoutPackageP(): Promise<string>;
                getNodeMetaData(arg0: object_t): object_t;
                getNodeMetaDataP(arg0: object_t): Promise<object_t>;
                getNodeMetaData(): Java.Map;
                getNodeMetaDataP(): Promise<Java.Map>;
                getObjectInitializerStatements(): Java.List;
                getObjectInitializerStatementsP(): Promise<Java.List>;
                getOuterClass(): Java.ClassNode;
                getOuterClassP(): Promise<Java.ClassNode>;
                getOuterField(arg0: string_t): object_t;
                getOuterFieldP(arg0: string_t): Promise<object_t>;
                getPackage(): object_t;
                getPackageP(): Promise<object_t>;
                getPackageName(): string;
                getPackageNameP(): Promise<string>;
                getPlainNodeReference(): Java.ClassNode;
                getPlainNodeReferenceP(): Promise<Java.ClassNode>;
                getProperties(): Java.List;
                getPropertiesP(): Promise<Java.List>;
                getProperty(arg0: string_t): object_t;
                getPropertyP(arg0: string_t): Promise<object_t>;
                getSetterMethod(arg0: string_t, arg1: boolean_t): object_t;
                getSetterMethodP(arg0: string_t, arg1: boolean_t): Promise<object_t>;
                getSetterMethod(arg0: string_t): object_t;
                getSetterMethodP(arg0: string_t): Promise<object_t>;
                getSuperClass(): Java.ClassNode;
                getSuperClassP(): Promise<Java.ClassNode>;
                getText(): string;
                getTextP(): Promise<string>;
                getTransforms(arg0: object_t): Java.Map;
                getTransformsP(arg0: object_t): Promise<Java.Map>;
                getTypeClass(): Java.Class;
                getTypeClassP(): Promise<Java.Class>;
                getUnresolvedInterfaces(arg0: boolean_t): Java.ClassNode[];
                getUnresolvedInterfacesP(arg0: boolean_t): Promise<Java.ClassNode[]>;
                getUnresolvedInterfaces(): Java.ClassNode[];
                getUnresolvedInterfacesP(): Promise<Java.ClassNode[]>;
                getUnresolvedName(): string;
                getUnresolvedNameP(): Promise<string>;
                getUnresolvedSuperClass(arg0: boolean_t): Java.ClassNode;
                getUnresolvedSuperClassP(arg0: boolean_t): Promise<Java.ClassNode>;
                getUnresolvedSuperClass(): Java.ClassNode;
                getUnresolvedSuperClassP(): Promise<Java.ClassNode>;
                hasDeclaredMethod(arg0: string_t, arg1: object_array_t): boolean;
                hasDeclaredMethodP(arg0: string_t, arg1: object_array_t): Promise<boolean>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                hasMethod(arg0: string_t, arg1: object_array_t): boolean;
                hasMethodP(arg0: string_t, arg1: object_array_t): Promise<boolean>;
                hasNoRealSourcePosition(): boolean;
                hasNoRealSourcePositionP(): Promise<boolean>;
                hasPackageName(): boolean;
                hasPackageNameP(): Promise<boolean>;
                hasPossibleMethod(arg0: string_t, arg1: object_t): boolean;
                hasPossibleMethodP(arg0: string_t, arg1: object_t): Promise<boolean>;
                hasPossibleStaticMethod(arg0: string_t, arg1: object_t): boolean;
                hasPossibleStaticMethodP(arg0: string_t, arg1: object_t): Promise<boolean>;
                hasProperty(arg0: string_t): boolean;
                hasPropertyP(arg0: string_t): Promise<boolean>;
                implementsInterface(arg0: Java.ClassNode): boolean;
                implementsInterfaceP(arg0: Java.ClassNode): Promise<boolean>;
                isAnnotated(): boolean;
                isAnnotatedP(): Promise<boolean>;
                isAnnotationDefinition(): boolean;
                isAnnotationDefinitionP(): Promise<boolean>;
                isArray(): boolean;
                isArrayP(): Promise<boolean>;
                isDerivedFrom(arg0: Java.ClassNode): boolean;
                isDerivedFromP(arg0: Java.ClassNode): Promise<boolean>;
                isDerivedFromGroovyObject(): boolean;
                isDerivedFromGroovyObjectP(): Promise<boolean>;
                isEnum(): boolean;
                isEnumP(): Promise<boolean>;
                isGenericsPlaceHolder(): boolean;
                isGenericsPlaceHolderP(): Promise<boolean>;
                isInterface(): boolean;
                isInterfaceP(): Promise<boolean>;
                isPrimaryClassNode(): boolean;
                isPrimaryClassNodeP(): Promise<boolean>;
                isRedirectNode(): boolean;
                isRedirectNodeP(): Promise<boolean>;
                isResolved(): boolean;
                isResolvedP(): Promise<boolean>;
                isScript(): boolean;
                isScriptP(): Promise<boolean>;
                isScriptBody(): boolean;
                isScriptBodyP(): Promise<boolean>;
                isStaticClass(): boolean;
                isStaticClassP(): Promise<boolean>;
                isSynthetic(): boolean;
                isSyntheticP(): Promise<boolean>;
                isSyntheticPublic(): boolean;
                isSyntheticPublicP(): Promise<boolean>;
                isUsingGenerics(): boolean;
                isUsingGenericsP(): Promise<boolean>;
                makeArray(): Java.ClassNode;
                makeArrayP(): Promise<Java.ClassNode>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                positionStmtsAfterEnumInitStmts(arg0: Java.List): void;
                positionStmtsAfterEnumInitStmtsP(arg0: Java.List): Promise<void>;
                putNodeMetaData(arg0: object_t, arg1: object_t): object_t;
                putNodeMetaDataP(arg0: object_t, arg1: object_t): Promise<object_t>;
                redirect(): Java.ClassNode;
                redirectP(): Promise<Java.ClassNode>;
                removeConstructor(arg0: object_t): void;
                removeConstructorP(arg0: object_t): Promise<void>;
                removeField(arg0: string_t): void;
                removeFieldP(arg0: string_t): Promise<void>;
                removeMethod(arg0: object_t): void;
                removeMethodP(arg0: object_t): Promise<void>;
                removeNodeMetaData(arg0: object_t): void;
                removeNodeMetaDataP(arg0: object_t): Promise<void>;
                renameField(arg0: string_t, arg1: string_t): void;
                renameFieldP(arg0: string_t, arg1: string_t): Promise<void>;
                setAnnotated(arg0: boolean_t): void;
                setAnnotatedP(arg0: boolean_t): Promise<void>;
                setColumnNumber(arg0: integer_t): void;
                setColumnNumberP(arg0: integer_t): Promise<void>;
                setDeclaringClass(arg0: Java.ClassNode): void;
                setDeclaringClassP(arg0: Java.ClassNode): Promise<void>;
                setEnclosingMethod(arg0: object_t): void;
                setEnclosingMethodP(arg0: object_t): Promise<void>;
                setGenericsPlaceHolder(arg0: boolean_t): void;
                setGenericsPlaceHolderP(arg0: boolean_t): Promise<void>;
                setGenericsTypes(arg0: object_array_t): void;
                setGenericsTypesP(arg0: object_array_t): Promise<void>;
                setHasNoRealSourcePosition(arg0: boolean_t): void;
                setHasNoRealSourcePositionP(arg0: boolean_t): Promise<void>;
                setInterfaces(arg0: array_t<Java.ClassNode>): void;
                setInterfacesP(arg0: array_t<Java.ClassNode>): Promise<void>;
                setLastColumnNumber(arg0: integer_t): void;
                setLastColumnNumberP(arg0: integer_t): Promise<void>;
                setLastLineNumber(arg0: integer_t): void;
                setLastLineNumberP(arg0: integer_t): Promise<void>;
                setLineNumber(arg0: integer_t): void;
                setLineNumberP(arg0: integer_t): Promise<void>;
                setModifiers(arg0: integer_t): void;
                setModifiersP(arg0: integer_t): Promise<void>;
                setModule(arg0: object_t): void;
                setModuleP(arg0: object_t): Promise<void>;
                setName(arg0: string_t): string;
                setNameP(arg0: string_t): Promise<string>;
                setNodeMetaData(arg0: object_t, arg1: object_t): void;
                setNodeMetaDataP(arg0: object_t, arg1: object_t): Promise<void>;
                setRedirect(arg0: Java.ClassNode): void;
                setRedirectP(arg0: Java.ClassNode): Promise<void>;
                setScript(arg0: boolean_t): void;
                setScriptP(arg0: boolean_t): Promise<void>;
                setScriptBody(arg0: boolean_t): void;
                setScriptBodyP(arg0: boolean_t): Promise<void>;
                setSourcePosition(arg0: object_t): void;
                setSourcePositionP(arg0: object_t): Promise<void>;
                setStaticClass(arg0: boolean_t): void;
                setStaticClassP(arg0: boolean_t): Promise<void>;
                setSuperClass(arg0: Java.ClassNode): void;
                setSuperClassP(arg0: Java.ClassNode): Promise<void>;
                setSynthetic(arg0: boolean_t): void;
                setSyntheticP(arg0: boolean_t): Promise<void>;
                setSyntheticPublic(arg0: boolean_t): void;
                setSyntheticPublicP(arg0: boolean_t): Promise<void>;
                setUnresolvedSuperClass(arg0: Java.ClassNode): void;
                setUnresolvedSuperClassP(arg0: Java.ClassNode): Promise<void>;
                setUsingGenerics(arg0: boolean_t): void;
                setUsingGenericsP(arg0: boolean_t): Promise<void>;
                toString(arg0: boolean_t): string;
                toStringP(arg0: boolean_t): Promise<string>;
                toString(): string;
                toStringP(): Promise<string>;
                tryFindPossibleMethod(arg0: string_t, arg1: object_t): object_t;
                tryFindPossibleMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
                visit(arg0: object_t): void;
                visitP(arg0: object_t): Promise<void>;
                visitContents(arg0: object_t): void;
                visitContentsP(arg0: object_t): Promise<void>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ClassNode {
                interface Static {
                    EMPTY_ARRAY: Java.ClassNode[];
                    THIS: Java.ClassNode;
                    SUPER: Java.ClassNode;
                    ASM4: number;
                    ASM5: number;
                    V1_1: number;
                    V1_2: number;
                    V1_3: number;
                    V1_4: number;
                    V1_5: number;
                    V1_6: number;
                    V1_7: number;
                    V1_8: number;
                    ACC_PUBLIC: number;
                    ACC_PRIVATE: number;
                    ACC_PROTECTED: number;
                    ACC_STATIC: number;
                    ACC_FINAL: number;
                    ACC_SUPER: number;
                    ACC_SYNCHRONIZED: number;
                    ACC_VOLATILE: number;
                    ACC_BRIDGE: number;
                    ACC_VARARGS: number;
                    ACC_TRANSIENT: number;
                    ACC_NATIVE: number;
                    ACC_INTERFACE: number;
                    ACC_ABSTRACT: number;
                    ACC_STRICT: number;
                    ACC_SYNTHETIC: number;
                    ACC_ANNOTATION: number;
                    ACC_ENUM: number;
                    ACC_MANDATED: number;
                    ACC_DEPRECATED: number;
                    T_BOOLEAN: number;
                    T_CHAR: number;
                    T_FLOAT: number;
                    T_DOUBLE: number;
                    T_BYTE: number;
                    T_SHORT: number;
                    T_INT: number;
                    T_LONG: number;
                    H_GETFIELD: number;
                    H_GETSTATIC: number;
                    H_PUTFIELD: number;
                    H_PUTSTATIC: number;
                    H_INVOKEVIRTUAL: number;
                    H_INVOKESTATIC: number;
                    H_INVOKESPECIAL: number;
                    H_NEWINVOKESPECIAL: number;
                    H_INVOKEINTERFACE: number;
                    F_NEW: number;
                    F_FULL: number;
                    F_APPEND: number;
                    F_CHOP: number;
                    F_SAME: number;
                    F_SAME1: number;
                    TOP: number;
                    INTEGER: number;
                    FLOAT: number;
                    DOUBLE: number;
                    LONG: number;
                    NULL: number;
                    UNINITIALIZED_THIS: number;
                    NOP: number;
                    ACONST_NULL: number;
                    ICONST_M1: number;
                    ICONST_0: number;
                    ICONST_1: number;
                    ICONST_2: number;
                    ICONST_3: number;
                    ICONST_4: number;
                    ICONST_5: number;
                    LCONST_0: number;
                    LCONST_1: number;
                    FCONST_0: number;
                    FCONST_1: number;
                    FCONST_2: number;
                    DCONST_0: number;
                    DCONST_1: number;
                    BIPUSH: number;
                    SIPUSH: number;
                    LDC: number;
                    ILOAD: number;
                    LLOAD: number;
                    FLOAD: number;
                    DLOAD: number;
                    ALOAD: number;
                    IALOAD: number;
                    LALOAD: number;
                    FALOAD: number;
                    DALOAD: number;
                    AALOAD: number;
                    BALOAD: number;
                    CALOAD: number;
                    SALOAD: number;
                    ISTORE: number;
                    LSTORE: number;
                    FSTORE: number;
                    DSTORE: number;
                    ASTORE: number;
                    IASTORE: number;
                    LASTORE: number;
                    FASTORE: number;
                    DASTORE: number;
                    AASTORE: number;
                    BASTORE: number;
                    CASTORE: number;
                    SASTORE: number;
                    POP: number;
                    POP2: number;
                    DUP: number;
                    DUP_X1: number;
                    DUP_X2: number;
                    DUP2: number;
                    DUP2_X1: number;
                    DUP2_X2: number;
                    SWAP: number;
                    IADD: number;
                    LADD: number;
                    FADD: number;
                    DADD: number;
                    ISUB: number;
                    LSUB: number;
                    FSUB: number;
                    DSUB: number;
                    IMUL: number;
                    LMUL: number;
                    FMUL: number;
                    DMUL: number;
                    IDIV: number;
                    LDIV: number;
                    FDIV: number;
                    DDIV: number;
                    IREM: number;
                    LREM: number;
                    FREM: number;
                    DREM: number;
                    INEG: number;
                    LNEG: number;
                    FNEG: number;
                    DNEG: number;
                    ISHL: number;
                    LSHL: number;
                    ISHR: number;
                    LSHR: number;
                    IUSHR: number;
                    LUSHR: number;
                    IAND: number;
                    LAND: number;
                    IOR: number;
                    LOR: number;
                    IXOR: number;
                    LXOR: number;
                    IINC: number;
                    I2L: number;
                    I2F: number;
                    I2D: number;
                    L2I: number;
                    L2F: number;
                    L2D: number;
                    F2I: number;
                    F2L: number;
                    F2D: number;
                    D2I: number;
                    D2L: number;
                    D2F: number;
                    I2B: number;
                    I2C: number;
                    I2S: number;
                    LCMP: number;
                    FCMPL: number;
                    FCMPG: number;
                    DCMPL: number;
                    DCMPG: number;
                    IFEQ: number;
                    IFNE: number;
                    IFLT: number;
                    IFGE: number;
                    IFGT: number;
                    IFLE: number;
                    IF_ICMPEQ: number;
                    IF_ICMPNE: number;
                    IF_ICMPLT: number;
                    IF_ICMPGE: number;
                    IF_ICMPGT: number;
                    IF_ICMPLE: number;
                    IF_ACMPEQ: number;
                    IF_ACMPNE: number;
                    GOTO: number;
                    JSR: number;
                    RET: number;
                    TABLESWITCH: number;
                    LOOKUPSWITCH: number;
                    IRETURN: number;
                    LRETURN: number;
                    FRETURN: number;
                    DRETURN: number;
                    ARETURN: number;
                    RETURN: number;
                    GETSTATIC: number;
                    PUTSTATIC: number;
                    GETFIELD: number;
                    PUTFIELD: number;
                    INVOKEVIRTUAL: number;
                    INVOKESPECIAL: number;
                    INVOKESTATIC: number;
                    INVOKEINTERFACE: number;
                    INVOKEDYNAMIC: number;
                    NEW: number;
                    NEWARRAY: number;
                    ANEWARRAY: number;
                    ARRAYLENGTH: number;
                    ATHROW: number;
                    CHECKCAST: number;
                    INSTANCEOF: number;
                    MONITORENTER: number;
                    MONITOREXIT: number;
                    MULTIANEWARRAY: number;
                    IFNULL: number;
                    IFNONNULL: number;
                    new (arg0: string_t, arg1: integer_t, arg2: Java.ClassNode, arg3: array_t<Java.ClassNode>, arg4: object_array_t): org.codehaus.groovy.ast.ClassNode;
                    new (arg0: string_t, arg1: integer_t, arg2: Java.ClassNode): org.codehaus.groovy.ast.ClassNode;
                    new (arg0: Java.Class): org.codehaus.groovy.ast.ClassNode;
                }
            }
        }
        module org.codehaus.groovy.control {
            interface CompilerConfiguration extends Java.java.lang.Object {
                addCompilationCustomizers(...arg0: Java.CompilationCustomizer[]): Java.CompilerConfiguration;
                addCompilationCustomizers(arg0: array_t<Java.CompilationCustomizer>): Java.CompilerConfiguration;
                addCompilationCustomizersP(...arg0: Java.CompilationCustomizer[]): Promise<Java.CompilerConfiguration>;
                addCompilationCustomizersP(arg0: array_t<Java.CompilationCustomizer>): Promise<Java.CompilerConfiguration>;
                configure(arg0: object_t): void;
                configureP(arg0: object_t): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getBytecodePostprocessor(): object_t;
                getBytecodePostprocessorP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getClasspath(): Java.List;
                getClasspathP(): Promise<Java.List>;
                getCompilationCustomizers(): Java.List;
                getCompilationCustomizersP(): Promise<Java.List>;
                getDebug(): boolean;
                getDebugP(): Promise<boolean>;
                getDefaultScriptExtension(): string;
                getDefaultScriptExtensionP(): Promise<string>;
                getDisabledGlobalASTTransformations(): Java.Set;
                getDisabledGlobalASTTransformationsP(): Promise<Java.Set>;
                getJointCompilationOptions(): Java.Map;
                getJointCompilationOptionsP(): Promise<Java.Map>;
                getMinimumRecompilationInterval(): number;
                getMinimumRecompilationIntervalP(): Promise<number>;
                getOptimizationOptions(): Java.Map;
                getOptimizationOptionsP(): Promise<Java.Map>;
                getOutput(): object_t;
                getOutputP(): Promise<object_t>;
                getPluginFactory(): object_t;
                getPluginFactoryP(): Promise<object_t>;
                getRecompileGroovySource(): boolean;
                getRecompileGroovySourceP(): Promise<boolean>;
                getScriptBaseClass(): string;
                getScriptBaseClassP(): Promise<string>;
                getScriptExtensions(): Java.Set;
                getScriptExtensionsP(): Promise<Java.Set>;
                getSourceEncoding(): string;
                getSourceEncodingP(): Promise<string>;
                getTargetBytecode(): string;
                getTargetBytecodeP(): Promise<string>;
                getTargetDirectory(): object_t;
                getTargetDirectoryP(): Promise<object_t>;
                getTolerance(): number;
                getToleranceP(): Promise<number>;
                getVerbose(): boolean;
                getVerboseP(): Promise<boolean>;
                getWarningLevel(): number;
                getWarningLevelP(): Promise<number>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                setBytecodePostprocessor(arg0: object_t): void;
                setBytecodePostprocessorP(arg0: object_t): Promise<void>;
                setClasspath(arg0: string_t): void;
                setClasspathP(arg0: string_t): Promise<void>;
                setClasspathList(arg0: Java.List): void;
                setClasspathListP(arg0: Java.List): Promise<void>;
                setDebug(arg0: boolean_t): void;
                setDebugP(arg0: boolean_t): Promise<void>;
                setDefaultScriptExtension(arg0: string_t): void;
                setDefaultScriptExtensionP(arg0: string_t): Promise<void>;
                setDisabledGlobalASTTransformations(arg0: Java.Set): void;
                setDisabledGlobalASTTransformationsP(arg0: Java.Set): Promise<void>;
                setJointCompilationOptions(arg0: Java.Map): void;
                setJointCompilationOptionsP(arg0: Java.Map): Promise<void>;
                setMinimumRecompilationInterval(arg0: integer_t): void;
                setMinimumRecompilationIntervalP(arg0: integer_t): Promise<void>;
                setOptimizationOptions(arg0: Java.Map): void;
                setOptimizationOptionsP(arg0: Java.Map): Promise<void>;
                setOutput(arg0: object_t): void;
                setOutputP(arg0: object_t): Promise<void>;
                setPluginFactory(arg0: object_t): void;
                setPluginFactoryP(arg0: object_t): Promise<void>;
                setRecompileGroovySource(arg0: boolean_t): void;
                setRecompileGroovySourceP(arg0: boolean_t): Promise<void>;
                setScriptBaseClass(arg0: string_t): void;
                setScriptBaseClassP(arg0: string_t): Promise<void>;
                setScriptExtensions(arg0: Java.Set): void;
                setScriptExtensionsP(arg0: Java.Set): Promise<void>;
                setSourceEncoding(arg0: string_t): void;
                setSourceEncodingP(arg0: string_t): Promise<void>;
                setTargetBytecode(arg0: string_t): void;
                setTargetBytecodeP(arg0: string_t): Promise<void>;
                setTargetDirectory(arg0: string_t): void;
                setTargetDirectoryP(arg0: string_t): Promise<void>;
                setTargetDirectory(arg0: object_t): void;
                setTargetDirectoryP(arg0: object_t): Promise<void>;
                setTolerance(arg0: integer_t): void;
                setToleranceP(arg0: integer_t): Promise<void>;
                setVerbose(arg0: boolean_t): void;
                setVerboseP(arg0: boolean_t): Promise<void>;
                setWarningLevel(arg0: integer_t): void;
                setWarningLevelP(arg0: integer_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module CompilerConfiguration {
                interface Static {
                    JDK4: string;
                    JDK5: string;
                    JDK6: string;
                    JDK7: string;
                    JDK8: string;
                    POST_JDK5: string;
                    PRE_JDK5: string;
                    currentJVMVersion: string;
                    DEFAULT: Java.CompilerConfiguration;
                    new (arg0: Java.CompilerConfiguration): org.codehaus.groovy.control.CompilerConfiguration;
                    new (arg0: object_t): org.codehaus.groovy.control.CompilerConfiguration;
                    new (): org.codehaus.groovy.control.CompilerConfiguration;
                    isPostJDK5(arg0: string_t): boolean;
                    isPostJDK5P(arg0: string_t): Promise<boolean>;
                    isPostJDK7(arg0: string_t): boolean;
                    isPostJDK7P(arg0: string_t): Promise<boolean>;
                }
            }
        }
        module org.codehaus.groovy.control.customizers {
            interface CompilationCustomizer extends Java.java.lang.Object {
                call(arg0: object_t, arg1: object_t, arg2: Java.ClassNode): void;
                callP(arg0: object_t, arg1: object_t, arg2: Java.ClassNode): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getPhase(): object_t;
                getPhaseP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                needSortedInput(): boolean;
                needSortedInputP(): Promise<boolean>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module CompilationCustomizer {
                interface Static {
                    new (arg0: object_t): org.codehaus.groovy.control.customizers.CompilationCustomizer;
                }
            }
        }
        module org.codehaus.groovy.runtime {
            interface NullObject extends Java.groovy.lang.GroovyObjectSupport {
                asBoolean(): boolean;
                asBooleanP(): Promise<boolean>;
                asType(arg0: Java.Class): object_t;
                asTypeP(arg0: Java.Class): Promise<object_t>;
                clone(): object_t;
                cloneP(): Promise<object_t>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getMetaClass(): Java.MetaClass;
                getMetaClassP(): Promise<Java.MetaClass>;
                getProperty(arg0: string_t): object_t;
                getPropertyP(arg0: string_t): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                invokeMethod(arg0: string_t, arg1: object_t): object_t;
                invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
                is(arg0: object_t): boolean;
                isP(arg0: object_t): Promise<boolean>;
                iterator(): Java.Iterator;
                iteratorP(): Promise<Java.Iterator>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                plus(arg0: string_t): object_t;
                plusP(arg0: string_t): Promise<object_t>;
                plus(arg0: object_t): object_t;
                plusP(arg0: object_t): Promise<object_t>;
                setMetaClass(arg0: Java.MetaClass): void;
                setMetaClassP(arg0: Java.MetaClass): Promise<void>;
                setProperty(arg0: string_t, arg1: object_t): void;
                setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
                with(arg0: Java.Closure): object_t;
                withP(arg0: Java.Closure): Promise<object_t>;
            }
            module NullObject {
                interface Static {
                    getNullObject(): Java.NullObject;
                    getNullObjectP(): Promise<Java.NullObject>;
                }
            }
        }
        module org.codehaus.groovy.tools.shell {
            interface Groovysh extends Java.java.lang.Object {
                displayBuffer(arg0: Java.List): void;
                displayBufferP(arg0: Java.List): Promise<void>;
                displayWelcomeBanner(arg0: object_t): void;
                displayWelcomeBannerP(arg0: object_t): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                execute(arg0: string_t): object_t;
                executeP(arg0: string_t): Promise<object_t>;
                findCommand(arg0: string_t, arg1: Java.List): object_t;
                findCommandP(arg0: string_t, arg1: Java.List): Promise<object_t>;
                findCommand(arg0: string_t): object_t;
                findCommandP(arg0: string_t): Promise<object_t>;
                getBuffers(): object_t;
                getBuffersP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getDefaultErrorHook(): Java.Closure;
                getDefaultErrorHookP(): Promise<Java.Closure>;
                getDefaultResultHook(): Java.Closure;
                getDefaultResultHookP(): Promise<Java.Closure>;
                getErrorHook(): Java.Closure;
                getErrorHookP(): Promise<Java.Closure>;
                getEvictedLine(): string;
                getEvictedLineP(): Promise<string>;
                getHistory(): object_t;
                getHistoryP(): Promise<object_t>;
                getHistoryFull(): boolean;
                getHistoryFullP(): Promise<boolean>;
                getImports(): Java.List;
                getImportsP(): Promise<Java.List>;
                getImportStatements(): string;
                getImportStatementsP(): Promise<string>;
                getIndentPrefix(): string;
                getIndentPrefixP(): Promise<string>;
                getIndentSize(): number;
                getIndentSizeP(): Promise<number>;
                getInterp(): object_t;
                getInterpP(): Promise<object_t>;
                getIo(): object_t;
                getIoP(): Promise<object_t>;
                getMetaClass(): Java.MetaClass;
                getMetaClassP(): Promise<Java.MetaClass>;
                getPackageHelper(): object_t;
                getPackageHelperP(): Promise<object_t>;
                getParser(): object_t;
                getParserP(): Promise<object_t>;
                getProperty(arg0: string_t): object_t;
                getPropertyP(arg0: string_t): Promise<object_t>;
                getRegistry(): object_t;
                getRegistryP(): Promise<object_t>;
                getResultHook(): Java.Closure;
                getResultHookP(): Promise<Java.Closure>;
                getRunner(): object_t;
                getRunnerP(): Promise<object_t>;
                getUserStateDirectory(): object_t;
                getUserStateDirectoryP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                invokeMethod(arg0: string_t, arg1: object_t): object_t;
                invokeMethodP(arg0: string_t, arg1: object_t): Promise<object_t>;
                isExecutable(arg0: string_t): boolean;
                isExecutableP(arg0: string_t): Promise<boolean>;
                isHistoryFull(): boolean;
                isHistoryFullP(): Promise<boolean>;
                leftShift(arg0: object_t): object_t;
                leftShiftP(arg0: object_t): Promise<object_t>;
                leftShift(arg0: string_t): object_t;
                leftShiftP(arg0: string_t): Promise<object_t>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                register(arg0: object_t): object_t;
                registerP(arg0: object_t): Promise<object_t>;
                renderPrompt(): string;
                renderPromptP(): Promise<string>;
                run(arg0: string_t, arg1: Java.List): number;
                runP(arg0: string_t, arg1: Java.List): Promise<number>;
                run(arg0: string_t): number;
                runP(arg0: string_t): Promise<number>;
                setErrorHook(arg0: Java.Closure): void;
                setErrorHookP(arg0: Java.Closure): Promise<void>;
                setEvictedLine(arg0: string_t): void;
                setEvictedLineP(arg0: string_t): Promise<void>;
                setHistory(arg0: object_t): void;
                setHistoryP(arg0: object_t): Promise<void>;
                setHistoryFull(arg0: boolean_t): void;
                setHistoryFullP(arg0: boolean_t): Promise<void>;
                setIndentSize(arg0: integer_t): void;
                setIndentSizeP(arg0: integer_t): Promise<void>;
                setMetaClass(arg0: Java.MetaClass): void;
                setMetaClassP(arg0: Java.MetaClass): Promise<void>;
                setPackageHelper(arg0: object_t): void;
                setPackageHelperP(arg0: object_t): Promise<void>;
                setProperty(arg0: string_t, arg1: object_t): void;
                setPropertyP(arg0: string_t, arg1: object_t): Promise<void>;
                setResultHook(arg0: Java.Closure): void;
                setResultHookP(arg0: Java.Closure): Promise<void>;
                setRunner(arg0: object_t): void;
                setRunnerP(arg0: object_t): Promise<void>;
                super$2$$getStaticMetaClass(): Java.MetaClass;
                super$2$$getStaticMetaClassP(): Promise<Java.MetaClass>;
                super$2$execute(arg0: string_t): object_t;
                super$2$executeP(arg0: string_t): Promise<object_t>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module Groovysh {
                interface Static {
                    COLLECTED_BOUND_VARS_MAP_VARNAME: string;
                    INTERPRETER_MODE_PREFERENCE_KEY: string;
                    AUTOINDENT_PREFERENCE_KEY: string;
                    COLORS_PREFERENCE_KEY: string;
                    METACLASS_COMPLETION_PREFIX_LENGTH_PREFERENCE_KEY: string;
                    __$stMC: boolean;
                    new (arg0: Java.ClassLoader, arg1: Java.Binding, arg2: object_t, arg3: Java.Closure): org.codehaus.groovy.tools.shell.Groovysh;
                    new (arg0: Java.ClassLoader, arg1: Java.Binding, arg2: object_t): org.codehaus.groovy.tools.shell.Groovysh;
                    new (arg0: Java.Binding, arg1: object_t): org.codehaus.groovy.tools.shell.Groovysh;
                    new (arg0: object_t): org.codehaus.groovy.tools.shell.Groovysh;
                    new (): org.codehaus.groovy.tools.shell.Groovysh;
                    isTypeOrMethodDeclaration(arg0: Java.List): boolean;
                    isTypeOrMethodDeclarationP(arg0: Java.List): Promise<boolean>;
                }
            }
        }
        module org.codehaus.groovy.util {
            interface ManagedReference extends Java.java.lang.Object {
                clear(): void;
                clearP(): Promise<void>;
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                finalizeReference(): void;
                finalizeReferenceP(): Promise<void>;
                get(): object_t;
                getP(): Promise<object_t>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ManagedReference {
                interface Static {
                    new (arg0: object_t, arg1: object_t, arg2: object_t): org.codehaus.groovy.util.ManagedReference;
                    new (arg0: Java.ReferenceBundle, arg1: object_t): org.codehaus.groovy.util.ManagedReference;
                }
            }
        }
        module org.codehaus.groovy.util {
            interface ReferenceBundle extends Java.java.lang.Object {
                equals(arg0: object_t): boolean;
                equalsP(arg0: object_t): Promise<boolean>;
                getClass(): Java.Class;
                getClassP(): Promise<Java.Class>;
                getManager(): object_t;
                getManagerP(): Promise<object_t>;
                getType(): object_t;
                getTypeP(): Promise<object_t>;
                hashCode(): number;
                hashCodeP(): Promise<number>;
                notify(): void;
                notifyP(): Promise<void>;
                notifyAll(): void;
                notifyAllP(): Promise<void>;
                toString(): string;
                toStringP(): Promise<string>;
                wait(arg0: long_t, arg1: integer_t): void;
                waitP(arg0: long_t, arg1: integer_t): Promise<void>;
                wait(arg0: long_t): void;
                waitP(arg0: long_t): Promise<void>;
                wait(): void;
                waitP(): Promise<void>;
            }
            module ReferenceBundle {
                interface Static {
                    new (arg0: object_t, arg1: object_t): org.codehaus.groovy.util.ReferenceBundle;
                    getHardBundle(): Java.ReferenceBundle;
                    getHardBundleP(): Promise<Java.ReferenceBundle>;
                    getPhantomBundle(): Java.ReferenceBundle;
                    getPhantomBundleP(): Promise<Java.ReferenceBundle>;
                    getSoftBundle(): Java.ReferenceBundle;
                    getSoftBundleP(): Promise<Java.ReferenceBundle>;
                    getWeakBundle(): Java.ReferenceBundle;
                    getWeakBundleP(): Promise<Java.ReferenceBundle>;
                }
            }
        }
    }
}